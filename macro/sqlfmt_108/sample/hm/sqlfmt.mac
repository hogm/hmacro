// sqlfmt.dll を秀丸エディタへ組み込んで
// 使用する場合の秀丸エディタ用のマクロ記述例
// 
// マクロの機能
// このマクロを秀丸エディタへ登録して実行すると
// 選択中のSQLやPL/SQLを整形する事が出来ます。
// 
// マクロの登録
// 秀丸エディタのメニューバー→マクロ(M)→マクロ登録(E)→
// 「マクロ登録」ダイアログで「タイトル」には任意の文字列
// 例えば「SqlFmt」、「ファイル名」にはこのファイルが格納
// されているパスを記述します。
// 
// マクロの使用
// (1).マウスやカーソルキーを操作して、整形したい SQL や 
// PL/SQL の行を選択します。Ctrl+A で編集中のファイル全体を
// 選択する事が出来ます。
// (2).秀丸エディタのメニューバー→マクロ(M)→(1)で登録した
// タイトルがメニューバーに現れるのでそれを選択します。
// (3).「文の整形に成功しました。」という表示とともに、
// 整形結果が反映されます。


// PATH が通わないディレクトリ下に配置した DLL を使用する
// 場合は、dll へたどり着くためのパスを全て記述しなければ
// なりません。この時、ディレクトリ区切り文字'\'を表現する
// ためには更にもう一つ'\'を前置きする必要があります。
//loaddll "C:\\borland\\USER\\sqlfmt\\sqlfmt.dll";

loaddll "C:\\Program Files\\Hidemaru\\macro\\sqlfmt_108\\sqlfmt.dll";
if(!result){
    message "sqlfmt.dllのロードに失敗しました。";
    endmacro;
}


// 選択中の文をクリップボードへ取り込みます。
copy2;


// 【デフォルトの動作でよい場合のテートメント例】
// 秀丸エディタのマクロを使って、コマンドツール版の SqlFmt と
// 同じ引数を取るタイプのエクスポート関数を呼び出しています。
#rtn = dllfunc("_iPerformInCompatibleForm");


// 【デフォルトの動作を上書きする場合のステートメント例】
// ここで指定した引数の説明は readme.txt へ記載しています。
// #rtn = dllfunc("_iPerformInCompatibleForm", "-i0", "-c14", "-s50");
// 【下のステートメント例は上のステートメント例と意味的に等価】
// #rtn = dllfunc("_iPerformInCompatibleForm", "--indent_width=0", "--num_comma=14", "--part_size=50");


// 戻り値に応じた処理を行います。
if (!#rtn){
	// 整形が済んだ文をクリップボードから読み出します。
	paste;
//	message "文の整形に成功しました。";
} else {
	message "文の整形に失敗しました。(戻り値=" + str(#rtn) + ")";
}


// dllが使用していたリソースを開放します。
freedll;

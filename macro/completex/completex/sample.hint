number abs ( mixed $number )\nnumber の絶対値を返します。
float acos ( float $arg )\narg のアークコサインをラジアンで返します。 acos() は cos() の逆関数で、 acos() がとりうる範囲内のすべての a について a==cos(acos(a)) が成立します。
float acosh ( float $arg )\narg のアークハイパボリックコサインを返します。 つまり、ハイパボリックコサインが arg となる値です。
string addcslashes ( string $str , string $charlist )\ncharlist パラメータに羅列された文字の前にバックスラッシュを付けた文字列を返します。
string addslashes ( string $str )\nデータベースへの問い合わせなどに際してクォートされるべき文字の前に バックスラッシュを挿入した文字列を返します。 クォートされるべき文字とは、シングルクォート(&#039;), ダブルクォート(&quot;),バックスラッシュ (\\) ,NUL (NULL バイト) です。\naddslashes() の使用例は、 データベースにデータを登録するときです。例えば、 O&#039;reilly という名前をデータベースに挿入するには、 エスケープする必要があります。各 DBMS 専用のエスケープ関数 (たとえば MySQL なら mysqli_real_escape_string()、 PostgreSQL なら pg_escape_string()) を使うことを強く推奨しますが、もし専用の関数がなく かつその DBMS が \\ をエスケープ用文字として使用しているのなら この関数を使用することができます。 これはデータベースにデータを格納する場合のみ必要です。 追加される \\ は挿入されません。 PHP のディレクティブ magic_quotes_sybase を on にすると、&#039; はもうひとつの &#039; でエスケープされます。\nPHP ディレクティブ  magic_quotes_gpc はデフォルトでは on で、 全ての GET、POST、COOKIE データについて基本的に addslashes() を実行します。 magic_quotes_gpc によってすでにエスケープされた文字列に対して addslashes() を実行しないでください。 さもないと、重複してエスケープされてしまいます。 関数 get_magic_quotes_gpc() はこれを確認するのに役立つかも知れません。
array aggregate_info ( object $object )\nobject で指定したオブジェクトについての 集約情報を取得します。
void aggregate_methods_by_list ( object $object , string $class_name , array $methods_list [, bool $exclude ] )\nメソッド名のリストを使用して、クラスのメソッドを既存のオブジェクトに集約します。\nクラスのコンストラクタ、およびアンダースコア文字 (_) で始まる名前のメソッド (プライベートとみなされます) は、常に対象となりません。
void aggregate_methods_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )\nクラスのメソッドを既存のオブジェクトに集約します。 集約するメソッドを決定するために正規表現を使用します。\nクラスのコンストラクタ、およびアンダースコア文字 (_) で始まる名前の メソッド (プライベートとみなされます) は、常に対象となりません。
void aggregate_methods ( object $object , string $class_name )\nクラスで定義されているすべてのメソッドを既存のオブジェクトに集約します。 ただし、クラスのコンストラクタは例外です。 また名前がアンダースコア文字 (_) で始まるメソッドも、 プライベートとみなされて例外となります。
void aggregate_properties_by_list ( object $object , string $class_name , array $properties_list [, bool $exclude ] )\nプロパティ名のリストを使用して、クラスのプロパティを既存のオブジェクトに集約します。\nアンダースコア文字 (_) で始まる名前のプロパティ (プライベートとみなされます) は、常に対象となりません。
void aggregate_properties_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )\nクラスのプロパティを既存のオブジェクトに集約します。集約するプロパティを 決定するために正規表現を使用します。\nアンダースコア文字 (_) で始まる名前のプロパティ (プライベートとみなされます) は、常に対象となりません。
void aggregate_properties ( object $object , string $class_name )\nクラスで定義されているすべてのプロパティを既存のオブジェクトに 集約します。ただし、名前がアンダースコア文字 (_) で始まる プロパティは、プライベートとみなされて例外となります。
void aggregate ( object $object , string $class_name )\n既存のオブジェクトにあるクラスで定義されたメソッドとプロパティを集約します。 アンダースコア文字 (_) で始まるメソッドとプロパティは、 集約されたクラスではプライベートとみなされ、使用されません。 コンストラクタも集約処理から除外されます。
array aggregate_info ( object $object )\nobject で指定したオブジェクトについての 集約情報を取得します。
bool apache_child_terminate ( void )\napache_child_terminate() は、カレントのPHPリク エストを実行しているApacheプロセスをリクエスト終了時点で終了しま す。この関数は、メモリ消費量が大きなスクリプトを実行した後プロセ スを使用するために使用することが可能です。これは、メモリは通常内 部的にのみ解放され、オペレーティングシステムに戻されないためです。
array apache_get_modules ( void )\nロードされた Apache モジュールのリストを取得します。
string apache_get_version ( void )\nApache のバージョンを取得します。
string apache_getenv ( string $variable [, bool $walk_to_top ] )\nvariable で指定された Apache 環境変数を取得します。\nこの関数は Apache 2 を必要とします。それ以外では定義されていません。
object apache_lookup_uri ( string $filename )\nこの関数は、URIにリクエストの一部を行います。このリクエストは指定した リソースに関する全ての重要な情報を得るのに十分なものです。\nこの関数は、 PHP が apache モジュールとしてインストールされた場合のみサポートされます。
string apache_note ( string $note_name [, string $note_value ] )\nこの関数は、Apache の table_get および table_set のラッパーです。 リクエスト中に存在する note のテーブルを編集します。 このテーブルは、Apache モジュール間の通信に用いるものです。\napache_note() の主な使用法は、 同一リクエスト内でのモジュール間の情報のやりとりです。
array apache_request_headers ( void )\n現在のリクエストにおけるすべての HTTP リクエストヘッダを取得します。\nこの関数は、 PHP が apache モジュールとしてインストールされた場合のみサポートされます。
bool apache_reset_timeout ( void )\napache_reset_timeout() は Apache の書き込みタイマーをリセットします。デフォルトは 300 秒です。 set_time_limit(0); ignore_user_abort(true) と定期的な apache_reset_timeout() をコールすることで、 理論的に Apache を永遠に実行することができます。\nこの関数は Apache 1 を必要とします。
array apache_response_headers ( void )\n全てのApacheレスポンスヘッダを配列として取得します。
bool apache_setenv ( string $variable , string $value [, bool $walk_to_top = false ] )\napache_setenv() は variable で指定された Apache 環境変数の値を設定します。
bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] )\nまだ保存されていない場合にのみ、変数をデータ領域にキャッシュします。
array apc_cache_info ([ string $cache_type [, bool $limited = false ]] )\nAPC のデータから、キャッシュされた情報およびメタデータを取得します。
bool apc_clear_cache ([ string $cache_type ] )\nユーザ/システム キャッシュをクリアします。
bool apc_compile_file ( string $filename )\nファイルをバイトコードキャッシュに保存し、すべてのフィルタをバイパスします。
bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = true ] )\nご存知のとおり、define() は非常に遅いです。 APC を使用する主な利点はスクリプト/アプリケーションのパフォーマンスの改善なので、 大量の定数を定義する手順を合理化するために、この仕組みが提供されています。 しかし、この関数は期待通りの動作をしません。\nよりよい解決策として、PECL の &raquo; hidef 拡張モジュールを試してみましょう。
bool apc_delete ( string $key )\n格納されている変数をキャッシュから取り除きます。
mixed apc_fetch ( string $key [, bool &$success ] )\n格納されている変数をキャッシュから取得します。
bool apc_load_constants ( string $key [, bool $case_sensitive = true ] )\n定数群をキャッシュから読み込みます。
array apc_sma_info ([ bool $limited = false ] )\nAPC の共有メモリ割り当てに関する情報を取得します。
bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] )\n変数をデータ領域にキャッシュします。
bool apd_breakpoint ( int $debug_level )\nスクリプトの実行を停止し、接続しているソケットからの応答を待ち受ける ために使用します。プログラムのステップ実行を行うには、Enter キーを押す (空行を送る) あるいは実行したい PHP コマンドを入力します。
array apd_callstack ( void )\n現在のコールスタックを配列形式で返します。
void apd_clunk ( string $warning [, string $delimiter ] )\nperl の Carp::cluck と同じように動作します。警告とコールバックをスローします。 デフォルトの行区切り文字は &quot;<BR />\\n&quot; です。
bool apd_continue ( int $debug_level )\nインタプリタを再開するために、一般的にはソケット経由で送信します。
void apd_croak ( string $warning [, string $delimiter ] )\nperl の Carp::croak と同じように動作します。エラーとコールバックをスローし、 終了します。
void apd_dump_function_table ( void )\n現在の関数テーブルを出力します。
array apd_dump_persistent_resources ( void )\nすべての持続的なリソースを配列で返します。
array apd_dump_regular_resources ( void )\n現在のすべての一般リソースを配列で返します。
bool apd_echo ( string $output )\n実行中のスクリプトに関する情報を、 一般的にはソケット経由でリクエストします。
array apd_get_active_symbols ( void )\nアクティブなスコープ内で定義されているすべての変数名を返します (変数の値ではありません)。
string apd_set_pprof_trace ([ string $dump_directory [, string $fragment = &quot;pprof&quot; ]] )\nダンプディレクトリの pprof_{process_id} へのデバッグを開始します。
bool apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level )\n指定した tcp_server (tcplisten など) に接続し、 デバッグデータをソケットに送信します。
void apd_set_session_trace ( int $debug_level [, string $dump_directory ] )\nダンプディレクトリの apd_dump_{process_id} へのデバッグを開始します。
void apd_set_session ( int $debug_level )\nアプリケーション内で、場所によってデバッグのレベルを増減する際に使用可能です。
array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )\ninput のすべてのキーを小文字あるいは大文字にした配列を返します。 数値添字はそのままとなります。
array array_chunk ( array $input , int $size [, bool $preserve_keys = false ] )\n配列を、size 個ずつの要素に分割します。 最後の部分の要素数は size より小さくなることもあります。
array array_combine ( array $keys , array $values )\nkeys 配列の値をキーとして、また values 配列の値を対応する値として生成した 配列 を作成します。
array array_count_values ( array $input )\narray_count_values() は、 配列 input の値をキーとし、 input におけるその値の出現回数を値とした配列を返します。
array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )\narray1 を array2 と比較し、 その差を返します。array_diff() とは異なり、 配列のキーを用いて比較を行います。
array array_diff_key ( array $array1 , array $array2 [, array $... ] )\narray1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 値ではなくキーを用いて比較するという点が異なります。
array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )\narray1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 配列のキーを用いて比較するという点が異なります。\narray_diff_assoc() とは異なり、 内部関数ではなくユーザが指定したコールバック関数を用いて添字を比較します。
array array_diff_ukey ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )\narray1 のキーを array2 のキーと比較し、その差を返します。 この関数は array_diff() に似ていますが、 値ではなくキーを用いて比較するという点が異なります。\narray_diff_key() とは異なり、 内部関数ではなくユーザが指定したコールバック関数を用いて添字を比較します。
array array_diff ( array $array1 , array $array2 [, array $ ... ] )\narray1 を array2 と比較し、その差を返します。
array array_fill_keys ( array $keys , mixed $value )\nパラメータ value で指定した値で配列を埋めます。 キーとして、配列 keys で指定した値を使用します。
array array_fill ( int $start_index , int $num , mixed $value )\nパラメータ value を値とする num 個のエントリからなる配列を埋めます。 この際、キーは、start_index パラメータから開始します。
array array_filter ( array $input [, callback $callback ] )\ncallback 関数によりフィルタ処理が行われた input の全ての要素を含む配列を返します。 callback 関数が true を返した場合、 input の現在の値が結果の配列に入ります。 input が連想配列の場合、 キーは保存されます。
array array_flip ( array $trans )\narray_flip() は、配列を反転して返します。 すなわち、trans のキーが値となり、 trans の値がキーとなります。\ntrans の値は有効なキーを必要とすることに注意してください。 すなわち、キーは、integer または string である必要があります。ある値が間違った型である場合、 警告が出力され、問題のこのキー/値の組は逆順にされません。\nある値が複数回出現した場合、最後のキーがその値として使用され、 その他の値は失われます。
array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )\narray_intersect_assoc() は、全ての引数に現れる array1 の全ての値を含む配列を返します。 array_intersect() と異なり、 キーが比較に使用されることに注意してください。
array array_intersect_key ( array $array1 , array $array2 [, array $ ... ] )\narray_intersect_key() は、 array1 の値のうち、 その他のすべての引数の中に共通して存在するキーと一致するキーの値からなる配列を返します。
array array_intersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )\narray_intersect_uassoc() は、全ての引数に現れる array1 の全ての値を含む配列を返します。 array_intersect() と異なり、 キーが比較に使用されることに注意してください。\n比較は、ユーザが指定したコールバック関数を利用して行われます。 この関数は、1 つめの引数が 2 つめより小さい / 等しい / 大きい 場合にそれぞれ 負の数 / ゼロ / 正の数 を返す必要があります。
array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )\narray_intersect_ukey() は、他の全ての引数に存在する array1 の値を全て有する配列を返します。\n比較は、ユーザが指定したコールバック関数を利用して行われます。 この関数は、1 つめの引数が 2 つめより小さい / 等しい / 大きい 場合にそれぞれ 負の数 / ゼロ / 正の数 を返す必要があります。
array array_intersect ( array $array1 , array $array2 [, array $ ... ] )\narray_intersect() は、他の全ての引数に存在する array1 の値を全て有する配列を返します。 キーと値の関係は維持されることに注意してください。
bool array_key_exists ( mixed $key , array $search )\n指定した key が配列に設定されている場合、 array_key_exists() は TRUE を返します。 key は配列添字として使用できる全ての値を使用可能です。
array array_keys ( array $input [, mixed $search_value [, bool $strict = false ]] )\narray_keys() は、配列 input から全てのキー (数値および文字列) を返します。\nオプション search_value が指定された場合、 指定した値に関するキーのみが返されます。指定されない場合は、 input から全てのキーが返されます。
array array_map ( callback $callback , array $arr1 [, array $... ] )\narray_map() は、arr1 の各要素に callback 関数を適用した後、 その全ての要素を含む配列を返します。 callback 関数が受け付けるパラメータの数は、 array_map() に渡される配列の数に一致している必要があります。
array array_merge_recursive ( array $array1 [, array $... ] )\narray_merge_recursive() は、 一つ以上の配列の要素をマージし、 前の配列の最後にもう一つの配列の値を追加します。 マージした後の配列を返します。\n入力配列が同じ文字列のキーを有している場合、 マージした後の配列ではこれらのキーの値がひとつにまとめられます。 この処理は再帰的に行われます。 このため、値の一つが配列自体を指している場合、 この関数は別の配列の対応するエントリもマージします。 しかし、配列が同じ数値キーを有している場合、 後の値は元の値を上書せず、追加されます。
array array_merge ( array $array1 [, array $array2 [, array $... ]] )\n前の配列の後ろに配列を追加することにより、 ひとつまたは複数の配列の要素をマージし、得られた配列を返します。\n入力配列が同じキー文字列を有していた場合、そのキーに関する後に指定された値が、 前の値を上書きします。しかし、配列が同じ添字番号を有していても 値は追記されるため、このようなことは起きません。\n配列が一つだけ指定され、その配列が数字で添字指定されていた場合、 キーの添字が連続となるように振り直されます。
bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]] )\narray_multisort() は、複数の配列を一度に、 または、多次元の配列をその次元の一つでソートする際に使用可能です。 この関数は、ソートの際にキーの相関を維持します。\n連想配列のキー (string) は不変ですが、 数値添字は再度振り直されます。
array array_pad ( array $input , int $pad_size , mixed $pad_value )\narray_pad() は、pad_size で指定した長さになるように値 pad_value で埋めて input のコピーを返します。 pad_size が正の場合、配列の右側が埋められます。 負の場合、配列の左側が埋められます。 pad_size の絶対値が input の長さ以下の場合、埋める処理は行われません。 一度に追加できる要素の最大数は 1048576 です。
mixed array_pop ( array &$array )\narray_pop() は配列 array の最後の値を取り出して返します。 配列 array は、要素一つ分短くなります。 array が空 (または、配列でない) の場合、 NULL が返されます。配列でない場合は、それに加えてさらに 警告 が発生します。
number array_product ( array $array )\narray_product() は、配列の値の積を計算します。
int array_push ( array &$array , mixed $var [, mixed $... ] )\narray_push()は、array をスタックとして処理し、渡された変数を array の最後に加えます。配列 array の長さは渡された変数の数だけ増加します。 各 var 毎に以下を繰り返すことと同じ効果があります。\n<?php$array[]&nbsp;=&nbsp;$var;?>\n各 var で繰り返されます。
mixed array_rand ( array $input [, int $num_req = 1 ] )\narray_rand() は、 配列から一つ以上のランダムなエントリを取得しようとする場合に有用です。
mixed array_reduce ( array $input , callback $function [, int $initial ] )\narray_reduce() は、配列 input の各要素に function 関数を繰り返し適用し、 配列を一つの値に減らします。
array array_replace_recursive ( array &$array , array &$array1 [, array &$array2 [, array &$... ]] )\narray_replace_recursive() は、 最初の配列の値をそれ以降の配列の同じ要素の値で置き換えます。 最初の配列のキーと同じキーが 2 番目の配列にあれば、 2 番目の配列の値が最初の配列の値を上書きします。 2 番目の配列に存在するキーが最初の配列に存在しなければ、 そのキーが新たに最初の配列内に作られます。 最初の配列にしか存在しないキーについては何も変わりません。 置き換え用の配列が複数渡された場合は渡した順に処理を行い、 後から渡した配列の値のほうが優先されます。\narray_replace_recursive() は再帰的な処理を行います。 配列を再帰的にたどり、内部の値に対しても同じ手順で処理します。\narray の値がスカラーの場合は、 array1 の値がスカラーであるか配列であるかにかかわらずそれで置き換えられます。 array の値と array1 の値が両方配列である場合は、array_replace_recursive() が対応する値を再帰的に処理します。
array array_replace ( array &$array , array &$array1 [, array &$array2 [, array &$... ]] )\narray_replace() は、 最初の配列の値をそれ以降の配列の同じ要素の値で置き換えます。 最初の配列のキーと同じキーが 2 番目の配列にあれば、 2 番目の配列の値が最初の配列の値を上書きします。 2 番目の配列に存在するキーが最初の配列に存在しなければ、 そのキーが新たに最初の配列内に作られます。 最初の配列にしか存在しないキーについては何も変わりません。 置き換え用の配列が複数渡された場合は渡した順に処理を行い、 後から渡した配列の値のほうが優先されます。\narray_replace() は再起的な処理を行いません。 2 番目の配列の値がどんな型であっても、最初の配列の値を置き換えます。
array array_reverse ( array $array [, bool $preserve_keys = false ] )\n配列を受け取って、要素の順番を逆にした新しい配列を返します。
mixed array_search ( mixed $needle , array $haystack [, bool $strict ] )\nhaystack において needle を検索します。
mixed array_shift ( array &$array )\narray_shift() は、array の最初の値を取り出して返します。配列 array は、要素一つ分だけ短くなり、全ての要素は前にずれます。 数値添字の配列のキーはゼロから順に新たに振りなおされますが、 リテラルのキーはそのままになります。
array array_slice ( array $array , int $offset [, int $length [, bool $preserve_keys = false ]] )\narray_slice()は、array から引数 offset および length で指定された連続する要素を返します。
array array_splice ( array &$input , int $offset [, int $length = 0 [, mixed $replacement ]] )\n配列 input から offset および length で指定された要素を削除し、配列 replacement でそれを置換します。\ninput の配列の数値添字は保存されないことに注意しましょう。
number array_sum ( array $array )\narray_sum() は、配列の中の値の合計を整数または float として返します。
array array_udiff_assoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算します。
array array_udiff_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func )\nデータと添字の比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算します。\narray_diff() や array_udiff() と異なり、キーが比較に使用されることに注意してください。
array array_udiff ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、配列の差を計算します。 この関数は array_diff() と異なり、 データの比較に内部関数を利用します。
array array_uintersect_assoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算します。\narray_uintersect()と異なり、キーが比較に使用される ことに注意してください。データはコールバック関数を用いて比較されます。
array array_uintersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func )\nデータと添字の比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算します。 array_uintersect()と異なり、 キーが比較に使用されることに注意してください。 データと添字は、それぞれ個別のコールバック関数を用いて比較されます。
array array_uintersect ( array $array1 , array $array2 [, array $ ... ], callback $data_compare_func )\nデータの比較にコールバック関数を用い、配列の共通項を計算します。
array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )\narray を入力とし、値に重複のない新規配列を返します。\nキーは保持されることに注意してください。 array_unique() はまず文字列として値をソートし、 各値の最初のキーを保持し、2回目以降の全てのキーを無視します。 これは、ソート前の array で最初の関連する値のキーが保持されるという意味ではありません。
int array_unshift ( array &$array , mixed $var [, mixed $... ] )\narray_unshift() は、array の先頭に指定された要素を加えます。リストの要素は全体として加えられるため、 加えられた要素の順番は変わらないことに注意してください。 配列の数値添字はすべて新たにゼロから振りなおされます。 リテラルのキーについては変更されません。
array array_values ( array $input )\narray_values() は、配列 input から全ての値を取り出し、数値添字をつけた配列を返します。
bool array_walk_recursive ( array &$input , callback $funcname [, mixed $userdata ] )\ninput 配列の各要素にユーザ定義関数 funcname を適用します。 この関数は配列の要素内を再帰的にたどっていきます。
bool array_walk ( array &$array , callback $funcname [, mixed $userdata ] )\narray 配列の各要素にユーザ定義関数 funcname を適用します。\narray_walk() は array の内部配列ポインタに影響されません。array_walk() はポインタの位置に関わらず配列の全てに渡って適用されます。
array array ([ mixed $... ] )\n配列を作成します。 配列に関するより詳しい情報は配列型 のセクションをご覧ください。
bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\nこの関数は、連想配列において各配列のキーと要素との関係を維持しつつソートを行います。\nこの関数は、主に実際の要素の並び方が重要である連想配列をソートするために使われます。
int ascii2ebcdic ( string $ascii_str )\nascii2ebcdic() は、EBCDICに基づくオペレーティング システム (OS/390, BS2000)でのみ使用可能なApache専用の関数です。 この関数は、ASCIIエンコードされた文字列 ascii_str を等価なEBCDIC表現(バイナリ対応)に 変換し、結果を返します。
float asin ( float $arg )\narg のアークサインをラジアンで返します。 asin() は sin() の逆関数で、 asin() がとりうる範囲内のすべての a について a==sin(asin(a)) が成立します。
float asinh ( float $arg )\narg のアークハイパボリックサインを返します。 つまり、ハイパボリックサインが arg となる値です。
bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\nこの関数は、 連想配列において各配列のキーと要素との関係を維持しつつ配列をソートします。 この関数は、 主に実際の要素の並び方が重要である連想配列をソートするために使われます。
mixed assert_options ( int $what [, mixed $value ] )\n種々の assert() 制御オプションを設定したり、 単に現在の設定を調べたりします。
bool assert ( mixed $assertion )\nassert() は、指定した assertion を調べて、結果が FALSE の場合に適切な動作をします。\nassertion が文字列として指定された場合、 assert()によりPHPコードとして評価されます。 文字列 assertion が優れているところは、 assertion のチェックがオフになった場合のオーバーヘッドがより少な いことであり、assertionが失敗した場合のメッセージを式 assertion に有しています。 つまり、もし論理型の条件を assertion として渡した場合、この条件が assert_options() 関数で指定したハンドラ関数への引数とはならないということです。 条件はハンドラ関数をコールする前に文字列に変換され、論理型の FALSE は空文字列に変換されます。\nassertion は、デバッグ目的にのみ使用するべきです。 assertion を常にTRUEとなる条件を調べる不具合診断に使用し、TRUE でない場合に何らかのプログラミングエラーを示したり、extension 関数または特定のシステム制限や機能といった、 特定の機能の存在をチェックするために使用することが可能です。\nassersion は、入力パラメータのチェックのような通常の実行動作に 使用するべきではありません。一般的には、assertion のチェックを無効にしても そのコードが正常に動作しなければなりません。\nassert() の動作は、 assert_options() またはマニュアルの関数の部分 に記述された .ini の設定により設定することが可能です。\n関数 assert_options() や ASSERT_CALLBACK 設定ディレクティブにより失敗した assertion を処理するコールバック関数を設定することが可能です。\nassert() のコールバックは、assertion が発生した場所に関する情報と共に assertion に渡されたコードを容易にキャプチャーできるため、 特に自動テストセットを構築する際に便利です。 この情報は他の手法でもキャプチャー可能ですが、assertion を使用することにより、より簡単かつ容易に行なうことが可能です!\nコールバック関数は、3つの引数を受ける必要があります。最初の引数は、 assertionが失敗したファイルが含まれます。2番目の引数には、 assertionが失敗した行が含まれ、3番目の引数には失敗した式が含まれます (もしある場合のみ。1 または &quot;two&quot; のようなリテラルの値は、 この引数に渡されません)。
float atan ( float $arg )\narg のアークタンジェントをラジアンで返します。 atan() is the は tan() の逆関数で、 atan() がとりうる範囲内のすべての a について a==tan(atan(a)) が成立します。
float atan2 ( float $y , float $x )\nこの関数は、2 つの変数 x および y のアークタンジェントを計算します。 y / x のアークタンジェントを計算するのに似ていますが、 2 つの引数の符号を用いて結果の象限を定義することが異なっています。\nこの関数は、結果を -PI から PI の間(両端を含む)のラジアンで返します。
float atanh ( float $arg )\narg のアークハイパボリックタンジェントを返します。 つまり、ハイパボリックタンジェントが arg となる値です。
string base_convert ( string $number , int $frombase , int $tobase )\nnumber を基数 tobase で表した文字列を返します。 number の基数は、 frombase で指定します。 frombase および tobase は、ともに 2 から 36 までである必要があります。 10 より大きな基数を有する数の各桁は、文字 a-z で表されます。 この場合、a は 10、b は 11、z は 35 を意味します。\n警告\n大きな数値で base_convert() を使用すると、 精度が失われてしまうことがあります。これは、内部で使用している &quot;double&quot; や &quot;float&quot; の性質によるものです。詳細な情報や制限については マニュアルの浮動小数点数 のセクションを参照ください。
string base64_decode ( string $data [, bool $strict = false ] )\nbase64 でエンコードされた data をデコードします。
string base64_encode ( string $data )\n指定した data を base64 でエンコードします。\nこのエンコードは、メールの本体のように 8 ビットクリーンではないトランスポート層を通じても、 バイナリデータが生き残れるように設計されています。\nBase64 でエンコードされたデータは、エンコード前のデータにくらべて 33% 余計に容量が必要です。
string basename ( string $path [, string $suffix ] )\nこの関数は、ファイルへのパスを有する文字列を引数とし、 ファイルのベース名を返します。
bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules )\n既存の BBCode_Container tag_set に、tag_rules を使用してタグを追加します。
bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by )\n顔文字をパーサに追加します。
resource bbcode_create ([ array $bbcode_initial_tags ] )\nこの関数は、新しい BBCode リソースを返します。 これを用いて BBCode 文字列をパースします。
bool bbcode_destroy ( resource $bbcode_container )\nこの関数は、bbcode_create() がオープンしたリソースを閉じます。
string bbcode_parse ( resource $bbcode_container , string $to_parse )\nこの関数は、bbcode_create() で作成した bbcode_container の規則にもとづいて文字列 to_parse をパースします。
bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser )\n別のパーサを bbcode_container にアタッチします。 このパーサは、引数をパースする必要が生じた際にのみ用いられます。 この関数を使用しない場合、 デフォルトの引数パーサとして用いられるのはそのパーサ自身です。
bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode = BBCODE_SET_FLAGS_SET ] )\nパーサのオプションを設定あるいは変更します。
string bcadd ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand を right_operand に加算します。
int bccomp ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand と right_operand を比較し、 結果を整数値で返します。
string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand を right_operand で除算します。
string bcmod ( string $left_operand , string $modulus )\nleft_operand の、 modulus を法とする剰余を取得します。
string bcmul ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand に right_operand を掛けます。
bool bcompiler_load_exe ( string $filename )\nbcompiler の exe ファイルからデータを読み込み、バイトコードからクラスを生成します。
bool bcompiler_load ( string $filename )\nbzip 圧縮されたファイルを読み込み、バイトコードからクラスを生成します。
bool bcompiler_parse_class ( string $class , string $callback )\nクラスのバイトコードを読み込み、ユーザ関数をコールします。
bool bcompiler_read ( resource $filehandle )\n開いているファイルハンドルからデータを読み込み、バイトコードからクラスを生成します。
bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] )\nこの関数は、PHP から既存のクラスをバイトコードとして読み込み、 開かれているファイルハンドルに書き込みます。
bool bcompiler_write_constant ( resource $filehandle , string $constantName )\nこの関数は、PHP から既存の定数をバイトコードとして読み込み、 開かれているファイルハンドルに書き込みます。
bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos )\nEXE (あるいは実行可能) ファイルは、三つの部分からできています。   PHP インタプリタ・bcompiler 拡張モジュール・保存されたバイトコードを読み込み、 指定した関数 (たとえば main) やクラスメソッド (たとえば main::main) をコールするためのスタブ (実行可能なコード。たとえばコンパイル済の C プログラムなど)  バイトコード (この場合は圧縮していないもののみが対象となります) bcompiler の EXE フッタ\nbcompiler の CVS 上で examples/embed ディレクトリにある、 php_embed ベースのスタブ phpe.c をコンパイルすることで 適切なスタブが取得できます。
bool bcompiler_write_file ( resource $filehandle , string $filename )\nこの関数は、指定したソースファイルをバイトコードにコンパイルし、 開かれているファイルハンドルに書き込みます。
bool bcompiler_write_footer ( resource $filehandle )\nコンパイルされたデータの終了を示す文字 \\x00 を書き込みます。
bool bcompiler_write_function ( resource $filehandle , string $functionName )\nこの関数は、PHP から既存の関数をバイトコードとして読み込み、 開かれているファイルハンドルに書き込みます。書き込む順序を気にする 必要はありません (例えば、関数 b が関数 a を使用している場合に 下の例のようにコンパイルしたとしても正常に動作します)。
bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName )\n指定したファイル内で定義されているすべての関数を検索し、 対応するバイトコードを、 開かれているファイルハンドルに書き込みます。
bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )\nbcompiler ファイルのヘッダを書き込みます。
bool bcompiler_write_included_filename ( resource $filehandle , string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string bcpow ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand の right_operand 乗を求めます。
string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )\nmodulus で割った余りを求めることを考慮して、 left_operand の right_operand 乗を高速に計算します。
bool bcscale ( int $scale )\nデフォルトのスケールを設定します。これ以降、 BC 演算関数で明示的にスケールを指定しなかった場合にこの値を使用します。
string bcsqrt ( string $operand [, int $scale ] )\noperand の平方根を返します。
string bcsub ( string $left_operand , string $right_operand [, int $scale ] )\nleft_operand から right_operand を引きます。
string bin2hex ( string $str )\nstr を16進表現に変換したASCII文字列を返します。 変換は、上位ニブルからバイト毎に行われます。
string bind_textdomain_codeset ( string $domain , string $codeset )\nbind_textdomain_codeset() を使用することで、 gettext() やその類似の関数において返される、 domain からのメッセージの文字エンコーディングを 設定することが可能です。
number bindec ( string $binary_string )\n引数 binary_string により指定された 2 進数と等価な 10 進数を返します。\nbindec() は、2 進数を integer に変換します。 サイズの問題により、必要に応じて float となることもあります。\nbindec() は、すべての binary_string 値を符号なし整数として扱います。 これは、bindec() が最上位ビットを 符号ビットとしてではなく規模をはかるためのに使用するからです。
string bindtextdomain ( string $domain , string $directory )\nbindtextdomain() 関数は、ドメインへのパスを設定します。
int bzclose ( resource $bz )\n与えられた bzip2 ファイルポインタを閉じます。
mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )\nbzcompress() は、与えられた文字列を圧縮し、 bzip2 形式のデータとして返します。
mixed bzdecompress ( string $source [, int $small = 0 ] )\nbzdecompress() は、bzip2 形式のデータを含む文字列を解凍します。
int bzerrno ( resource $bz )\n与えられたファイルポインタから返された bzip2 エラーのエラー番号を返します。
array bzerror ( resource $bz )\n与えられたファイルポインタから返された bzip2 エラーのエラー番号とエラー文字列を返します。
string bzerrstr ( resource $bz )\n与えられたファイルポインタから返された bzip2 エラーのエラーの文字列を返します。
int bzflush ( resource $bz )\nバッファリングされた全ての bzip2 データをファイルポインタ bz に書き込みます。
resource bzopen ( string $filename , string $mode )\nbzopen() は、 bzip2 (.bz2) ファイルを読み書き用にオープンします。
string bzread ( resource $bz [, int $length = 1024 ] )\nbzread() は、与えられた bzip2 ファイルポインタから読み込みます。\n読み込みは、(圧縮前の状態で) length バイトが読み込まれたか、EOF に達したかのどちらか最初に来た方で終了します。
int bzwrite ( resource $bz , string $data [, int $length ] )\nbzwrite() は、文字列を与えられた bzip2 ファイルストリームに書き込みます。
int cal_days_in_month ( int $calendar , int $month , int $year )\nこの関数は、指定した calendar について year 年 month 月の日数を返します。
array cal_from_jd ( int $jd , int $calendar )\ncal_from_jd() は、 jd で指定したユリウス日を 指定した calendar に変換します。 サポートされる calendar の値は、 CAL_GREGORIAN、 CAL_JULIAN、 CAL_JEWISH および CAL_FRENCH です。
array cal_info ([ int $calendar = -1 ] )\ncal_info() は、指定した calendar についての情報を返します。\nカレンダーの情報は配列として返され、その要素は calname、calsymbol、 month、abbrevmonth および maxdaysinmonth となります。 calendar として指定可能なカレンダー名は以下のとおりです。    0 あるいは CAL_GREGORIAN - グレゴリウス暦     1 あるいは CAL_JULIAN - ユリウス暦     2 あるいは CAL_JEWISH - ユダヤ暦     3 あるいは CAL_FRENCH - フランス革命暦\ncalendar が指定されなかった場合は、 サポートするすべてのカレンダーの情報を配列で返します。
int cal_to_jd ( int $calendar , int $month , int $day , int $year )\ncal_to_jd() は、指定した calendar の日付からユリウス積算日を計算します。 サポートされる calendar は CAL_GREGORIAN、 CAL_JULIAN、 CAL_JEWISH および CAL_FRENCH です。
string calcul_hmac ( string $clent , string $siretcode , string $price , string $reference , string $validity , string $taxation , string $devise , string $language )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string calculhmac ( string $clent , string $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed call_user_func_array ( callback $function , array $param_arr )\nparam_arr にパラメータを指定して、 function で指定したユーザ定義関数をコールします。
mixed call_user_func ( callback $function [, mixed $parameter [, mixed $... ]] )\nパラメータ function で指定した ユーザ定義のコールバック関数をコールします。
mixed call_user_method_array ( string $method_name , object &$obj , array $params )\n警告\nPHP 4.1.0 以降、call_user_method() 関数は非推奨となっています。
mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )\n警告\nPHP 4.1.0 以降、call_user_method() 関数は非推奨となっています。
float ceil ( float $value )\nvalue の次に大きい整数値を返します。
bool chdir ( string $directory )\nPHP のカレントディレクトリを directory に変更します。
bool checkdate ( int $month , int $day , int $year )\n引数で指定された日付の妥当性をチェックします。 各パラメータが適切に指定されている場合に、妥当であると判断されます。
bool checkdnsrr ( string $host [, string $type ] )\nhost に対応する type 型のレコードを DNS から探します。
bool chgrp ( string $filename , mixed $group )\n(名前または番号で指定した)ファイル filename のグループを group に変更しようと試みます。\nスーパーユーザのみがファイルのグループを任意に変更できます。 その他のユーザは、ファイルのグループをそのユーザがメンバーとして 属しているグループに変更できます。
bool chmod ( string $filename , int $mode )\n指定されたファイルのモードを mode で指定したものに変更しようと試みます。
string rtrim ( string $str [, string $charlist ] )\nこの関数は文字列 str の最後から空白文字を取り除き、 取り除かれた文字列を返します。\n2 番目のパラメータを指定しない場合、 rtrim() は以下の文字を削除します。    &quot; &quot; (ASCII 32 (0x20)), 通常の空白。     &quot;\\t&quot; (ASCII 9 (0x09)), タブ。     &quot;\\n&quot; (ASCII 10 (0x0A)), 改行。     &quot;\\r&quot; (ASCII 13 (0x0D)), 復帰。     &quot;\\0&quot; (ASCII 0 (0x00)), NUL バイト。     &quot;\\x0B&quot; (ASCII 11 (0x0B)), 垂直タブ。
bool chown ( string $filename , mixed $user )\nファイルfilename の所有者を(名前または番号で指定した) ユーザuser に変更しようと試みます。 スーパーユーザのみがファイルの所有者を変更できます。
string chr ( int $ascii )\nascii で指定された、1文字からなる文字列を返します。\nこの関数はord()の逆の動作をします。
bool chroot ( string $directory )\nカレントのプロセスのルートディレクトリを directory に変更します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
string chunk_split ( string $body [, int $chunklen [, string $end ]] )\n文字列をより小さな部分に分割する際に使用され、 base64_encode() の出力を RFC 2045の規約に基づいた出力に変換するといった用途に適しています。 この関数は、chunklen 文字毎に文字列 end を挿入します。
boolean class_alias ([ string $original [, string $alias ]] )\nalias という名前のエイリアスを、 定義済みのクラス original に対して作成します。 エイリアスは、元のクラスとまったく同一のものとなります。
bool class_exists ( string $class_name [, bool $autoload = true ] )\nこの関数は指定したクラスが定義されているかどうかを調べます。
array class_implements ( mixed $class [, bool $autoload = true ] )\nこの関数は、与えられたクラス class とその親が実装しているインターフェースを配列で返します。
array class_parents ( mixed $class [, bool $autoload = true ] )\nこの関数は、与えられたクラス class の親クラス名を 配列で返します。
array classkit_import ( string $filename )
bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )
bool classkit_method_remove ( string $classname , string $methodname )
bool classkit_method_rename ( string $classname , string $methodname , string $newname )
void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )\nstat やlstat 、 またはその他の関数（後述）を使用すると、PHPはパフォーマンス向上のために それらの関数の戻り値をキャッシュします。しかし、ケースによっては、 キャッシュされた情報を消去したい場合もあるでしょう。 例えば、一つのスクリプト上で同じファイルが何度もチェックされ、 そのファイルが変更されたり削除されたりする可能性がある場合、 ステータスキャッシュを消去しなければならないと感じるでしょう。 このようなケースでは、clearstatcache()を使用することで ファイルの情報に関してPHPが持っているキャッシュをクリアすることができます。\nPHP は存在しないファイルについての情報はキャッシュしないことにも 注意してください。もし存在しないファイルに対して file_exists() をコールする場合、ファイルを作成するまで この関数は FALSE を返します。もしファイルを作成した場合、 たとえファイルを削除したとしても TRUE を返します。 しかし、unlink() はキャッシュを自動的にクリアします。
void closedir ([ resource $dir_handle ] )\ndir_handle で指定したディレクトリのストリームをクローズします。このストリームは、 opendir()により事前にオープンされていなければ なりません。
bool closelog ( void )\ncloselog() はシステムログへの書きこみに使用されているデスクプリタを閉じます。 closelog() の使用はオプションです。
void com_addref ( void )\nコンポーネントの参照カウンタを増やします。
string com_create_guid ( void )\nグローバルユニーク ID (GUID) を生成します。\nGUID は DCE UUID と同様の方法で生成されますが、Microsoft の 規約により、GUID が中括弧で囲まれるという点が異なります。
bool com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] )\ncomobject が生成したイベントを PHP オブジェクト sinkobject に通知するよう、COM に指示します。\nこの機能を利用する際には注意しましょう。もし以下の例のようなことを 行いたいのであれば、Web サーバ上でそれを行うことには まったく意味がありません。
variant com_get_active_object ( string $progid [, int $code_page ] )\ncom_get_active_object() は、新しい COM オブジェクトのインスタンスを作成することに 似ています。しかし、オブジェクトがすでに実行中の場合には そのオブジェクトが返されるという点が違います。 OLE アプリケーションは、既知のアプリケーションを一度だけ起動させる ことを許可するために、Running Object Table というものを使用します。 この関数は、実行中のインスタンスのハンドルを取得するために COM ライブラリ関数 GetActiveObject() を公開します。
非推奨です。かわりにオブジェクト指向の構文を使用します。
mixed com_invoke ( resource $com_object , string $function_name [, mixed $function_parameters ] )\ncom_invoke() は、 com_object が指す COM コンポーネントの メソッド function_name をコールします。 com_invoke() はエラーの場合に FALSE を返し、 成功時に function_name の返り値を返します。 追加パラメータ function_parameters の値が メソッド function_name に渡されます。
bool com_isenum ( variant $com_module )\nCOM オブジェクトから Next() メソッドによって 値を列挙することが可能かどうかを調べます。 このメソッドの詳細については、COM クラスを参照ください。
bool com_load_typelib ( string $typelib_name [, bool $case_insensitive ] )\nタイプライブラリを読み込んで定数をエンジン内に登録し、それらが define() を使用して定義されているかのように 扱えるようにします。\nあまり融通の利く方法ではありませんが、 実行時設定 設定を利用して定数の 事前読み込みと登録をすませるほうがずっと効率的であることに 注意しましょう。\n実行時設定 を有効にすると、 PHP がインスタンス化した COM オブジェクトに関連付けられている定数を 自動的に登録しようと試みます。これは COM オブジェクト自身の提供する インターフェースに依存し、常に可能であるとは限りません。
非推奨です。かわりにオブジェクト指向の構文を使用しましょう。
bool com_message_pump ([ int $timeoutms ] )\nこの関数は、timeoutms ミリ秒が経過するか キューにメッセージが到着するまで待機します。\nこの関数の目的は、別々の場所にある COM のコールを振り分け、同期の 問題をうまく処理することです。これにより、発生するイベントを 効率的にスクリプトで待ち受けられるようになり、バックグラウンドで 動作している他のコードやイベントも処理できるようになります。 COM オブジェクトのイベントを使用している間は、 com_event_sink() 関数の例で示したように この関数をループ内で使用すべきです。
bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink ]] )\nこの関数の目的は、イベントシンクに使用するスケルトンクラスの作成を支援することです。 You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display.
非推奨です。かわりにオブジェクト指向の構文を使用します。
非推奨です。かわりにオブジェクト指向の構文を使用しましょう。
非推奨です。かわりにオブジェクト指向の構文を使用しましょう。
void com_release ( void )\nコンポーネントリファレンスカウンタを減らします。
非推奨です。かわりにオブジェクト指向の構文を使用しましょう。
array compact ( mixed $varname [, mixed $... ] )\n変数名とその値から配列を作成します。\n各引数について、compact() は現在のシンボルテーブルにおいてその名前を有する変数を探し、 変数名がキー、変数の値がそのキーに関する値となるように追加します。 端的に言うと、extract() の逆の動作をします。\n設定されていない全ての文字列は、単にスキップされます。
int connection_aborted ( void )\nクライアントとの接続が切断されているかどうかを調べます。
int connection_status ( void )\n接続ステータスのビットフィールドを取得します。
int connection_timeout ( void )\nスクリプトがタイムアウトしたかどうかを調べます。
mixed constant ( string $name )\nname で指定した定数の値を返します。\nconstant() はある定数の値を取得する必要があるが、 その名前が不明な場合に有用です。これは、定数名が変数に保存されているか、 関数により返されるかの場合です。\nこの関数は クラス定数に対しても動作します。
string convert_cyr_string ( string $str , string $from , string $to )\nキリル文字セットを、別の文字セットに変換します。
string convert_uudecode ( string $data )\nconvert_uudecode() は、uuencode された文字列をデコードします。
string convert_uuencode ( string $data )\nconvert_uuencode() は、uuencode アルゴリズムを使用して文字列をエンコードします。\nuuencode はすべての文字(バイナリを含む)を表示可能な文字に変換し、 ネットワーク上での転送を可能にします。uuencode されたデータは、 元のデータより約 35% 大きくなります。
bool copy ( string $source , string $dest [, resource $context ] )\nファイル source を dest にコピーします。\nファイルを移動したいならば、rename() 関数を使用してください。
float cos ( float $arg )\ncos() は、arg のコサインを 返します。arg はラジアンです。
float cosh ( float $arg )\narg のハイパボリックコサインを返します。 これは、(exp(arg) + exp(-arg))/2 で定義されます。
mixed count_chars ( string $string [, int $mode = 0 ] )\nstring において各バイト値 (0..255) が存在する数をかぞえ、様々な手法で返します。
int count ( mixed $var [, int $mode = COUNT_NORMAL ] )\n変数に含まれるすべての要素、 あるいはオブジェクトに含まれるプロパティの数を数えます。\nオブジェクトに対して、もし SPL がインストールされている場合、インターフェース Countable を実装することで count() にフックすることができます。このインターフェースには 1 つのメソッド count() があり、count() 関数に対する値を返します。\n配列の実装やPHPでの使用法に関する詳細な説明については、マニュアルの 配列のセクションを参照ください。
bool crack_check ( resource $dictionary , string $password )\nbool crack_check ( string $password )\n指定した辞書を用いて指定したパスワードの強度チェックを行います。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool crack_closedict ([ resource $dictionary ] )\ncrack_closedict()は、指定した dictionary IDを閉じます。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
string crack_getlastmessage ( void )\ncrack_getlastmessage() は、 直近の強度チェックからのメッセージを返します。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
resource crack_opendict ( string $dictionary )\ncrack_opendict() は、指定した CrackLib dictionary をオープンします。この辞書は、 crack_check()で使用されます。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
int crc32 ( string $str )\nstr の 32 ビット長の CRC (cyclic redundancy checksum) チェックサムを生成します。 これは通常、送信したデータの整合性を検証するために使用します。\nPHP の整数型は符号付きで、多くの crc32 チェックサムは負の整数になるため、 符号なしの crc32 チェックサムの文字列表記を取得するには sprintf() もしくは printf() の &quot;%u&quot; フォーマッタを使用する必要があります。
string create_function ( string $args , string $code )\n指定したパラメータにより匿名関数を作成し、その関数のユニークな名前を返します。
string crypt ( string $str [, string $salt ] )\ncrypt() は暗号化した文字列を返します。 Unix 標準の DES ベースの暗号化方式か、 あるいはそのシステム上で使用できるその他のアルゴリズムを使用します。\n複数の暗号化方式をサポートしているオペレーティングシステムもあります。 実際、標準の DES ベースの暗号化方式を MD5 ベースのものに置き換えることもあります。 暗号化方式は、salt 引数によって決まります。 PHP のインストール時に、そのシステムで使用できる暗号化関数を判別します。 salt を省略した場合は、デフォルトで 2 文字の salt を自動生成します。 ただし、そのシステムのデフォルトの暗号化方式が MD5 の場合は、MD5 互換のランダムな salt を生成します。 PHP の定数 CRYPT_SALT_LENGTH を確認すると、そのシステムで使用できる salt が通常の 2 文字のものなのか 12 文字のものが使用できるのかがわかります。\n標準の DES ベースの暗号化の場合、crypt() は出力の最初の 2 文字を salt として使用します。また、 str の最初の 8 文字しか使用しません。 つまり、最初の 8 文字が同じである長い文字列は、 同じ salt を使う限り同じ結果となります。\ncrypt() が複数の暗号化方式をサポートしているシステムでは、 その方式が使用可能かどうかによって次の定数群が 0 か 1 に設定されます。     CRYPT_STD_DES - 標準の DES ベースの暗号化方式で、2 文字の salt を使用するもの     CRYPT_EXT_DES - 拡張した DES ベースの暗号化方式で、9 文字の salt を使用するもの     CRYPT_MD5 - $1$ ではじまる 12 文字の salt を使用する MD5 暗号化方式     CRYPT_BLOWFISH - $2$ あるいは $2a$ ではじまる 16 文字の salt を使用する Blowfish 暗号化方式
bool ctype_alnum ( string $text )\n与えられた文字列 text のすべての文字が英字または 数字であるかどうかを調べます。標準の C ロケールの場合、 文字は [A-Za-z] となります。
bool ctype_alpha ( string $text )\n与えられた文字列 text のすべての文字が 英字であるかどうかを調べます。 標準の C ロケールの場合、文字は [A-Za-z] で、ctype_alpha() は $text が一文字のみの場合の (ctype_upper($text) || ctype_lower($text)) と等価です。 しかし、他の言語には大文字でも小文字でもない文字が含まれています。
bool ctype_cntrl ( string $text )\n与えられた文字列 text のすべての文字が制御文字であるかどうかを調べます。 制御文字とは、例えばラインフィードやタブ、エスケープなどです。
bool ctype_digit ( string $text )\n与えられた文字列 text のすべての文字が 数字であるかどうかを調べます。
bool ctype_graph ( string $text )\n与えられた文字列 text のすべての文字が 実際に目に見える出力を行うかどうかを調べます。
bool ctype_lower ( string $text )\ntext のすべての文字が小文字だった場合に TRUE 、そうでない場合に FALSE を返します。
bool ctype_print ( string $text )\n与えられた文字列 text のすべての文字が 印字可能な文字であるかどうかを調べます。
bool ctype_punct ( string $text )\n与えられた文字列 text のすべての文字が 句読点であるかどうかを調べます。
bool ctype_space ( string $text )\n与えられた文字列 text のすべての文字が 空白文字であるかどうかを調べます。
bool ctype_upper ( string $text )\n与えられた文字列 text のすべての文字が 大文字であるかどうかを調べます。
bool ctype_xdigit ( string $text )\n与えられた文字列 text のすべての文字が 16 進の &#039;数字&#039; であるかどうかを調べます。
void curl_close ( resource $ch )\ncURL セッションを閉じ、全てのリソースを開放します。 cURL ハンドル ch も削除されます。
resource curl_copy_handle ( resource $ch )\ncURL ハンドルをコピーし、同じ設定を保持します。
int curl_errno ( resource $ch )\n直近の cURL 処理に関するエラー番号を返します。
string curl_error ( resource $ch )\n直近の cURL 操作に関するエラーメッセージをクリアテキストで返します。
mixed curl_exec ( resource $ch )\n指定した cURL セッションを実行します。\nこの関数は、cURL セッションを初期化し、 オプションを全て設定した後にコールする必要があります。
mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )\n直近の転送に関する情報を取得します。
resource curl_init ([ string $url = NULL ] )\n新規セッションを初期化し、cURL ハンドルを返します。このハンドルは、関数 curl_setopt(), curl_exec(), curl_close() で使用します。
int curl_multi_add_handle ( resource $mh , resource $ch )\nch ハンドルを、マルチハンドル mh に追加します。
void curl_multi_close ( resource $mh )\ncURL ハンドルのセットを閉じます。
int curl_multi_exec ( resource $mh , int &$still_running )\nスタック内の各ハンドルを処理します。 このメソッドは、ハンドルがデータの読み書きを要するかどうかにかかわらずコール可能です。
string curl_multi_getcontent ( resource $ch )\nCURLOPT_RETURNTRANSFER に何らかのハンドルが設定されている場合に、 この関数はその cURL ハンドルの内容を文字列形式で返します。
array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )\nマルチハンドルに対して、個別の転送にメッセージ/情報が残っているかどうかを問い合わせます。 メッセージには、転送時のエラーコードや転送が完了したという情報が残っている可能性があります。\nこの関数を繰り返しコールすると、毎回新しい結果を返します。FALSE が返されると、その時点でもう取得する結果がないことを意味します。 msgs_in_queue がさす値は、 この関数をコールした後に残っているメッセージの数となります。\n警告\n返されたリソースがさすデータは、 curl_multi_remove_handle() をコールした後には残りません。
resource curl_multi_init ( void )\n複数の cURL ハンドルを並列で実行できるようにします。
int curl_multi_remove_handle ( resource $mh , resource $ch )\n指定した ch ハンドルを、mh ハンドルから削除します。 ch ハンドルが削除されてからも、このハンドルで curl_exec() を実行できます。 使用中のハンドルを削除する際には、進行中の転送をきちんと停止します。
int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )\ncurl_multi 接続に関するアクティビティがあるまでブロックします。
bool curl_setopt_array ( resource $ch , array $options )\ncURL セッション用の複数のオプションを設定します。 この関数が便利なのは大量の cURL オプションを設定する場合で、 何度も繰り返して curl_setopt() をコールせずにすみます。
bool curl_setopt ( resource $ch , int $option , mixed $value )\n指定した cURL セッションハンドルのオプションを設定します。
array curl_version ([ int $age = CURLVERSION_NOW ] )\ncURL のバージョンについての情報を返します。
mixed current ( array &$array )\n各配列は、&quot;カレント&quot;の要素へのポインタを有しています。 このポインタは、その配列の最初の要素を指すように初期化されます。
void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool cyrus_bind ( resource $connection , array $callbacks )\nCyrus IMAP 接続へのコールバックをバインドします。
bool cyrus_close ( resource $connection )\nCyrus IMAP サーバへの接続を閉じます。
resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )\nCyrus IMAP サーバに接続します。
array cyrus_query ( resource $connection , string $query )\nCyrus IMAP サーバへクエリを送信します。
bool cyrus_unbind ( resource $connection , string $trigger_name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
この関数は次の関数のエイリアスです。 DateTime::add
この関数は次の関数のエイリアスです。 DateTime::createFromFormat
DateTime date_create ([ string $time = &quot;now&quot; [, DateTimeZone $timezone = NULL ]] )
この関数は次の関数のエイリアスです。 DateTime::setDate
string date_default_timezone_get ( void )\nこの関数は、デフォルトのタイムゾーンを以下の優先順位で取得して返します。\ndate_default_timezone_set() 関数を使用して 設定したタイムゾーン (もし何か設定されていれば) を読み込む\nTZ 環境変数 (もし空白でなければ) を読み込む\ndate.timezone ini オプション (設定されていれば) を読み込む\nホスト OS に問い合わせる (もし OS がそれに対応しており、許可されていれば)\n上のすべてが失敗した場合は、 date_default_timezone_get はデフォルトのタイムゾーンである UTC を返します。
bool date_default_timezone_set ( string $timezone_identifier )\ndate_default_timezone_set() は、日付/時刻関数で 使用されるデフォルトタイムゾーンを設定します。
この関数は次の関数のエイリアスです。 DateTime::diff
この関数は次の関数のエイリアスです。 DateTime::format
この関数は次の関数のエイリアスです。 DateTime::getLastErrors
この関数は次の関数のエイリアスです。 DateInterval::createFromDateString
この関数は次の関数のエイリアスです。 DateInterval::format
この関数は次の関数のエイリアスです。 DateTime::setISODate
この関数は次の関数のエイリアスです。 DateTime::modify
この関数は次の関数のエイリアスです。 DateTime::getOffset
array date_parse_from_format ( string $format , string $date )\n指定した日付についての詳細情報を連想配列で返します。
array date_parse ( string $date )
この関数は次の関数のエイリアスです。 DateTime::sub
array date_sun_info ( int $time , float $latitude , float $longitude )
mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;) [, float $gmt_offset = 0 ]]]]] )\ndate_sunrise() は、与えられた日付 (timestamp で指定する) と場所についての日の出の時刻を返します。
mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;) [, float $gmt_offset = 0 ]]]]] )\ndate_sunset() は、与えられた日付 (timestamp で指定する) と場所についての日の入り時刻を返します。
この関数は次の関数のエイリアスです。 DateTime::setTime
この関数は次の関数のエイリアスです。 DateTime::getTimestamp
この関数は次の関数のエイリアスです。 DateTime::setTimestamp
この関数は次の関数のエイリアスです。 DateTime::getTimezone
この関数は次の関数のエイリアスです。 DateTime::setTimezone
string date ( string $format [, int $timestamp ] )\n指定された引数 timestamp を、与えられた フォーマット文字列によりフォーマットし、日付文字列を返します。 タイムスタンプが与えられない場合は、現在の時刻が使われます。 つまり timestamp はオプションであり そのデフォルト値は time() の値です。
mixed db2_autocommit ( resource $connection [, bool $value ] )\n指定した接続リソースについての AUTOCOMMIT の状態を設定あるいは取得します。
bool db2_bind_param ( resource $stmt , int $parameter-number , string $variable-name [, int $parameter-type [, int $data-type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] )\ndb2_prepare() が返したステートメントリソース内の SQL 文のパラメータに PHP 変数をバインドします。 db2_execute() へのオプション配列の一部として 変数を渡すのに比べ、この関数を使用すると パラメータの型、データの型、精度、位取りなどの詳細を制御できるようになります。
object db2_client_info ( resource $connection )\nこの関数は、DB2 データベースクライアントについての情報を 読み取り専用のプロパティに保持するオブジェクトを返します。 以下の表は、DB2 クライアントプロパティの一覧です。  DB2 クライアントプロパティ   プロパティ名 返り値の型 説明     APPL_CODEPAGE int アプリケーションのコードページ。   CONN_CODEPAGE int 現在の接続のコードページ。   DATA_SOURCE_NAME string  現在のデータベース接続に使用されているデータソース名 (DSN)。    DRIVER_NAME string  DB2 コールレベルインターフェイス (CLI) の仕様を実装した ライブラリの名前。    DRIVER_ODBC_VER string  DB2 クライアントがサポートしている ODBC のバージョン。 &quot;MM.mm&quot; という形式の文字列で、MM がメジャーバージョン、mm がマイナーバージョンを表します。DB2 クライアントは、 常に &quot;03.51&quot; を返します。    DRIVER_VER string  クライアントのバージョン。&quot;MM.mm.uuuu&quot; という形式の文字列で、 MM がメジャーバージョン、 mm がマイナーバージョン、 そして uuuu がアップデートを表します。 例えば &quot;08.02.0001&quot; は メジャーバージョン 8、マイナーバージョン 2、アップデート 1 を表します。    ODBC_SQL_CONFORMANCE string クライアントがサポートする ODBC SQL 構文レベル。   MINIMUM\n最小限の ODBC SQL 構文をサポートします。    CORE\nコア ODBC SQL をサポートします。    EXTENDED\n拡張 ODBC SQL 構文をサポートします。       ODBC_VER string  ODBC ドライバマネージャがサポートする ODBC のバージョン。 &quot;MM.mm.rrrr&quot; という形式の文字列で、 MM がメジャーバージョン、 mm がマイナーバージョン、 そして rrrr がリリースを表します。 DB2 クライアントは、常に &quot;03.01.0000&quot; を返します。
bool db2_close ( resource $connection )\nこの関数は、db2_connect() で作成した DB2 クライアント接続を閉じ、データベースサーバへのリソースを返します。\ndb2_pconnect() で作成した持続的 DB2 クライアント接続を閉じようとするとその要求は無視され、 次にコールされるときまで持続的 DB2 クライアント接続はそのまま残ります。
resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )\nテーブルのカラムおよび関連する権限情報を含む結果セットを返します。
resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )\nテーブルのカラムおよび関連するメタデータを含む結果セットを返します。
bool db2_commit ( resource $connection )\n指定した接続リソース上で実行中のトランザクションをコミットし、 新しいトランザクションを開始します。PHP アプリケーションのデフォルトは AUTOCOMMIT モードなので、接続リソースに対して AUTOCOMMIT を無効にしていない限り db2_commit() は必要ありません。
string db2_conn_error ([ resource $connection ] )\ndb2_conn_error() は、データベースへの直近の接続が 失敗した原因を表す SQLSTATE を返します。接続が失敗した場合には、 db2_connect() は FALSE を返します。 この場合、SQLSTATE の値を取得するために db2_conn_error() に何もパラメータを渡す必要はありません。\nしかし、接続は成功したもののその後に無効になった場合は、 パラメータ connection を指定することで 特定の接続についての SQLSTATE を取得することができます。\nSQLSTATE の値の意味を調べるには、DB2 コマンドラインプロセッサのプロンプトで 次のコマンドを発行します。 db2 &#039;? sqlstate-value &#039; また、db2_conn_errormsg() をコールして、 明示的なエラーメッセージと、それに関連する SQLCODE の値を取得することも可能です。
string db2_conn_errormsg ([ resource $connection ] )\ndb2_conn_errormsg() は、データベースへの直近の接続が 失敗した原因を表す SQLCODE およびエラーメッセージを返します。 接続が失敗した場合には、db2_connect() は FALSE を返します。 この場合、エラーメッセージおよび SQLSTATE の値を取得するために db2_conn_errormsg() に何もパラメータを渡す必要はありません。\nしかし、接続は成功したもののその後に無効になった場合は、 パラメータ connection を指定することで 特定の接続についてのエラーメッセージおよび SQLSTATE を取得することができます。
resource db2_connect ( string $database , string $username , string $password [, array $options ] )\nIBM DB2 Universal Database、IBM Cloudscape あるいは Apache Derby データベースへの新しい接続を作成します。
int db2_cursor_type ( resource $stmt )\nステートメントリソースが使用しているカーソルの型を返します。 使用中のカーソルが前進のみなのかスクロール可能なのかを調べるために、 これを使用します。
string db2_escape_string ( string $string_literal )\n引数で指定した文字列中の特殊文字の前にバックスラッシュを追加します。
resource db2_exec ( resource $connection , string $statement [, array $options ] )\nSQL 文を直接実行します。\nPHP 変数の内容を SQL 文に組み込みたい場合は、この関数を使用すると 典型的なセキュリティ上の問題を引き起こしかねないことを知っておきましょう。 db2_prepare() をコールして入力パラメータつきの SQL 文を準備することを検討してください。その後で db2_execute() をコールして入力値を渡すことで、 SQL インジェクション攻撃を避けることができます。\n同じ SQL 文にさまざまなパラメータを指定して何度も発行する場合は、 db2_prepare() および db2_execute() の使用を検討してください。 これにより、データベースサーバが実行計画を再利用することができて データベースアクセスの効率が向上します。
bool db2_execute ( resource $stmt [, array $parameters ] )\ndb2_execute() は、 db2_prepare() で準備された SQL 文を実行します。\nSQL 文が結果セットを返す場合、例えば SELECT 文であったり 結果セットを返すストアドプロシージャの CALL であったりした場合には、 stmt から結果の行を配列として取得することができます。 取得には db2_fetch_assoc()、 db2_fetch_both() あるいは db2_fetch_array() を使用します。 あるいは、db2_fetch_row() を使用して 結果セットポインタを次の行に移動させ、 db2_result() で行の内容をその都度取得することも可能です。\ndb2_exec() の代わりに db2_prepare() および db2_execute() を使用することの利点については、 db2_prepare() での簡単な説明を参照ください。
array db2_fetch_array ( resource $stmt [, int $row_number = -1 ] )\n結果セット内の行を表す、カラム位置をインデックスとする配列を返します。 インデックスは 0 から始まります。
array db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] )\n結果セット内の行を表す、カラム名をインデックスとする配列を返します。
array db2_fetch_both ( resource $stmt [, int $row_number = -1 ] )\n結果セット内の行を表す、 カラム位置およびカラム名の両方をインデックスとする配列を返します。 db2_fetch_both() が返す行は、 一種類のインデックスしか返さない db2_fetch_assoc() あるいは db2_fetch_array() よりもメモリを消費することに注意しましょう。
object db2_fetch_object ( resource $stmt [, int $row_number = -1 ] )\n結果セット内の行を表す、カラムをプロパティとするオブジェクトを返します。
bool db2_fetch_row ( resource $stmt [, int $row_number ] )\ndb2_fetch_row() を使用して結果セットを順に処理します。 あるいは、スクロール可能なカーソルを使用している場合は 指定した行を指すようにします。\n結果セットから個々のフィールドを取得するには db2_result() 関数をコールします。\ndb2_fetch_row() および db2_result() をコールするのではなく、 ほとんどのアプリケーションでは db2_fetch_assoc()、db2_fetch_both()、 および db2_fetch_array() のいずれかをコールするでしょう。 これらは、結果セットのポインタを前に進めたうえで行の内容を配列として取得します。
int db2_field_display_size ( resource $stmt , mixed $column )\n結果セット内のカラムを表示するために必要な最大のバイト数を返す
string db2_field_name ( resource $stmt , mixed $column )\n結果セット内の指定したカラムの名前を返します。
int db2_field_num ( resource $stmt , mixed $column )\n結果セット内の指定したカラムの位置を返します。
int db2_field_precision ( resource $stmt , mixed $column )\n結果セット内の指定したカラムの精度を返します。
int db2_field_scale ( resource $stmt , mixed $column )\n結果セット内の指定したカラムの位取りを返します。
string db2_field_type ( resource $stmt , mixed $column )\n結果セット内の指定したカラムのデータ型を返します。
int db2_field_width ( resource $stmt , mixed $column )\n結果セット内の指定したカラムの現在値の幅を返します。 固定長のデータ型では、この値はカラムの最大幅になります。 可変長のデータ型では、実際のカラムの幅となります。
resource db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name )\nテーブルの外部キーを含む結果セットを返します。
bool db2_free_result ( resource $stmt )\n結果セットに関連付けられたシステムリソースおよびデータベースリソースを 開放します。これらのリソースはスクリプトの終了時に暗黙的に開放されますが、 スクリプトの終了前に db2_free_result() をコールすることで、明示的に結果セットリソースを開放することができます。
bool db2_free_stmt ( resource $stmt )\nステートメントリソースに関連付けられたシステムリソースおよびデータベースリソースを 開放します。これらのリソースはスクリプトの終了時に暗黙的に開放されますが、 スクリプトの終了前に db2_stmt_result() をコールすることで、明示的にステートメントリソースを開放することができます。
string db2_get_option ( resource $resource , string $option )\nステートメントリソースあるいは接続リソースから、指定したオプションの値を取得します。
int db2_last_insert_id ( resource $resource )\nこの接続上で最後に成功した insert クエリが自動生成した ID を返します。\nこの関数の結果は、以下のいずれにも影響を受けません。\nVALUE 句を使用した単一行の INSERT 文で、ID カラムを指定していないもの\nVALUE 句を使用した複数行の INSERT 文\n全選択からの INSERT 文\nROLLBACK TO SAVEPOINT 文
string db2_lob_read ( resource $stmt , int $colnum , int $length )\ndb2_lob_read() により、 結果セットの指定したカラムから、指定したサイズの LOB データを取得します。
resource db2_next_result ( resource $stmt )\nストアドプロシージャは、複数の結果セットを返すことができます。 単純な SELECT 文が返す結果を処理するのと同じように最初の結果セットを 扱った後でそれ以降の結果セットを処理する際には、 db2_next_result() 関数をコールして その返り値を PHP 変数に代入しなければなりません。
int db2_num_fields ( resource $stmt )\n結果セットに含まれるフィールドの数を返します。動的に生成されたクエリが返す 結果セットを処理する場合、あるいはストアドプロシージャから返された結果セットを 処理する場合など、結果セットの使用法がアプリケーションにわからない場合に有用です。
int db2_num_rows ( resource $stmt )\nSQL 文によって削除、挿入あるいは更新された行の数を返します。\nSELECT 文が返す行の数を取得するには、調べたい SELECT 文と同じ述部を持つ SELECT COUNT(*) を発行し、その値を取得します。\nSELECT 文が返す行の数を調べて 0 の場合には別の処理を行うようなロジックを アプリケーションで使用している場合、その代わりに db2_fetch_assoc()、db2_fetch_both()、 db2_fetch_array() あるいは db2_fetch_row() を使用して最初の行を取得し、 結果が FALSE の場合には別の処理を行うという方法を検討してください。
bool db2_pclose ( resource $resource )\nこの関数は、 db2_pconnect() で作成した DB2 クライアント接続を閉じ、 対応するリソースをデータベースサーバに返します。
resource db2_pconnect ( string $database , string $username , string $password [, array $options ] )\nIBM DB2 Universal Database、IBM Cloudscape あるいは Apache Derby データベースへの持続的接続を返します。 持続的接続についての詳細な情報は、 持続的データベース接続 を参照ください。\n持続的接続に対して db2_close() をコールすると、 常に TRUE を返します。しかし DB2 クライアント接続はオープンされたままであり、 条件に一致する次の db2_pconnect() リクエストを待ち続けます。
resource db2_prepare ( resource $connection , string $statement [, array $options ] )\ndb2_prepare() は、プリペアドステートメントを作成します。 このプリペアドステートメントには、入力パラメータ・出力パラメータ あるいは入出力パラメータを表すパラメータマーカ (?) を含めることができます。プリペアドステートメントにパラメータを渡すには db2_bind_param() を使用します。 入力パラメータの場合についてのみ、db2_execute() に渡す配列で指定することも可能です。\nアプリケーション内でプリペアドステートメントを使用する利点は、 以下の 3 つです。 application:\nパフォーマンス: 事前に文を準備しておくと、 その文によってデータを取得するための実行計画をデータベースサーバが 最適化します。その後 db2_execute() でプリペアドステートメントを実行する際にはこの実行計画が再利用され、 実行時に実行計画を毎回作成することによるオーバーヘッドを避けられます。\nセキュリティ: 事前に文を準備する際に、 入力値にパラメータマーカを含めることができます。 入力値にプレースホルダを使用してプリペアドステートメントを実行すると、 入力値の型がカラム定義あるいはパラメータ定義と一致することを データベースサーバがチェックします。\n高機能: パラメータマーカの機能は、 単に入力値をプリペアドステートメントに渡すだけではありません。 db2_bind_param() を使用すると、 ストアドプロシージャの OUT パラメータおよび INOUT パラメータから 値を取得することも可能です。
resource db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name )\nテーブルの主キーを含む結果セットを返します。
resource db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter )\nストアドプロシージャのパラメータを含む結果セットを返します。
resource db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure )\nデータベース内に登録されているストアドプロシージャの一覧を含む結果セットを返します。
mixed db2_result ( resource $stmt , mixed $column )\ndb2_result() を使用して、 結果セットの現在の行から指定したカラムの値を取得します。 結果セットポインタの位置を指定するため、db2_result() のコール前には db2_fetch_row() をコールする必要があります。
bool db2_rollback ( resource $connection )\n指定した接続リソース上で実行中のトランザクションをロールバックし、 新しいトランザクションを開始します。PHP アプリケーションのデフォルトは AUTOCOMMIT モードなので、接続リソースに対して AUTOCOMMIT を無効にしていない限り db2_rollback() は何の意味もありません。
object db2_server_info ( resource $connection )\nこの関数は、IBM DB2、Cloudscape あるいは Apache Derby データベースサーバについての情報を 読み取り専用のプロパティに保持するオブジェクトを返します。 以下の表は、データベースサーバのプロパティの一覧です。  データベースサーバのプロパティ   プロパティ名 返り値の型 説明     DBMS_NAME string  接続中のデータベースサーバの名前。DB2 サーバの場合は、 DB2 の後にサーバが稼動している OS の名前が続きます。    DBMS_VER string  データベースサーバのバージョン。&quot;MM.mm.uuuu&quot; という形式の文字列で、 MM がメジャーバージョン、 mm がマイナーバージョン、 そして uuuu がアップデートを表します。 例えば &quot;08.02.0001&quot; は メジャーバージョン 8、マイナーバージョン 2、アップデート 1 を表します。    DB_CODEPAGE int 接続中のデータベースのコードページ。   DB_NAME string 接続中のデータベースの名前。   DFT_ISOLATION string サーバがサポートしているデフォルトのトランザクション分離レベル。   UR\nUncommitted read: 変更内容は、他のトランザクションからも すぐに見えるようになります。    CS\nCursor stability: あるトランザクションで読み込まれた行を、 別のトランザクションから変更してコミットすることができます。    RS\nRead stability: 検索条件あるいは実行中のトランザクションに 一致する行を、トランザクションから追加したり削除したりできます。    RR\nRepeatable read: 実行中のトランザクションに影響を受けるデータは、 他のトランザクションからは見えません。    NC\nNo commit: 変更内容は、操作が終了した時点で見えるようになります。 明示的なコミットやロールバックはできません。       IDENTIFIER_QUOTE_CHAR string 識別子を区切るための文字。   INST_NAME string データベースを含むデータベースサーバのインスタンス名。   ISOLATION_OPTION array  データベースサーバがサポートする分離オプション。 分離オプションについては DFT_ISOLATION プロパティの説明を参照ください。    KEYWORDS array データベースサーバの予約語の配列。   LIKE_ESCAPE_CLAUSE bool  データベースサーバがワイルドカード文字 % および _ の使用をサポートしている場合に TRUE、 これらのワイルドカードをサポートしていない場合に FALSE。    MAX_COL_NAME_LEN int データベースサーバがサポートするカラム名の最大バイト数。   MAX_IDENTIFIER_LEN int データベースサーバがサポートする SQL 識別子の最大文字数。   MAX_INDEX_SIZE int  データベースサーバがサポートするインデックスつきカラムの最大バイト数。    MAX_PROC_NAME_LEN int  データベースサーバがサポートするプロシージャ名の最大バイト数。    MAX_ROW_SIZE int  データベースサーバがサポートするベーステーブルの行の最大バイト数。    MAX_SCHEMA_NAME_LEN int  データベースサーバがサポートするスキーマ名の最大バイト数。    MAX_STATEMENT_LEN int  データベースサーバがサポートする SQL 文の最大バイト数。    MAX_TABLE_NAME_LEN int  データベースサーバがサポートするテーブル名の最大バイト数。    NON_NULLABLE_COLUMNS bool  データベースサーバがカラムの NOT NULL 定義をサポートしている場合に TRUE、サポートしていない場合に FALSE。    PROCEDURES bool  データベースサーバがストアドプロシージャをコールするための CALL 文をサポートしている場合に TRUE、サポートしていない場合に FALSE。    SPECIAL_CHARS string  識別子として使用可能な文字のうち、 a-Z、0-9 およびアンダースコア以外の文字。    SQL_CONFORMANCE string  データベースサーバの ANSI/ISO SQL-92 仕様への対応レベル。   ENTRY\nSQL-92 エントリレベルに準拠しています。    FIPS127\nFIPS-127-2 transitional に準拠しています。    FULL\nSQL-92 完全レベルに準拠しています。    INTERMEDIATE\nSQL-92 中間レベルに準拠しています。
bool db2_set_option ( resource $resource , array $options , int $type )\nステートメントリソースあるいは接続リソースのオプションを設定します。 結果セットリソースのオプションを設定することはできません。
resource db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope )\nテーブルのユニーク行 ID カラムを含む結果セットを返します。
resource db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique )\nインデックスの情報およびテーブルの統計情報を含む結果セットを返します。
string db2_stmt_error ([ resource $stmt ] )\nSQL 文が返す SQLSTATE を含む文字列を返します。\ndb2_stmt_error() の引数にステートメントリソースを 渡さなかった場合は、直近で (例えば db2_prepare() あるいは db2_exec() を使用して) 返そうとしたステートメントリソースに関連する SQLSTATE を返します。\nSQLSTATE の値の意味を調べるには、DB2 コマンドラインプロセッサのプロンプトで 次のコマンドを発行します。 db2 &#039;? sqlstate-value &#039; また、db2_stmt_errormsg() をコールして、 明示的なエラーメッセージと、それに関連する SQLCODE の値を取得することも可能です。
string db2_stmt_errormsg ([ resource $stmt ] )\n直近の SQL 文のエラーメッセージを含む文字列を返します。\ndb2_stmt_errormsg() の引数にステートメントリソースを 渡さなかった場合は、直近で (例えば db2_prepare() あるいは db2_exec() を使用して) 返そうとしたステートメントリソースに関連するエラーメッセージを返します。
resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] )\nデータベース内のテーブルおよび関連する権限情報を含む結果セットを返します。
resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] )\nデータベース内のテーブルおよび関連するメタデータを含む結果セットを返します。
void dba_close ( resource $handle )\ndba_close() は確立されたデータベースを閉じ、 により指定したデータベースハンドルの全てのリソースを開放します。
bool dba_delete ( string $key , resource $handle )\ndba_delete() は、指定されたエントリを データベースから削除します。
bool dba_exists ( string $key , resource $handle )\ndba_exists() は、指定した key がデータベースに存在するかどうかを確認します。
string dba_fetch ( string $key , resource $handle )\nstring dba_fetch ( string $key , int $skip , resource $handle )\ndba_fetch() は、handle が指すデータベースから key が指すデータを 取得します。
string dba_firstkey ( resource $handle )\ndba_firstkey() はデータベースの最初のキーを返し、 内部キーポインタをリセットします。 この関数によりデータベース全体を連続的にサーチすることが可能になります。
array dba_handlers ([ bool $full_info = false ] )\ndba_handlers() は、この拡張モジュールにより サポートされる全てのハンドラの一覧を返します。
bool dba_insert ( string $key , string $value , resource $handle )\ndba_insert() は、 データベースに key および value で記述されるエントリを挿入します。
mixed dba_key_split ( mixed $key )\ndba_key_split() は、キー（文字列形式） を配列に分割します。
array dba_list ( void )\ndba_list() は、オープンされている全ての データベースファイルの一覧を返します。
string dba_nextkey ( resource $handle )\ndba_nextkey() は、 が指すデータベースの次のキーを返し、内部キーポインタを進めます。
resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )\ndba_open() は、handler を用いて mode を指定し、path にデータベースインスタンスを生成します。
bool dba_optimize ( resource $handle )\ndba_optimize() は、指定されたデータベースを最適化します。
resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )\ndba_popen() は、handler を用いて mode で path に持続的なデータベースインスタンスを確立します。
bool dba_replace ( string $key , string $value , resource $handle )\ndba_replace() は、handle で 指定したデータベースに key および value で記述されるエントリを 置換または挿入します。
bool dba_sync ( resource $handle )\ndba_sync() は データベースを同期します。サポートされる場合には、 おそらくディスクへの物理的アクセスへのきっかけとなることでしょう。
bool dbase_add_record ( int $dbase_identifier , array $record )\n与えられたデータをデータベースに追加します。
bool dbase_close ( int $dbase_identifier )\n指定されたデータベースリンク ID を閉じます。
int dbase_create ( string $filename , array $fields )\ndbase_create() は、指定された定義で dBase データベースを作成します。
bool dbase_delete_record ( int $dbase_identifier , int $record_number )\nデータベースから削除したいレコードをマークします。
array dbase_get_header_info ( int $dbase_identifier )\n指定したデータベースリンク ID のカラム構造についての情報を返します。
array dbase_get_record_with_names ( int $dbase_identifier , int $record_number )\ndBase データベースから、レコードを連想配列として取得します。
array dbase_get_record ( int $dbase_identifier , int $record_number )\nデータベースから、レコードを配列形式で取得します。
int dbase_numfields ( int $dbase_identifier )\n指定したデータベースにおけるフィールド（カラム）数を取得します。
int dbase_numrecords ( int $dbase_identifier )\n指定したデータベースのレコード（行）数を取得します。
int dbase_open ( string $filename , int $mode )\ndbase_open() は、指定したアクセスモードで dBase データベースをオープンします。
bool dbase_pack ( int $dbase_identifier )\ndbase_delete_record() を使用して削除マークがつけられた レコードを完全に削除することで、指定したデータベースを圧縮します。
bool dbase_replace_record ( int $dbase_identifier , array $record , int $record_number )\nデータベースの指定したレコードを、指定した値で置換します。
int dbplus_add ( resource $relation , array $tuple )\nタプルをリレーション relation に追加します。
resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] )\nAQL query を、指定した server および dbpath で実行します。
string dbplus_chdir ([ string $newdir ] )\ndbplus_open() でリレーションファイルを探す際の 仮想カレントディレクトリを変更します。
mixed dbplus_close ( resource $relation )\ndbplus_open() でオープンしたリレーションを閉じます。
int dbplus_curr ( resource $relation , array &$tuple )\n指定した relation について、カレントタプルに関するデータを読み込みます。
string dbplus_errcode ([ int $errno ] )\n指定したエラーコードに対応するエラー文字列を返します。
int dbplus_errno ( void )\n直近の db++ 操作からのエラーコードを返します。
int dbplus_find ( resource $relation , array $constraints , mixed $tuple )\n指定したリレーション relation に拘束を設定します。\nこの後、dbplus_curr() または dbplus_next() のような関数をコールすると、 指定した拘束にマッチするタプルのみが取得されます。
int dbplus_first ( resource $relation , array &$tuple )\n指定したリレーション relation の最初のタプルのデータを読み込み、 連想配列として tuple に返します。
int dbplus_flush ( resource $relation )\n直近のフラッシュ以降にリレーション relation に適用されたすべての変更をディスクに書き込みます。
int dbplus_freealllocks ( void )\nこのクライアントによりロックされたタプルを全て解放します。
int dbplus_freelock ( resource $relation , string $tuple )\ndbplus_getlock() より以前に得た指定 tuple の書き込みロックを解放します。
int dbplus_freerlocks ( resource $relation )\n指定した relation で保持されている全てのタプルロックを解放します。
int dbplus_getlock ( resource $relation , string $tuple )\n指定した tuple へ書き込みロックを要求します。
int dbplus_getunique ( resource $relation , int $uniqueid )\n指定した relation に関してユニークであることが保証 された数を取得し、uniqueid で指定した変数にその数を代入します。
int dbplus_info ( resource $relation , string $key , array &$result )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int dbplus_last ( resource $relation , array &$tuple )\n指定した relation から直近のタプルに関するデータを読み込み、 tuple に連想配列として代入します。
int dbplus_lockrel ( resource $relation )\n指定した relation に書き込みロックを要求します。\n他のクライアントからリレーションに対してクエリを実行することはできますが、 ロックされている間は更新できません。
int dbplus_next ( resource $relation , array &$tuple )\n指定した relation の次のタプルからデータを読み込み、 tuple に連想配列として返します。
resource dbplus_open ( string $name )\n指定したリレーションファイルをオープンします。
int dbplus_prev ( resource $relation , array &$tuple )\n指定した relation から前のタプルのデータを読み込み、 tuple に連想配列として返します。
int dbplus_rchperm ( resource $relation , int $mask , string $user , string $group )\nmask , user ,group で 指定した許可属性に変更します。これらの値はオペレーティングシステムに依存します。
resource dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] )\n新しいリレーションを作成します。同名の既存のリレーションは、 そのリレーションが現在使用されておらず、 overwrite に TRUE が設定されている場合にのみ上書きされます。
mixed dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] )\ndbplus_rcrtexact() は、 指定した relation の空のコピーを name という名前で作成します。
mixed dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] )\ndbplus_rcrtlike() は、 指定した relation の空のコピーを name という名前で作成しますが、デフォルトの インデックスを使用します。
array dbplus_resolve ( string $relation_name )\ndbplus_resolve() は指定された relation_name を解決し、内部サーバ ID・ 実際のホスト名およびホスト上のデータベースのパスを取得します。
int dbplus_restorepos ( resource $relation , array $tuple )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed dbplus_rkeys ( resource $relation , mixed $domlist )\ndbplus_rkeys() は、 relation に指定された現在の主キーを、 domlist で指定されたドメインに変更します。
resource dbplus_ropen ( string $name )\ndbplus_ropen() は、クライアント/サーバ間の オーバーヘッドを防いですばやくアクセスするために、リレーション file をローカルにオープンします。 アクセスは読み込み専用となり、返されるリレーションを利用できるのは dbplus_curr() および dbplus_next() のみとなります。
resource dbplus_rquery ( string $query [, string $dbpath ] )\ndbplus_rquery() は、db++ クライアントライブラリに組み込まれた AQL インタプリタを使用してローカル(raw) AQL クエリを実行します。 dbplus_rquery() は dbplus_aql() より高速ですが、 ローカルのデータについてのみしか実行できません。
int dbplus_rrename ( resource $relation , string $name )\ndbplus_rrename() は、 relation の名前を name に変更します。
mixed dbplus_rsecindex ( resource $relation , mixed $domlist , int $type )\ndbplus_rsecindex() は、 relation に新しいセカンダリインデックスを作成します。 このインデックスには domlist で指定したドメインが含まれ、型は type です。
int dbplus_runlink ( resource $relation )\ndbplus_runlink() は、 relation を閉じて削除します。
int dbplus_rzap ( resource $relation )\ndbplus_rzap() は、 relation からタプルをすべて削除します。
int dbplus_savepos ( resource $relation )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int dbplus_setindex ( resource $relation , string $idx_name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int dbplus_setindexbynumber ( resource $relation , int $idx_number )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string dbplus_tcl ( int $sid , string $script )\ndb++ サーバは、各クライアント接続について TCL インタプリタを準備します。 このインタプリタは、ある種のストアドプロシージャとしてクライアントに 指定された TCL コードをサーバで実行するもので、 クライアント/サーバ間のデータ伝送及びコンテキスト切替を回避し、 データベース処理性能を改善するために使用されます。\ndbplus_tcl() は、TCL script コードが実行される、クライアント接続 ID を必要とします。dbplus_resolve() が、この接続 ID を返します。この関数は、TCL コードの返り値または TCL コードが失敗 した場合には、TCL エラーメッセージを返します。
int dbplus_tremove ( resource $relation , array $tuple [, array &$current ] )\ndbplus_tremove() は、関係の中のタプルに完全に 一致する場合、tuple を削除します。 current が指定された場合、 dbplus_tremove() をコールした後、新規のカレントの タプルのデータが代入されます。
int dbplus_undo ( resource $relation )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int dbplus_undoprepare ( resource $relation )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int dbplus_unlockrel ( resource $relation )\n以前 dbplus_lockrel() により得られた書き込みロックを開放します。
int dbplus_unselect ( resource $relation )\ndbplus_unselect() をコールすると、 dbplus_find() により relation に設定された制約が削除されます。
int dbplus_update ( resource $relation , array $old , array $new )\ndbplus_update() は、old で指定したタプル new からのデータで置換します。 置換が行われるのは、old が relation の中のタプルに完全に一致する場合のみです。
int dbplus_xlockrel ( resource $relation )\nrelation に他のクライアントからの読み込み アクセスさえ拒否する排他的ロックを要求します。
int dbplus_xunlockrel ( resource $relation )\n以前に dbplus_xlockrel() で取得した排他的ロックを開放します。
int dbx_close ( object $link_identifier )
int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags ] )\ndbx_compare() は dbx_sort() のヘルパ関数で、 独自のソート関数を作成しやすくします。
object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] )\nデータベースへの接続をオープンします。
string dbx_error ( object $link_identifier )\ndbx_error() は、直近のエラーメッセージを返します。
string dbx_escape_string ( object $link_identifier , string $text )\n指定した文字列をエスケープし、SQL ステートメントで安全に使用できるようにします。
mixed dbx_fetch_row ( object $result_identifier )\ndbx_fetch_row() は、 DBX_RESULT_UNBUFFERED フラグを指定したクエリ結果から、行を取得します。\nクエリで DBX_RESULT_UNBUFFERED が指定されていない場合、 dbx_fetch_row() は失敗します。なぜなら、すでにすべての 行は取得されて data プロパティに格納されているからです。\n副作用として、dbx_fetch_row() のコールのたびに クエリ結果オブジェクトの rows プロパティの 値が加算されます。
mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] )\nクエリを送信し、すべての結果を取得します。
bool dbx_sort ( object $result , string $user_compare_function )\ndbx_query() のコール結果を、 独自のソート関数で並べ替えます。
string dcgettext ( string $domain , string $message , int $category )\nこの関数により単一の参照についてカレントのドメインを上書きすることができます。
string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )\nこの関数により単一の複数形メッセージの参照について カレントのドメインを上書きすることができます。
void deaggregate ( object $object [, string $class_name ] )\nオブジェクトに集約されたクラスのメソッドやプロパティを取り除きます。
array debug_backtrace ([ bool $provide_object = true ] )\ndebug_backtrace() は PHP バックトレースを生成します。
void debug_print_backtrace ( void )\ndebug_print_backtrace() は PHP バックトレースを 表示します。関数のコール、include / require されているファイル、 そして eval() された内容などが表示されます。
void debug_zval_dump ( mixed $variable )\n内部的な Zend の値を表す文字列をダンプします。
string decbin ( int $number )\n引数 number を 2 進数表現した文字列を返します。
string dechex ( int $number )\n引数 number を 16 進数表現した文字列を返します。 変換できる最大の数字は 4294967295 であり、16 進数で表すと &quot;ffffffff&quot; です。
string decoct ( int $number )\n引数 number を 8 進数表現した文字列を返します。 変換出来る最大の数字は 10 進数の 4294967295 であり、&quot;37777777777&quot; を返します。
void define_syslog_variables ( void )\nsyslog 関数で使用される全ての定数を初期化します。
bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n実行時に、名前を指定して定数を定義します。
bool defined ( string $name )\n指定した定数が存在し、定義されているかどうかを調べます。
float deg2rad ( float $number )\nこの関数は、number の単位を度からラジアンに変換します。
void delete ( void )\nこの関数はダミーの関数エントリであり、間違った場所で unlink() または unset() を要求する人の要求を満足させるためのものです。
string dgettext ( string $domain , string $message )\ndgettext() 関数により、単一のメッセージ参照について 現在のドメインを上書きすることができます。
この言語構造は、exit() と同等です。
void dio_close ( resource $fd )\n関数 dio_close() は、ファイル記述子 fd を閉じます。
mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )\n関数 dio_fcntl() は、ファイル記述子 fd において cmd で指定された処理を行います。いくつかのコマンドでは、オプションの引数 args の指定が必要となります。
resource dio_open ( string $filename , int $flags [, int $mode = 0 ] )\ndio_open() は、ファイルをオープンして そのファイル記述子を返します。
string dio_read ( resource $fd [, int $len = 1024 ] )\n関数 dio_read() は 記述子 fd で示されるファイルから len バイトを読み込み、それを返します。
int dio_seek ( resource $fd , int $pos [, int $whence = SEEK_SET ] )\n関数 dio_seek() は、指定されたファイル記述子の ファイル内の位置を変更する際に使用されます。
array dio_stat ( resource $fd )\ndio_stat() は、与えられたファイル記述子に関する 情報を返します。
bool dio_tcsetattr ( resource $fd , array $options )\ndio_tcsetattr() は、オープンした fd の端末属性とボーレートを指定します。
bool dio_truncate ( resource $fd , int $offset )\ndio_truncate() は、ファイルの大きさを 最大 offset バイトまでに丸めます。\nファイルがこのサイズより大きかった場合は、残りのデータは失われます。 ファイルがこのサイズより小さかった場合は、ファイルがそのままになるか 拡張されるかは未定義です。後者の場合、拡張された部分のデータはゼロと なります。
int dio_write ( resource $fd , string $data [, int $len = 0 ] )\ndio_write() は、data から最大 len バイトを ファイル fd に書き込みます。
string dirname ( string $path )\nこの関数は、ファイルへのパス名を有する文字列を引数とし、 ディレクトリの名前を返します。
float disk_free_space ( string $directory )\nディレクトリを指定することにより、 この関数は対応するファイルシステムまたはディスクパーティションで 利用可能なバイト数を返します。
float disk_total_space ( string $directory )\nディレクトリを含む文字列を指定してください。この関数は、 ファイルシステムまたはディスクパーティションに対応する全体バイト数を返します。
float disk_free_space ( string $directory )\nディレクトリを指定することにより、 この関数は対応するファイルシステムまたはディスクパーティションで 利用可能なバイト数を返します。
int dl ( string $library )\nlibrary で指定された PHP 拡張モジュールを読み込みます。\nその拡張モジュールが既に使用可能かどうかを調べまるには、 extension_loaded() を使用します。 これは、組み込みのモジュールと (php.ini か、あるいは dl() を使用して) 動的に読み込むモジュールの両方に対応しています。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )\ndngettext() 関数により、単一の複数形メッセージ参照について 現在のドメインを上書きすることができます。
bool checkdnsrr ( string $host [, string $type ] )\nhost に対応する type 型のレコードを DNS から探します。
bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )\nhostname に対応する MX レコードを DNS から探します。
array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl ]]] )\n指定した hostname に関連づけられた DNS リソースレコードを取得します。
DOMElement dom_import_simplexml ( SimpleXMLElement $node )\nこの関数は、SimpleXML クラスの ノード node を受け取り、それを DOMElement ノードに変換します。新しいオブジェクトは、 DOMElement ノードとして使用可能です。
DomAttribute\nstring name ( void )\n属性名を取得します。
DomAttribute\nbool set_value ( string $content )\nこの関数は属性の値を設定します。
DomAttribute\nbool specified ( void )\nこの関数は属性値を設定します。
DomAttribute\nstring value ( void )\nこの関数は属性の値を返します。
domelement DomDocument->add_root ( string $name )\nDOM 文章にルート要素ノードを追加し、新しいノードを返します。 この要素名はパラメータで渡します。
domattribute DomDocument->create_attribute ( string $name , string $value )\nこの関数は DomAttribute クラスの新規インスタンスを返します。 属性名は第 1 パラメータの値です。属性値は第 2 パラメータです。 このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domcdata DomDocument->create_cdata_section ( string $content )\nこの関数は DomCData クラスの新規インスタンスを返します。 cdata の内容は渡されたパラメータの値です。 このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domcomment DomDocument->create_comment ( string $content )\nこの関数は DomComment クラスの新規インスタンスを返します。 コメントの内容は渡されたパラメータの値です。このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domelement DomDocument->create_element_ns ( string $uri , string $name [, string $prefix ] )\nこの関数は DomElement クラスの新規インスタンスを返します。 要素のタグ名は渡されたパラメータ name の値です。 名前空間の URI は渡されたパラメータ uri の値です。文章のルートノードで同じ名前空間が URI がすでに宣言されている場合、その接頭辞が使用されます。 そうでない場合、オプションパラメータ prefix で与えられた接頭辞、もしくはランダムに設定された接頭辞が使用されます。 このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomdocument_create_element_ns(), domnode_add_namespace(), domnode_set_namespace(), domnode_append_child(), domdocument_create_text(), domdocument_create_comment(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domelement DomDocument->create_element ( string $name )\nこの関数は DomElement クラスの新規インスタンスを返します。 要素のタグ名は渡されたパラメータの値です。このノードは、例えば DomNode_append_child() などを用いて挿入されるまで、 文章には現れません。\nエラーが発生した場合、戻り値は FALSE です。\nDomNode_append_child(), DomDocument_create_text(), DomDocument_create_comment(), DomDocument_create_attribute(), DomDocument_create_processing_instruction(), DomDocument_create_entity_reference(), DomNode_insert_before() も参照ください。
domentityreference DomDocument->create_entity_reference ( string $content )\nこの関数は DomEntityReference クラスの新規インスタンスを返します。 エンティティ参照の内容は渡されたパラメータの値です。このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_processing_instruction(), domdocument_create_attribute(), domnode_insert_before() も参照ください。
domprocessinginstruction DomDocument->create_processing_instruction ( string $content )\nこの関数は DomCData クラスの新規インスタンスを返します。 PI の内容は渡されたパラメータの値です。このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_attribute(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domtext DomDocument->create_text_node ( string $content )\nこの関数は DomText クラスの新規インスタンスを返します。 テキストの内容は渡されたパラメータの値です。このノードは、(たとえば) domnode_append_child() などで挿入されない限り、ドキュメント内に現われません。\nエラーが発生した場合、戻り値は FALSE です。\ndomnode_append_child(), domdocument_create_element(), domdocument_create_comment(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), domnode_insert_before() も参照ください。
domdocumenttype DomDocument->doctype ( void )\nこの関数は、クラス DomDocumentType のオブジェクトを返します。4.3より前のバージョンのPHPでは、 このオブジェクトは、クラス Dtd でしたが、 DOM 標準にはそのようなクラスはありません。\nクラスDomDocumentTypeのメソッドも参照下さい。
domelement DomDocument->document_element ( void )\nこの関数は文章のルート要素ノードを返します。\n以下の例はただ CHAPTER という名前の要素を返し表示します。 他のノード -- コメント -- は返しません。
string DomDocument->dump_file ( string $filename [, bool $compressionmode [, bool $format ]] )\nDOM 表現から XML 文章を生成します。この関数は以下の例のように、 通常スクラッチから新規 DOM 文章を生成した後にコールされます。 format により、 きちんと整形するかどうかを指定します。 第 1 パラメータはファイル名、第 2 パラメータは圧縮するかどうかを指定します。
string DomDocument->dump_mem ([ bool $format [, string $encoding ]] )\nDOM 表現から XML 文章を生成します。この関数は以下の例のように、 通常スクラッチから新規 DOM 文章を生成した後にコールされます。 format により、 きちんと整形するかどうかを指定します。
domelement DomDocument->get_element_by_id ( string $id )\nこの関数は domdocument_get_elements_by_tagname() と似ていますが、与えられた ID を持つ要素を検索します。 DOM 標準によれば、これには属性 ID を ID 型として定義する DTD が必要になりますが、現在の実装は単純に &quot;//*[@ID = &#039;%s&#039;]&quot; に対する xpath 検索を行っています。これは属性が ID 型でない場合に NULL を返す必要がある DOM 標準に準拠していません。 この動作は固定されているようですので、現在の動作を当てにしないでください。\ndomdocument_get_elements_by_tagname() も参照ください。
array DomDocument->get_elements_by_tagname ( string $name )\ndomdocument_add_root() も参照ください。
string DomDocument->html_dump_mem ( void )\nDOM 表現から HTML 文章を生成します。この関数は以下の例のように、 通常スクラッチから新規 DOM 文章を生成した後にコールされます。
int DomDocument->xinclude ( void )\nこの関数は DomDocument オブジェクトにおける &raquo; XIncludes の代替です。
DomDocumentType\narray entities ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
DomDocumentType\nbool internal_subset ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
DomDocumentType\nstring name ( void )\nこの関数は文章型の名前を返します。
DomDocumentType\narray notations ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
DomDocumentType\nstring PUBLIC_id ( void )\nこの関数は、文章型の PUBLIC ID を返します。
DomDocumentType\nstring system_id ( void )\n文章型のSYSTEM ID を返します。
DomElement\nDomAttribute get_attribute_node ( string $name )\n現在の要素中の与えられた属性のノードを返す Returns the node of the given attribute in the current element.
DomElement\nstring get_attribute ( string $name )\n現在の要素中の与えられた属性の値を返します。\nPHP 4.3 以降、与えられた名前 name を持つ属性がない場合、空文字列が返されます。
DomElement\narray get_elements_by_tagname ( string $name )\n指定した名前 name を持つ現在の要素以下にある全ての子要素を取得します。
DomElement\nbool has_attribute ( string $name )\nこの関数は、現在のノードに名前 name を持つ属性があるかどうかを調べます。
DomElement\nbool remove_attribute ( string $name )\n現在の DomElement ノードから属性を削除します。
DomElement\nDomNode set_attribute_node ( DomNode $attr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
DomElement\nDomAttribute set_attribute ( string $name , string $value )\n名前 name を持つ属性値を value に設定します。
DomElement\nstring tagname ( void )\n現在のノードの名前を返します。この関数をコールすることは、 tagname プロパティにアクセスする、 もしくは現在のノードに対して DomNode->node_name をコールすることと等価です。
DOMNode\nbool add_namespace ( string $uri , string $prefix )\nこのメソッドはノードに名前空間宣言を追加します。
DOMNode\nDOMNode append_child ( DOMNode $newnode )\nこの関数は既存の子ノードに子ノードを追加する、 もしくは新規子ノードを作成します。
domelement DomNode->append_sibling ( domelement $newnode )\nこの関数は既存のノードに兄弟ノードを追加します。 子ノードは、例えば DomDocument->create_element, DomDocument->create_text_node など、もしくは単純にあらゆる他のノードによって作成されたノードを 指定することが可能です。\n新規兄弟ノードは追加する前に最初に複製されます。 そのため、新規子ノードは完全に新しいコピーとなります。これは、 この関数に渡されたノードを変更することなしに修正することが可能です。 渡されたノードが子ノード自身の場合うまくコピーされますので、 XML 文章の大きな部位を簡単にコピーすることができます。 戻り値は追加された子ノードです。 もし追加された子ノードを変更するつもりであれば、 返されたノードを使用する必要があります。\nこの関数は domnode_append_child() のど宇佐を提供するために追加され、PHP 4.2 まで動作します。\ndomnode_append_before() も参照ください。
array DomNode->attributes ( void )\nこの関数は、ノードが XML_ELEMENT_NODE 型の場合に属性の配列を返すだけです。\n(PHP >= 4.3 のみ) 属性が存在しない場合、NULL が返されます。
array DomNode->child_nodes ( void )\n全ての子ノードを返します。\ndomnode_next_sibling(), domnode_previous_sibling() も参照ください。
domelement DomNode->clone_node ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string DomNode->dump_node ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\ndomdocument_dump_mem() も参照ください。
domelement DomNode->first_child ( void )\n最初の子ノードを返します。\n(PHP >= 4.3 のみ) 最初の子ノードが存在しない場合、NULL が返されます。\ndomnode_last_child(), domnode_next_sibling(), domnode_previous_sibling() も参照ください。
string DomNode->get_content ( void )\nこの関数は実ノードの内容を返します。
bool DomNode->has_attributes ( void )\nこの関数は、ノードが属性を有しているかを調べます。\ndomnode_has_child_nodes() も参照ください。
bool DomNode->has_child_nodes ( void )\nこの関数は、ノードが子ノードを有しているかを調べます。\ndomnode_child_nodes() も参照ください。
domelement DomNode->insert_before ( domelement $newnode , domelement $refnode )\nこの関数は新規ノード newnode をノード refnode の直前に挿入します。 戻り値は挿入されたノードです。 もし追加された子ノードを変更するつもりであれば、 返されたノードを使用する必要があります。\n(PHP >= 4.3 のみ) newnode がすでに文章の一部である場合、最初に既存のコンテキストから削除されます。 もし refnode が NULL の場合、 newnode は子ノードリストの最後に挿入されます。\ndomnode_insert_before() は domnode_append_child() に非常に似ており、 以下の例は domnode_append_child() にある例と同様のことを行うことを示しています。
bool DomNode->is_blank_node ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
domelement DomNode->last_child ( void )\n最後の子ノードを返します。\n(PHP >= 4.3 のみ) 最後の子ノードが存在しない場合、NULL が返されます。\ndomnode_first_child(), domnode_next_sibling(), domnode_previous_sibling() も参照ください。
domelement DomNode->next_sibling ( void )\nこの関数は現在のノードの次の兄弟ノードを返します。 次の兄弟ノードが存在しない場合、FALSE (< 4.3) もしくは null (>= 4.3) を返します。この関数を使用することで、 例に示されたようにノードの全ての子コードを走査する事ができます。
string DomNode->node_name ( void )\nノード名を返します。名前は以下の表の通り、 異なるノードの型に対しては異なる意味を持ちます。  値の意味   型 意味     DomAttribute 属性値   DomAttribute &nbsp;   DomCDataSection #cdata セクション   DomComment #comment   DomDocument #document   DomDocumentType 文章型名   DomElement タグ名   DomEntity エンティティ名   DomEntityReference エンティティ参照名   DomNotation ノーテーション名   DomProcessingInstruction ターゲット   DomText #text
int DomNode->node_type ( void )\nノードの型を返します。全ての取りうる型は、 導入のページにある表に一覧されています。
string DomNode->node_value ( void )\nノードの値を返します。値は以下の表の通り、 異なるノードの型に対しては異なる意味を持ちます。  値の意味   型 意味     DomAttribute 属性値   DomAttribute &nbsp;   DomCDataSection 内容   DomComment コメントの内容   DomDocument null   DomDocumentType null   DomElement null   DomEntity null   DomEntityReference null   DomNotation null   DomProcessingInstruction ターゲット以外の全ての内容   DomText テキストの内容
domdocument DomNode->owner_document ( void )\nこの関数は現在のノードが属している文章を返します。\n以下の例は 2 つの等しい子ノードリストを作成します。
domnode DomNode->parent_node ( void )\nこの関数は親ノードを返します。\n(PHP >= 4.3 のみ) 親ノードが存在しない場合、NULL が返されます。\n以下の例は 2 つの等しい子ノードリストを作成します。
string DomNode->prefix ( void )\nノードの名前空間接頭辞を返します。
domelement DomNode->previous_sibling ( void )\nこの関数は現在のノードの前の兄弟ノードを返します。 前の兄弟ノードが存在しない場合、FALSE (< 4.3) もしくは NULL (>= 4.3) を返します。この関数を使用することで、 例に示されたようにノードの全ての子コードを走査する事ができます。\ndomnode_next_sibling() も参照ください。
domtext DomNode->remove_child ( domtext $oldchild )\nこの関数は、子ノードのリストから子ノードを削除します。 もし子ノードが削除できなかった、もしくは子ノードではない場合、この関数は FALSE を返します。子ノードが削除できた場合、 この関数は古い子ノードを返します。
domelement DomNode->replace_child ( domelement $newnode , domelement $oldnode )\n(PHP 4.2) この関数は子ノード oldnode を渡された新規ノードに置換します。もし新規ノードがすでに子ノードの場合、 二度目は追加されません。もし古いノードが存在しない場合、 この関数は FALSE を返します。もし置換が成功した場合、 古いノードが返されます。\n(PHP 4.3) この関数は新規ノードがすでに DomNode の子ノードだったとしても、 子ノード oldnode を渡された newnode に置換します。 もし newnode ガスでに文章に挿入されている場合、 最初に既存のコンテキストから削除されます。 もし古いノードが存在しない場合、この関数は FALSE を返し、 置換が成功した場合は古いノードが返されます (この動作は W3C 規格に準拠しています。)\ndomnode_append_child() も参照ください。
domelement DomNode->replace_node ( domelement $newnode )\n(PHP 4.2) この関数は既存のノードを渡された新規ノードに置換します。 文章にすでに存在しているノードが二度目に挿入されないようにするため、 newnode は置換前にコピーされます。 この動作は、置換前にノードに対して行う全ての修正、もしくは domnode_first_child(), domnode_child_nodes() などの関数を用いた後に挿入されたノードを再取得させることを強制します。\n(PHP 4.3) この関数は既存ノードを渡された新規ノードに置換します。 もはやコピーはされません。もし newnode が文章に挿入されている場合、最初に既存のコンテキストから削除されます。 もし置換が成功した場合、古いノードが返されます。\ndomnode_append_child() も参照ください。
bool DomNode->set_content ( string $content )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool DomNode->set_name ( void )\nノード名を設定します。\ndomnode_node_name() も参照ください。
void DomNode->set_namespace ( string $uri [, string $prefix ] )\nノードの名前空間を uri に設定します。 もしこのノードの親ノードの一つに同じ URI で名前空間が宣言されている場合、 名前空間の接頭辞が使用されます。そうでない場合、オプションパラメータ prefix で指定された接頭辞、 もしくはランダムに設定された接頭辞が使用されます。\ndomdocument_create_element_ns(), domnode_add_namespace() も参照ください。
void DomNode->unlink_node ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
DomProcessingInstruction\nstring data ( void )\nこのメソッドは PI ノードのデータを取得します。
DomProcessingInstruction\nstring target ( void )\nこのメソッドは PI ノードのターゲットを取得します。
DomDocument domxml_new_doc ( string $version )\nスクラッチから新規 DOM ドキュメントを作成し、返します。
DomDocument domxml_open_file ( string $filename [, int $mode [, array &$error ]] )\nこの関数は、ファイルで与えられた XML 文章をパースします。
DomDocument domxml_open_mem ( string $str [, int $mode [, array &$error ]] )\nこの関数は、文字列で与えられた XML 文章をパースします。
string domxml_version ( void )\nこの関数は、現在使用されている XML ライブラリのバージョンを取得します。
DomDocument domxml_xmltree ( string $str )\nこの関数は、str の XML ドキュメントをパースし、 パースされた文章としてPHPオブジェクトのツリーを返します。\n他の関数はこのツリーにはアクセスできないため、 この関数は他の関数と異なっています。 例えばノードを追加する時のように、このツリーを修正することには、 現在 XML ファイルとしてツリーをダンプする手段がないため意味がありません。\nしかしながら、この関数はファイルを読み込んで内容を調べたい場合には有用です。
DomXsltStylesheet domxml_xslt_stylesheet_doc ( DomDocument $xsl_doc )\n与えられた XSL 文章から DomXsltStylesheet オブジェクトを作成します。
DomXsltStylesheet domxml_xslt_stylesheet_file ( string $xsl_file )\n与えられた XSL ファイルから DomXsltStylesheet オブジェクトを作成します。
DomXsltStylesheet domxml_xslt_stylesheet ( string $xsl_buf )\n与えられた XSL バッファから DomXsltStylesheet オブジェクトを作成します。
int domxml_xslt_version ( void )\nXSLT ライブラリのバージョンを取得します。
DomXsltStylesheet\nDomDocument process ( DomDocument $xml_doc [, array $xslt_params [, bool $is_xpath_param [, string $profile_filename ]]] )\n与えられた DomDocument オブジェクトに XSLT 変換を適用します。
DomXsltStylesheet\nstring result_dump_file ( DomDocument $xmldoc , string $filename )\nDomXsltStylesheet->process は、たとえ出力方式が\n<xsl:output>  や同様の属性/要素であっても常に整形式の XML DomDocument を返し、HTML 4 やテキストデータを出力したい場合には あまり使用されません。\nこれに反して、この関数は\n<xsl:output method=&quot;html|text&quot;>  や他の出力制御ディレクティブを受け付けます。 使用法の説明については例を参照ください。
DomXsltStylesheet\nstring result_dump_mem ( DomDocument $xmldoc )\nDomXsltStylesheet->process は、たとえ出力方式が\n<xsl:output>  や同様の属性/要素であっても常に整形式の XML DomDocument を返し、HTML 4 やテキストデータを出力したい場合には あまり使用されません。\nこれに反して、この関数は\n<xsl:output method=&quot;html|text&quot;>  や他の出力制御ディレクティブを受け付けます。 使用法の説明については例を参照ください。
int dotnet_load ( string $assembly_name [, string $datatype_name [, int $codepage ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float floatval ( mixed $var )\nvar の float 値を返します。
array each ( array &$array )\n配列から現在のキーと値のペアを返して、カーソルを進めます。\neach() を実行した後、配列カーソルは、 配列の次の要素に移動します。配列の最終要素にカーソルがある場合は、 最終要素にとどまります。再度 each を使用して配列を走査するには、 reset() を使用する必要があります。
int easter_date ([ int $year ] )\n指定した年yearにおける復活祭の真夜中のUnix時を返します。\n警告\nこの関数は、年がUnixタイムスタンプの範囲を越える時 (すなわち、1970より前、または2037より後)に警告を発生します。\n復活祭の日付は、西暦325年の Nicaea 会議で春分の日の後の 最初の満月の後の日曜日として定められました。 満月とその次の日曜日の日付の計算を簡単にするために 春分の日は常に3月21日になるとして計算されます。 ここで用いるアルゴリズムは、532年頃、Dionysius Exiguus により 導出されたものです。(1753年より前の年に関して)ユリウス暦の元では 月の周期を追うために簡単な19年周期が用いられます。グレゴリウス暦 (1753年以降。この暦は、ClaviusとLiliusにより考案され、 教皇グレゴリウス13世により1582年10月に導入、イギリス及びその植民地に 1752年9月に導入された。) のもとで、二つの補正係数が周期をより正確に作成するために追加されました。\n(このコードは、Simon Kershaw, <webmaster at ely.anglican dot org>によるCプログラムに基づくものです。)
int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )\n指定した年 year において、3 月 21 日から復活祭までの日数を返します。 year が指定されない場合、現在の年が仮定されます。\nこの関数は、Unix 時の範囲外(すなわち 1970 年以前または 2037 年以降)の復活祭を 計算するために easter_date() の代わりに使用することが できます。\n復活祭の日付は、西暦 325 年の Nicaea の会議で春分の日以降の 最初の満月の後の日曜日として定義されました。 満月とその次の日曜日の日付の計算を簡単にするために 春分の日は常に 3 月 21 日になるとして計算されます。 ここで用いるアルゴリズムは、532 年頃に Dionysius Exiguus により 導出されたものです。(1753 年より前の年に関して)ユリウス暦のもとでは 月の周期を追うために簡単な 19 年周期が用いられます。グレゴリオ暦 (1753 年以降。この暦は Clavius と Lilius により考案され、 教皇グレゴリウス 13 世により 1582 年 10 月に導入、イギリス及びその植民地に 1752 年 9 月に導入された) のもとで、二つの補正係数が周期をより正確に作成するために追加されました。\n(このコードは、Simon Kershaw, <webmaster at ely.anglican dot org> による C プログラムに基づくものです。)
int ebcdic2ascii ( string $ebcdic_str )\nebcdic2ascii() は、EBCDICに基づくオペレーティング システム (OS/390, BS2000)でのみ使用可能なApache専用の関数です。 この関数は、EBCDICンコードされた文字列 ebcdic_str を等価なASCII表現(バイナリ対応)に 変換し、結果を返します。
void echo ( string $arg1 [, string $... ] )\nすべてのパラメータを出力します。\necho() は実際には関数ではありません (言語構造です)。このため、使用する際に括弧は必要ありません。 (いくつかの他の言語構造と異なり) echo() は関数のように動作しません。そのため、 関数のコンテキスト中では常に使用することができません。 加えて、複数のパラメータを指定して echo() をコールしたい場合、括弧の中にパラメータを記述してはいけません。\necho() には、開始タグの直後に等号を付ける短縮構文もあります。 この短縮構文は、設定オプションshort_open_tag が有効な場合のみ使用可能です。\nI&nbsp;have&nbsp;<?=$foo?>&nbsp;foo.
bool empty ( mixed $var )\n変数が空であるかどうかを検査する
array enchant_broker_describe ( resource $broker )\nEnchant プロバイダを列挙し、その基本情報を通知します。 同じ情報が phpinfo() からでも取得できます。
bool enchant_broker_dict_exists ( resource $broker , string $tag )\n辞書が存在するかどうかを調べます。空でないタグを使用します。
bool enchant_broker_free_dict ( resource $dict )\n辞書リソースを開放します。
bool enchant_broker_free ( resource $broker )\nブローカーリソースを、その辞書とともに開放します。
string enchant_broker_get_error ( resource $broker )\nこのブローカーで発生した直近のエラーを返します。
resource enchant_broker_init ( void )
mixed enchant_broker_list_dicts ( resource $broker )\n使用可能な辞書の一覧と、その詳細を返します。
resource enchant_broker_request_dict ( resource $broker , string $tag )\nタグを使用して新しい辞書を作成します。空でない言語タグで、 使用したい辞書を指定します (&quot;en_US&quot;、&quot;de_DE&quot;、...)。
resource enchant_broker_request_pwl_dict ( resource $broker , string $filename )\nPWL ファイルを使用して辞書を作成します。 PWL ファイルは、一行にひとつの単語を記述したパーソナル単語ファイルです。
bool enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering )\n&#039;タグ&#039; で表される言語で使用する辞書の優先順位を宣言します。 順位は、プロバイダ名をカンマ区切りでつないだリストで表します。 例外として、言語タグに &quot;*&quot; を使用すると、あらゆる言語についての デフォルトの順位を宣言します。 明示的に順位を指定しなかった言語についてはこれが使用されます。
void enchant_dict_add_to_personal ( resource $dict , string $word )\n指定した辞書のパーソナル単語リストに、単語を追加します。
void enchant_dict_add_to_session ( resource $dict , string $word )\n指定した辞書に単語を追加します。 追加されるのは、アクティブなスペルチェックセッションについてのみです。
bool enchant_dict_check ( resource $dict , string $word )\n単語のスペルが正しい場合に TRUE、 そうでない場合に FALSE を返します。
mixed enchant_dict_describe ( resource $dict )\n辞書の詳細を返します。
string enchant_dict_get_error ( resource $dict )\n現在のスペリングセッションの、直近のエラーを返します。
bool enchant_dict_is_in_session ( resource $dict , string $word )\nある単語が、現在のセッション内に既に存在するかどうかを調べます。
bool enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] )\n単語のスペルが正しい場合は TRUE、そうでない場合は FALSE を返します。変数 suggestions を指定している場合は、 そこに修正候補が格納されます。
void enchant_dict_store_replacement ( resource $dict , string $mis , string $cor )\n&#039;mis&#039; の修正候補として &#039;cor&#039; を使用します。 @mis が @cor に置き換えられることに注意しましょう。 今後 @mis が登場すると、それは @cor で置き換えられます。 そのため、@cor が修正候補の中で衝突するかもしれません。
array enchant_dict_suggest ( resource $dict , string $word )
mixed end ( array &$array )\nend() は array の内部ポインタを最後の要素まで進め、その値を返します。
string ereg_replace ( string $pattern , string $replacement , string $string )\nこの関数は、string をスキャンして pattern にマッチするものを探し、 マッチしたテキストを replacement で置換します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
int ereg ( string $pattern , string $string [, array &$regs ] )\npattern で指定した正規表現 により、大文字小文字を区別して string を検索します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string eregi_replace ( string $pattern , string $replacement , string $string )\nこの関数は、アルファベット文字をマッチングさせる際に大文字 小文字の区別をしないこと以外は ereg_replace() と同じです。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
int eregi ( string $pattern , string $string [, array &$regs ] )\nこの関数は、アルファベット文字をマッチングさせる際に 大文字小文字の区別をしないこと以外は ereg() と同じです。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
array error_get_last ( void )\n最後に発生したエラーについての情報を取得します。
bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )\nエラーメッセージを Web サーバのエラーログ、 TCP ポート、あるいはファイルに送ります。
int error_reporting ([ int $level ] )\nerror_reporting() 関数は、 error_reporting ディレクティブを 実行時に設定します。PHP には多くのエラーレベルがあり、 この関数によりスクリプトの持続時間(実行時間)のレベルが設定されます。
string escapeshellarg ( string $arg )\nescapeshellarg() は、文字列をシングルクオート で括り、既存のシングルクオートを全てクオート/エスケープします。こ れにより、文字列を直接シェル関数に渡し、単一の安全な引数として処 理することを可能にします。この関数は、ユーザー入力からの入力を シェル関数への引数として渡す際にエスケープするために使用する必要 があります。シェル関数には、exec(), system()そして バックティック演算子 を含むシェル関数が含まれます。
string escapeshellcmd ( string $command )\nescapeshellcmd() は、文字列中においてシェルコマンドを だまして勝手なコマンドを実行する可能性がある文字をエスケープします。 この関数は、ユーザに入力されたデータを関数 exec() または system() または、 バックティック演算子 に渡す前に全てエスケープを行う場合に使用するべきです。\n#&;`|*?~<>^()[]{}$\\、\\x0A および \\xFF については、その文字の前にバックスラッシュが 追加されます。&#039; および &quot; は、対になっていない場合にのみエスケープされます。Windows では、 これらの文字に加えて % がスペースに置き換えられます。
mixed eval ( string $code_str )\ncode_str で与えられた文字列を PHP コードとして評価します。 中でも、データベースのテキストフィールドにコードを保存し、 後で実行するためには便利です。\neval() を使用する際、注意するべき点がいくつかあります。 パーサが eval() の処理中に落ちないように、 渡す文字列はセミコロンで文が終了するといった有効な PHP コード である必要があります。また、code_str の 中の文字を適切にエスケープする必要があります。 HTML 出力と PHP コードを一緒に使用するために、 PHP 終了タグを使用して PHP モードを抜けることが可能です。\neval() の中で値を与えた変数は、 この後、メインスクリプトの中でもこれらの値を維持することも 覚えておいてください。
void event_base_free ( resource $event_base )\nDestroys the specified event_base and frees all the resources associated. Note that it&#039;s not possible to destroy an event base with events attached to it.
int event_base_loop ( resource $event_base [, int $flags = 0 ] )\nStarts event loop for the specified event base.
bool event_base_loopbreak ( resource $event_base )\nAbort the active event loop immediately. The behaviour is similar to break statement.
bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )\nThe next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again.
resource event_base_new ( void )\nReturns new event base, which can be used later in event_base_set(), event_base_loop() and other functions.
bool event_base_priority_init ( resource $event_base , int $npriorities )\nSets the number of different event priority levels.\nBy default all events are scheduled with the same priority (npriorities /2). Using event_base_priority_init() you can change the number of event priority levels and then set a desired priority for each event.
bool event_base_set ( resource $event , resource $event_base )\nAssociates the event_base with the event .
bool event_buffer_base_set ( resource $bevent , resource $event_base )\nAssign the specified bevent to the event_base .
bool event_buffer_disable ( resource $bevent , int $events )\nDisables the specified buffered event.
bool event_buffer_enable ( resource $bevent , int $events )\nEnables the specified buffered event.
void event_buffer_fd_set ( resource $bevent , resource $fd )\nChanges the file descriptor on which the buffered event operates.
void event_buffer_free ( resource $bevent )\nDestroys the specified buffered event and frees all the resources associated.
resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )\nLibevent provides an abstraction layer on top of the regular event API. Using buffered event you don&#039;t need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically.
bool event_buffer_priority_set ( resource $bevent , int $priority )\nAssign a priority to the bevent .
string event_buffer_read ( resource $bevent , int $data_size )\nReads data from the input buffer of the buffered event.
void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout )\nSets the read and write timeouts for the specified buffered event.
void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark )\nSets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark , reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark .
bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] )\nWrites data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing.
bool event_del ( resource $event )\nCancels the event .
void event_free ( resource $event )\nFrees previously created event resource.
resource event_new ( void )\nCreates and returns new event resource.
bool event_set ( resource $event , resource $fd , int $events , mixed $callback [, mixed $arg ] )\nPrepares the event to be used in event_add(). The event is prepared to call the function specified by the callback on the events specified in parameter events , which is a set of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ and EV_WRITE.\nAfter initializing the event, use event_base_set() to associate the event with its event base.\nIn case of matching event, these three arguments are passed to the callback function:   fd\nResource indicating the stream.    events\nA flag indicating the event. Can be one of the following: EV_TIMEOUT, EV_SIGNAL, EV_READ or EV_WRITE.    arg\nOptional parameter, previously passed to event_set() as arg .
bool event_add ( resource $event [, int $timeout = -1 ] )\nevent_add() schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one.
string exec ( string $command [, array &$output [, int &$return_var ]] )\nexec() は指定されたコマンド command を実行します。
int exif_imagetype ( string $filename )\nexif_imagetype() を画像の先頭バイトを読み そのサインを調べます。\nexif_imagetype() は、他の exif 関数がサポートしていないファイル形式で コールされるの防いだり、$_SERVER['HTTP_ACCEPT'] と組み合わせて閲覧者が画像を見る権限を持っているかどうかを調べたりするために 使用可能です。
array exif_read_data ( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]] )\nexif_read_data() は、JPEG あるいは TIFF の画像ファイルから EXIF ヘッダを読み込みます。この方法で、デジタルカメラが生成したメタデータを 読み込むことが可能です。\nEXIF ヘッダは、デジタルカメラが作成した JPEG/TIFF 画像によく含まれています。しかし残念なことに、 そのタグ付けの方法はメーカーによって異なります。 したがって、特定の Exif ヘッダが常に存在すると仮定することはできません。\nHeight および Width は、getimagesize() と同じ方法で計算されます。 よって、これらの値は決してヘッダの一部として返してはいけません。 また、html は高さ/幅を表すテキスト文字列で、 通常の HTML の中で用いられます。\nExif ヘッダに著作権表示が含まれている場合、それ自身には 2 つの値を 含めることが可能です。Exif 2.10 のこの矛盾した規格に対応するため、 COMPUTED セクションは Copyright.Photographer および Copyright.Editor の両方を返します。 また IFD0 セクションには 2 つのエントリを NULL 文字で区切った バイト配列を含めます。データ型が間違っている場合は最初のエントリのみを かえします（Exif の通常の挙動）。COMPUTED には、元の著作権文字列あるいは カンマで区切られた写真と編集者の著作権表示のどちらかを Copyright エントリに含めることが可能です。\nUserComment タグにも Copyright タグと同様の問題があります。ここにも 2 つの値を格納することが可能です。それは使用しているエンコーディングと 値自身の 2 つです。そうなると、IFD セクションにはエンコーディングのみを 含めるか、あるいはバイト配列を格納することになります。COMPUTED セクションは UserCommentEncoding および UserComment を両方格納することができます。UserComment はどちらの 場合でも有効なので、IFD0 セクションではこちらを優先すべきです。\nexif_read_data() は、EXIF 仕様（&raquo; http://exif.org/Exif2-2.PDF, 20 ページ）に基づいて EXIF データタグの検証も行います。
string exif_tagname ( int $index )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )\nexif_thumbnail() は、 TIFF あるいは JPEG 画像に 埋め込まれたサムネイルを読み込みます。\nこの関数を使用してサムネイルを出力したい場合は、 header() 関数を使用して mimetype 情報を送信する 必要があります。\nexif_thumbnail() が画像を作成することはできないが、 そのサイズだけはわかるという可能性があります。そのような場合、返り値は FALSE となりますが width および height を設定されています。
void exit ([ string $status ] )\nvoid exit ( int $status )\nスクリプトの実行を終了します。
float exp ( float $arg )\ne を arg 乗した値を返します。
int expect_expectl ( resource $expect , array $cases [, array &$match ] )\nプロセスの出力がパターンに一致する・指定した時間が経過する・ あるいは EOF に達するのいずれかにあてはまるまで待ち続けます。\nmatch を指定すると、検索結果がそこに保存されます。 一致した文字列が match[0] に保存され、 元のパターンの中の (括弧で囲まれた) 部分に一致する文字列が match[1] 、match[2] 、 と順に、最大 match[9] まで (libexpect の制限です) 保存されます。
resource expect_popen ( string $command )\nBourne シェル経由でコマンドを実行し、プロセスへの PTY ストリームを オープンします。
array explode ( string $delimiter , string $string [, int $limit ] )\n文字列の配列を返します。この配列の各要素は、 string を文字列 delimiter で区切った部分文字列となります。
float expm1 ( float $arg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nexpm1() は、 &#039;exp(number ) - 1&#039; の値を返します。 number がゼロに近く、 &#039;exp (number ) - 1&#039; が引き算時の桁落ちのために 不正確となるような場合でも正確な値が計算できる方法を使用します。
bool extension_loaded ( string $name )\n拡張モジュールがロードされているかどうかを調べます。
int extract ( array $var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix ]] )\n配列からシンボルテーブルに変数をインポートします。\n各キーについて変数名として有効であるかどうか、 そして、シンボルテーブルの既存の変数と衝突しないかどうかを確認します。
int ezmlm_hash ( string $addr )\nezmlm_hash() は、EZMLM メイリングリストを MySQL データベースで管理する際に必要なハッシュ値を計算します。
bool fam_cancel_monitor ( resource $fam , resource $fam_monitor )\nリソースの監視を終了します。\nさらに FAMAcknowledge イベントが発生します。
void fam_close ( resource $fam )\nFAM サービスへの接続をクローズします。
resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask )\nディレクトリ内のファイルの監視を要求します。\nファイルの状態が変化したときに FAM イベントが発生します。 発生しうるイベントコードの詳細は、このセクションの 定数 の欄にあります。
resource fam_monitor_directory ( resource $fam , string $dirname )\n指定したディレクトリおよびそれに 含まれる全てのファイルを監視するよう指示します。\n指定したディレクトリのステータス(すなわち、このディレクトリに関する stat() の結果)またはその内容 (すなわち、このディレクトリに関する readdir() の結果) が変更される度に FAM イベントが生成されます。\n発生しうるイベントコードの詳細は、このセクションの 定数 の欄にあります。
resource fam_monitor_file ( resource $fam , string $filename )\n指定した 1 個のファイルの 監視を指示します。このファイルのステータス(すなわち、このファイルに関する 関数 stat() の結果)が変化する度に FAM イベントが 発生します。\n発生しうるイベントコードの詳細は、このセクションの 定数 の欄にあります。
array fam_next_event ( resource $fam )\n次の待機中の FAM イベントを返します。\nこの関数は、fam_pending() を用いてチェックできる イベントが検出されるまでブロックします。
resource fam_open ([ string $appname ] )\nFAM サービスデーモンへの接続をオープンします。
int fam_pending ( resource $fam )\n待機中の FAM イベントを調べます。
bool fam_resume_monitor ( resource $fam , resource $fam_monitor )\nfam_suspend_monitor() により中断された 指定したリソースへの監視を再開します。
bool fam_suspend_monitor ( resource $fam , resource $fam_monitor )\nfam_suspend_monitor() は、リソースへの監視を一時的に中断します。\n監視は、fam_resume_monitor() により後で再開することができ、 その際、全く新たに監視を指示する必要はありません。
int fbsql_affected_rows ([ resource $link_identifier ] )\nfbsql_affected_rows() は、 link_identifier が指す接続において 直近の INSERT、UPDATE、DELETE クエリで変更されたレコードの数を返します。
bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )\nautocommit の状態を返します。
int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )\n指定した BLOB の大きさを返します。
bool fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )\nfbsql_change_user() は、指定した接続にログインするユーザを変更します。 ユーザおよびパスワードの認証に失敗した場合は、現在の接続ユーザがアクティブなままとなります。
int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )\n指定した CLOB の大きさを取得します。
bool fbsql_close ([ resource $link_identifier ] )\n指定したリンク ID に関連する FrontBase サーバへの接続を閉じます。\n持続的でないオープンされたリンクは、スクリプト実行終了時に自動的に クローズされるため、fbsql_close() は通常は不要です。
bool fbsql_commit ([ resource $link_identifier ] )\nディスクへの insert、update、 delete を全て書き込んでトランザクションを終了し、トランザクションにより 保持された全ての行及びテーブルのロックを解除します。このコマンドは、 autocommit が false に設定されている場合のみ必要です。
resource fbsql_connect ([ string $hostname [, string $username [, string $password ]]] )\nfbsql_connect() は、FrontBase サーバへの接続を確立します。\n同じ引数で fbsql_connect() が 2 度目に コールされた場合、新規のリンクは確立されず、替わりに既に オープンされているリンク ID が返されます。\nfbsql_close() をコールすることにより事前に 明示的にクローズされていない限り、サーバへのリンクはスクリプトの 実行終了時にクローズされます。
string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )\n指定したデータから BLOB を作成します。
string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )\n指定したデータから CLOB を作成します。
bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )\n指定したサーバ上で新しいデータベースの作成を試みます。
bool fbsql_data_seek ( resource $result , int $row_number )\n指定した結果 ID が指す FrontBase 結果の内部行ポインタを指定した行番号に移動します。\nこれ以降に fbsql_fetch_row() をコールすると、 その行が返されます。
string fbsql_database_password ( resource $link_identifier [, string $database_password ] )\n現在の接続で 使用されているデータベースのパスワードを設定または取得します。 データベースがパスワードで保護されている場合は、 fbsql_select_db() の前にこの関数をコールする必要があります。\nリンクがオープンされていない場合、この関数は fbsql_connect() がコールされた場合と同様にリンクを確立し、使用します。\nこの関数はデータベース内のデータベースパスワードを変更しませんし、 またデータベースのデータベースパスワードを取得することもしません。
string fbsql_database ( resource $link_identifier [, string $database ] )\n接続で使用するデータベース名を取得あるいは設定します。
resource fbsql_db_query ( string $database , string $query [, resource $link_identifier ] )\nデータベースを選択し、そこでクエリを実行します。
int fbsql_db_status ( string $database_name [, resource $link_identifier ] )\n指定したデータベースの現在の状態を取得します。
bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )\nfbsql_drop_db() は、指定したリンク ID が指す サーバからデータベース全体を破棄(削除)します。
int fbsql_errno ([ resource $link_identifier ] )\n直近の FrontBase 操作からのエラーメッセージを表す数値を返します。\nfbsql データベースのバックエンドから返されるエラーは、警告を発生しません。 その代わりに、fbsql_errno() を使用してエラーコードを 取得します。この関数は、直近に実行した fbsql 関数 (fbsql_error() および fbsql_errno() は除く) のエラーコードのみを返すことに注意しましょう。 もしこれを使用するつもりなら、他の fbsql 関数をコールする前に値を調べる必要があります。
string fbsql_error ([ resource $link_identifier ] )\n直近の FrontBase 操作のエラー文字列を返します。\nfbsql データベースのバックエンドから返されるエラーは、警告を発生しません。 その代わりに、fbsql_error() を使用してエラー文字列を 取得します。この関数は、直近に実行した fbsql 関数 (fbsql_error() および fbsql_errno() は除く)のエラーコードのみを返すことに注意しましょう。もしこれを使用 するつもりなら、他の fbsql 関数をコールする前に値を調べる必要があります。
array fbsql_fetch_array ( resource $result [, int $result_type ] )\nfbsql_fetch_array() は fbsql_fetch_row() と fbsql_fetch_assoc() を組み合わせたものです。\n注意してほしいのは、 fbsql_fetch_array() は fbsql_fetch_row() と比べてそれほど遅くはないのに その追加機能がとても優れているということです。
array fbsql_fetch_assoc ( resource $result )\nfbsql_fetch_assoc() は、 fbsql_fetch_array() のオプションの第 2 引数に FBSQL_ASSOC を指定してコールするのと等価です。この関数は 連想配列のみを返します。\nfbsql_fetch_array() も、当初はこのように動作していました。もし連想配列だけでなく 数値添字の配列も必要な場合は fbsql_fetch_array() を使用してください。\n注意してほしいのは、 fbsql_fetch_assoc() は fbsql_fetch_row() と比べてそれほど遅くはないのに その追加機能がとても優れているということです。
object fbsql_fetch_field ( resource $result [, int $field_offset ] )\nクエリ結果のフィールドについての情報を取得するために使用されます。
array fbsql_fetch_lengths ( resource $result )\nfbsql_fetch_row()、 fbsql_fetch_array() および fbsql_fetch_object() によって返された直近の行について 各カラムの長さを格納した配列を返します。
object fbsql_fetch_object ( resource $result )\nfbsql_fetch_object() は fbsql_fetch_array() と似ていますが 1 点だけ違いが あります。それは、返されるのが配列ではなくオブジェクトであるという点です。 つまり、データへのアクセスはフィールド名によってのみ可能で、 そのオフセットではアクセスできない(数値はプロパティ名として使用できません) ということです。\n速度面では、この関数は fbsql_fetch_array() とまったく同等で、fbsql_fetch_row() と比べても ほぼ同じです (その差はごくわずかです)。
array fbsql_fetch_row ( resource $result )\nfbsql_fetch_row() は、指定した結果 ID に 関連付けられた結果から、1 行分のデータを取得します。\nfbsql_fetch_row() を続けてコールすると、 結果セットの次の行を返します。行がもうない場合には FALSE を返します。
string fbsql_field_flags ( resource $result [, int $field_offset ] )\n結果の指定したフィールドに関連付けられたフラグを取得します。
int fbsql_field_len ( resource $result [, int $field_offset ] )\n指定したフィールドの長さを返します。
string fbsql_field_name ( resource $result [, int $field_index ] )\n指定したフィールドインデックスの名前を返します。
bool fbsql_field_seek ( resource $result [, int $field_offset ] )\n指定したフィールドオフセットに移動します。 fbsql_fetch_field() がフィールドオフセットを 指定せずにコールされた場合、fbsql_field_seek() で指定したフィールドオフセットが返されます。
string fbsql_field_table ( resource $result [, int $field_offset ] )\n指定したフィールドがあるテーブルの名前を返します。
string fbsql_field_type ( resource $result [, int $field_offset ] )\nfbsql_field_type() は fbsql_field_name() 関数と同じですが、 返される内容がフィールドの型となります。
bool fbsql_free_result ( resource $result )\nresult で指定した ID に関連付けられた全メモリを開放します。\nfbsql_free_result() は、大きな結果セットを返す クエリでメモリの使用量が心配な場合にのみコールします。 結果に関連付けられたメモリは、スクリプトの実行が終了した際に自動的に開放されます。
array fbsql_get_autostart_info ([ resource $link_identifier ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string fbsql_hostname ( resource $link_identifier [, string $host_name ] )\n接続で使用されているホスト名を取得あるいは設定します。
int fbsql_insert_id ([ resource $link_identifier ] )\n直近の INSERT クエリにおいて、DEFAULT UNIQUE 定義されているカラムで生成された ID を返します。
resource fbsql_list_dbs ([ resource $link_identifier ] )\nfbsql デーモンで現在使用可能なデータベースを含む結果ポインタを返します。 この結果ポインタの内容を取得するには fbsql_tablename() 関数を使用します。
resource fbsql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )\n指定したテーブルについての情報を取得します。
resource fbsql_list_tables ( string $database [, resource $link_identifier ] )\ndatabase について説明する結果ポインタを返します。
bool fbsql_next_result ( resource $result )\nサーバに複数の SQL 文を送信したり、複数の結果を返す ストアドプロシージャを実行したりすると、複数の結果セットが返されます。 この関数は、サーバからの追加の結果セットが存在するかどうかを調べます。 結果が存在した場合、現在の結果セットを開放して新しい結果セットを取得します。
int fbsql_num_fields ( resource $result )\n指定した結果セット result のフィールド数を返します。
int fbsql_num_rows ( resource $result )\n指定した結果セット result の行数を取得します。\nこのコマンドは SELECT 文に対してのみ使用可能です。 INSERT、UPDATE あるいは DELETE クエリの行数を取得するには、 fbsql_affected_rows() を使用します。
string fbsql_password ( resource $link_identifier [, string $password ] )\n接続時のユーザパスワードを取得あるいは設定します。
resource fbsql_pconnect ([ string $hostname [, string $username [, string $password ]]] )\nFrontBase サーバへの持続的な接続を確立します。\nサーバのポート番号を指定するには fbsql_select_db() を使用します。\nfbsql_pconnect() は fbsql_connect() とほとんど同じように動作しますが、 2 つの大きな違いがあります。\nまず、接続の際に、この関数は事前に同じホスト・ユーザ名・パスワードで オープンされている (持続的) リンクを探そうとします。 見つかった場合には、新しい接続をオープンせずにその接続の ID を 返します。\n次に、SQL サーバへの接続はスクリプトが終了しても閉じられません。 その代わりに、今後利用されるときのためにオープンされたままとなります。\nこれらにより、この形式のリンクは「持続的(persistent)」と呼ばれます。
resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )\nクエリ query を、 サーバ上の現在アクティブなデータベースに送信します。\nクエリが成功したと仮定すると、 fbsql_num_rows() を使用して SELECT 文から 返された行数を取得したり fbsql_affected_rows() を使用して DELETE、INSERT、REPLACE あるいは UPDATE 文で変更された行数を 取得したりすることが可能です。
string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )\nデータベースから BLOB データを読み込みます。\nselect 文が BLOB や CLOB のカラムを含んでいる場合、 FrontBase はデータが取得される際にはそのデータを直接返します。 このデフォルトの動作は fbsql_set_lob_mode() で変更することが可能で、そうするとデータの取得時には BLOB および CLOB データのハンドルを返します。ハンドルを取得した場合は、 データベースから実際の BLOB データを取得するために fbsql_read_blob() をコールする必要があります。
string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )\nデータベースから CLOB データを読み込みます。\nselect 文が BLOB や CLOB のカラムを含んでいる場合、 FrontBase はデータが取得される際にはそのデータを直接返します。 このデフォルトの動作は fbsql_set_lob_mode() で変更することが可能で、そうするとデータの取得時には BLOB および CLOB データのハンドルを返します。ハンドルを取得した場合は、 データベースから実際の CLOB データを取得するために fbsql_read_clob() をコールする必要があります。
mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )\nFrontBase の結果セット result から、ひとつのセルの内容を返します。\n大きな結果セットを処理する場合には、(以下で示すような) 行全体を 取得する関数のうちのひとつを使用することを考慮すべきでしょう。 これらの関数は複数のセルの内容を一度の関数コールで取得することが 可能で、fbsql_result() にくらべてかなり高速です。\nfbsql_result() は、その他の結果セットを扱う関数と 一緒に使用すべきではありません。
bool fbsql_rollback ([ resource $link_identifier ] )\n直近のコミット以降に発行されたすべての文をロールバックし、 現在のトランザクションを終了します。\nこのコマンドは、autocommit が false に設定されている場合にのみ必要となります。
int fbsql_rows_fetched ( resource $result )\n直近の文で影響をうけた行の数を取得します。
bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )\n指定したリンク ID 上の、現在アクティブなデータベースを設定します。\nクライアントは、データベースへの接続時に使用するポート番号を取得する ために FBExec を使用します。データベース名が番号の場合、システムは これをポート番号として使用し、FBExec にポート番号を問い合わせません。 FrontBase サーバを開始するには、 FRontBase -FBExec=No -port=<port number> <database name> のようにします。\nこの後の fbsql_query() のコールは、 アクティブなデータベースが対象となります。
void fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool fbsql_set_lob_mode ( resource $result , int $lob_mode )\nデータベースから LOB データを取得する際のモードを設定します。\nBLOB および CLOB のデータが FrontBase に格納されている場合、 それは直接的あるいは間接的に保存することが可能です。直接保存された LOB データは lob モードの設定にかかわらず常に取得されます。LOB データが 512 バイトより小さい場合は常に直接保存されます。
bool fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password )\n指定したユーザ user のパスワードを変更します。
void fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation )\nトランザクションのロック locking および分離レベル isolation を設定します。
bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )\nローカルまたはリモートサーバのデータベースを開始します。
bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )\nローカルまたはリモートサーバのデータベースを停止します。
string fbsql_table_name ( resource $result , int $index )\nfbsql_table_name() は、指定した結果セット result から現在のテーブル名を取得します。\nfbsql_num_rows() 関数を使用して、 現在の結果ポインタ内のテーブルの数を判断します。
string fbsql_table_name ( resource $result , int $index )\nfbsql_table_name() は、指定した結果セット result から現在のテーブル名を取得します。\nfbsql_num_rows() 関数を使用して、 現在の結果ポインタ内のテーブルの数を判断します。
string fbsql_username ( resource $link_identifier [, string $username ] )\n接続で使用するユーザ名を取得あるいは設定します。
bool fbsql_warnings ([ bool $OnOff ] )\nFrontBase の警告を有効または無効にします。
bool fclose ( resource $handle )\nhandle が指しているファイルをクローズします。
bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )\nスクリプトを FDF に追加します。Acrobat は、FDF が読み込まれた際に それをドキュメントレベルのスクリプトとして追加します。
bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void fdf_close ( resource $fdf_document )\nFDF ドキュメントを閉じます。
resource fdf_create ( void )\n新規 FDF ドキュメントを作成します。\nこの関数は、PDF ドキュメントの入力フィールドにデータを書きこみたい場合に必要です。
bool fdf_enum_values ( resource $fdf_document , callback $function [, mixed $userdata ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int fdf_errno ( void )\n直近の FDF 関数コールによって設定されたエラーコードを取得します。\nエラーの内容についてのテキストを取得するには fdf_error() を使用します。
string fdf_error ([ int $error_code ] )\nerror_code で指定したエラーコードについての説明テキストを取得します。
bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )\nfield の外観 (つまり /AP キーの値) を取得し、ファイルに保存します。
array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )\n「ファイル選択」フィールド fieldname によって アップロードされたファイルを展開し、それを savepath に保存します。
string fdf_get_encoding ( resource $fdf_document )\n/Encoding キーの値を取得します。
string fdf_get_file ( resource $fdf_document )\n/F キーの値を取得します。
int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string fdf_get_status ( resource $fdf_document )\n/STATUS キーの値を取得します。
mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which ] )\n指定したフィールドの値を取得します。
string fdf_get_version ([ resource $fdf_document ] )\n指定したドキュメントの FDF バージョン、 あるいはパラメータを指定しなかった場合はツールキット API のバージョンを返します。
void fdf_header ( void )\nこの関数は、簡便に FDF の出力に適当な HTTP ヘッダを付加できるよう 用意されており、Content-type: を application/vnd.fdf に設定します。
string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )\n指定したフィールドの後のフィールドの名前を返します。 この名前をその他の関数で使用します。
resource fdf_open_string ( string $fdf_data )\n文字列からデータを読み込みます。\nfdf_open_string() を $HTTP_FDF_DATA とあわせて使用することで、リモート クライアントからの FDF フォーム入力を処理することが可能です。
resource fdf_open ( string $filename )\nフォームデータを含むファイルをオープンします。\nfdf_open_string() を用いて、 PDF フォームの POST リクエストを処理することもできます。
bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string fdf_save_string ( resource $fdf_document )\nFDF ドキュメントを文字列として返します。
bool fdf_save ( resource $fdf_document [, string $filename ] )\nFDF ドキュメントを保存します。
bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )\nフィールドの外観 (すなわち、/AP キーの値) を設定します。
bool fdf_set_encoding ( resource $fdf_document , string $encoding )\nFDF ドキュメントの文字エンコーディングを設定します。
bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )\nフォームの結果を表示する PDF ドキュメントとして、もとのフォームとは別のものを指定します。
bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )\n指定したフィールドのフラグを設定します。
bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )\n指定したフィールドの javascript アクションを設定します。
bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )\n指定したフィールドのオプションを設定します。
bool fdf_set_status ( resource $fdf_document , string $status )\n/STATUS キーの値を設定します。 クライアントが FDF とともにステータスセットを受信すると、その内容を アラートボックスに表示します
bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )\n指定したフィールドの投稿フォームアクションを設定します。
bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )\nfdf_save_file() で定義した PDF の結果を出力する 対象のフレームを設定します。
bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )\n指定したフィールドに値 value を設定します。
bool fdf_set_version ( resource $fdf_document , string $version )\n指定したドキュメントの FDF バージョンを version に設定します。\nこの拡張モジュールが提供する機能のうちのいくつかは、新しいバージョンの FDF でのみ動作します。
bool feof ( resource $handle )\nファイルポインタがファイル終端に達しているかどうかを調べます。
bool fflush ( resource $handle )\nこの関数は、バッファリングされた全ての出力をファイルファイルハンドル handle が指すリソースに強制的に書き込みます。
string fgetc ( resource $handle )\n指定したファイルポインタから 1 文字読み出します。
array fgetcsv ( resource $handle [, int $length [, string $delimiter [, string $enclosure [, string $escape ]]]] )\nfgets() に動作は似ていますが、 fgetcsv() は行を CSV フォーマットのフィールドとして読込み処理を行い、 読み込んだフィールドを含む配列を返すという違いがあります。
string fgets ( resource $handle [, int $length ] )\nファイルポインタから 1 行取得します。
string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )\nfgets() と同じですが、 fgetss() は読み込んだテキストから HTML および PHP のタグを取り除こうとすることが異なります。
bool file_exists ( string $filename )\nファイルあるいはディレクトリが存在するかどうかを調べます。
string file_get_contents ( string $filename [, int $flags = 0 [, resource $context [, int $offset = -1 [, int $maxlen = -1 ]]]] )\nこの関数は file() と似ていますが、 offset で指定した場所から開始し maxlen バイト分だけ ファイルの内容を文字列に読み込むという点が異なります。 失敗した場合、file_get_contents() は FALSE を返します。\nfile_get_contents()はファイルの内容を文字列に読み込む 方法として好ましいものです。もしOSがサポートしていれば パフォーマンス向上のためにメモリマッピング技術が使用されます。
int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )\nこの関数は、fopen()、fwrite()、 fclose() を続けてコールしてデータをファイルに書き込むのと等価です。\nfilename が存在しない場合はファイルを作成します。 存在する場合はそのファイルを上書きします。ただし FILE_APPEND フラグが設定されている場合は別です。
array file ( string $filename [, int $flags = 0 [, resource $context ]] )\nファイル全体を配列に読み込みます。
int fileatime ( string $filename )\n指定したファイルの最終アクセス時刻を取得します。
int filectime ( string $filename )\nファイルの inode 変更時刻を取得します。
int filegroup ( string $filename )\nファイルのグループを取得します。返り値は、数値形式のグループ ID です。 グループ名を取得するには posix_getgrgid() を使用します。
int fileinode ( string $filename )\nファイルの inode を取得します。
int filemtime ( string $filename )\nこの関数は、ファイルのブロックデータが書き込まれた時間を返します。 これは、ファイルの内容が変更された際の時間です。
int fileowner ( string $filename )\nファイルの所有者を取得します。
int fileperms ( string $filename )\n指定したファイルのパーミッションを取得します。
int filepro_fieldcount ( void )\nオープンした filePro データベースのフィールド（カラム）の数を返します。
string filepro_fieldname ( int $field_number )\nfield_number に対応するフィールド名を返します。
string filepro_fieldtype ( int $field_number )\nfield_number に対応した編集フィールド型を返します。
int filepro_fieldwidth ( int $field_number )\nfield_number に対応するフィールドの幅を返します。
string filepro_retrieve ( int $row_number , int $field_number )\nデータベースの指定された位置から読み込んだデータを返します。
int filepro_rowcount ( void )\nオープンされた filePro データベースにおける行の数を返します。
bool filepro ( string $directory )\nこの関数は、map ファイルを読み込み、照合を行います。 続いて、フィールドの数および情報を保存します。\nデータベースのロックを行わないため、PHP でオープンしている間は、 filePro データベースの修正を避ける必要があります。
int filesize ( string $filename )\n指定したファイルのサイズを取得します。
string filetype ( string $filename )\n指定したファイルのタイプを返します。
bool filter_has_var ( int $type , string $variable_name )
int filter_id ( string $filtername )
mixed filter_input_array ( int $type [, mixed $definition ] )\nこの関数を使用すると、大量のデータを取得する際に filter_input() を繰り返しコールする必要がなくなるので便利です。
mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )
array filter_list ( void )
mixed filter_var_array ( array $data [, mixed $definition ] )\nこの関数を使用すると、大量の変数を取得する際に filter_var() を繰り返しコールする必要がなくなるので便利です。
mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )
string finfo_buffer ( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )\nfinfo\nstring buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )\nこの関数は、バイナリデータの情報を文字列形式で返すために使用します。
bool finfo_close ( resource $finfo )\nfinfo\n__destruct ( void )\nこの関数は、finfo_open() がオープンしたリソースを閉じます。
string finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )\nfinfo\nstring file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )\nこの関数は、ファイルについての情報を返すために使用します。
手続き型\nresource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )\nオブジェクト指向型 (コンストラクタ)\nfinfo\n__construct ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )\nこの関数は、magic データベースをオープンしてそのリソースを返します。
bool finfo_set_flags ( resource $finfo , int $options )\nfinfo\nbool set_flags ( int $options )\nこの関数は、さまざまな Fileinfo オプションを設定します。 finfo_open() やその他の Fileinfo 関数で、 オプションを直接指定することも可能です。
float floatval ( mixed $var )\nvar の float 値を返します。
bool flock ( resource $handle , int $operation [, int &$wouldblock ] )\nflock()により、(ほとんどの Unix や Windows さえ含む) ほとんど全てのプラットフォームで使用可能な簡易な読み手/書き手モデルが実現されます。\nロックの解放には fclose() でを使用します (これは、スクリプトが終了した場合にも自動的にコールされます)。\nPHP は、恣意的にファイルをロックする汎用の手段を提供します (これは、アクセスする全プログラムが同一のロックの方法を使用する必要があり、 そうでない場合は動作しないことを意味します)。 デフォルトでは、要求したロックが確保されるまでこの関数はブロックします。 (非 Windows プラットフォームでは) 以下で説明する LOCK_MB オプションでこの挙動を制御することができます。
float floor ( float $value )\n必要に応じて value を丸めることにより、 value をこえない最大の整数の値を返します。
void flush ( void )\nPHP および PHP が使っている (CGI, Web サーバなどの) バックエンドの書き込みバッファをフラッシュします。 それまでのすべての出力をユーザのブラウザに対して出力しようと試みますが、 注意すべき点があります。\nflush() はウェブサーバのバッファリング手法を上書きすることはできません。 また、クライアント側のブラウザでのバッファリングにはなんの影響も及ぼしません。 PHP のユーザレベルでの出力バッファリングの仕組みにも影響を及ぼしません。 つまり、もし ob 出力バッファを使用しているのなら ob_flush() と flush() の両方をコールしなければなりません。\nいくつかのサーバ、特に Win32 上ではスクリプトからの出力をブラウザに 結果を送信する前にスクリプトが終了するまでバッファに溜めることがあります。\nmod_gzip のような Apache 用のサーバモジュールはそれ自体がバッファリングを行います。 そのため、flush() をコールしても 即時にデータをクライアントに送信しないという結果につながります。\nブラウザ側で表示前に入力をバッファリングすることもあり得ます。 Netscape では例えば改行または開始タグを受信するまでテキストは バッファリングされ、最も外側のテーブルの </table> タグが現れるまでテーブルは描画されません。\nいくつかのバージョンの Microsoft Internet Explorer は、256 バイトの 出力を受けてからページを表示し始めます。このため、これらのブラウザに ページを表示させるには、フラッシュする前に余分な空白を送信する 必要があるかもしれません。
float fmod ( float $x , float $y )\n被除数（x ）を除数（y ） で割った余りを返します。余り（r）は、 整数 i を使用して x = i * y + r で定義されます。 y がゼロ以外の場合はr は x と同符号で、絶対値は y より小さくなります。
bool fnmatch ( string $pattern , string $string [, int $flags = 0 ] )\nfnmatch()はstring で指定された文字列が pattern で指定されたシェルワイルドカードにマッチするかどうかチェックします。
resource fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )\nfopen() は、filename で指定されたリソースをストリームに結び付けます。
mixed forward_static_call_array ( callback $function [, array $parameters ] )\nfunction パラメータで指定したユーザ定義の関数あるいはメソッドをコールします。 この関数はメソッドのコンテキストでコールしなければなりません。 クラスの外部で使用することはできません。 転送先のメソッドへのすべての引数は値渡しで、 call_user_func_array() と同様に配列で指定します。
mixed forward_static_call ( callback $function [, mixed $parameter [, mixed $... ]] )\nfunction パラメータで指定したユーザ定義の関数あるいはメソッドを、 それに続く引数を指定してコールします。この関数はメソッドのコンテキストでコールしなければなりません。 クラスの外部で使用することはできません。
int fpassthru ( resource $handle )\n与えられたファイルポインタを EOF まで読み、結果を出力バッファに書き出します。\nファイルに既にデータを書き終えている場合で ファイルポインタをファイルの先頭にリセットするには rewind() をコールする必要があります。\nファイルを更新したり特定のオフセットを探すのではなく 内容を出力バッファにダンプしたいだけの場合、 readfile() を使用することが可能です。 この場合、fopen() コールは必要ありません。
int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )\nformat によって作成された文字列を handle で指定したストリームに書き込みます。
int fputcsv ( resource $handle , array $fields [, string $delimiter [, string $enclosure ]] )\nfputcsv() は、行（fields 配列として渡されたもの）を CSV としてフォーマットし、それを handle で指定したファイルに書き込みます (いちばん最後に改行を追加します)。
int fwrite ( resource $handle , string $string [, int $length ] )\nfwrite()はstring の内容を handle が指しているファイル・ストリームに書き込みます。
string fread ( resource $handle , int $length )\nfread() は、handle が指すファイルポインタから最高 length バイト読み込みます。 以下のいずれかの条件を満たしたら、読み込みを終了します。    length バイトぶん読み込んだ     EOF (ファイルの終端) に達した     パケットが利用可能になった (ネットワークストリームの場合)     8192 バイトぶん読み込んだ (ユーザ定義ストリームをオープンした後)
int frenchtojd ( int $month , int $day , int $year )\n日付けをフランス革命暦からユリウス積算日に変換します。\nこれらのルーチンは、1から14年まで(グレゴリウス暦の1792年9月22日から 1806年9月22日)日付けのみを変換します。 この期間は、フランス革命暦が使用されていた期間を十分にカバーしています。
string fribidi_log2vis ( string $str , string $direction , int $charset )\n論理表記を物理表記に変換します。
mixed fscanf ( resource $handle , string $format [, mixed &$... ] )\n関数fscanf() は sscanf() に似ていますが、handle が指すファイルから入力を取得し、 指定したフォーマット format に基づき解釈を行います。 フォーマットについては sprintf() に解説されています。\nフォーマット文字列におけるあらゆる空白は 入力ストリームのあらゆる空白にマッチします。 これはつまりフォーマット文字列の\\t（タブ）すらも 入力ストリームの空白1個にマッチしてしまうことを意味します。\nfscanf() をコールするたびに、ファイルから 1 行ずつ読み込みます。
int fseek ( resource $handle , int $offset [, int $whence ] )\nhandle が指しているファイルのファイル位置識別子を ファイル・ストリーム中の offset バイト目に セットします。新規位置は、ファイルの先頭からのバイト数で 測られます。これは whence で指定した位置に offset を追加することにより得られます。
resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]] )\nhostname で指定したリソースへのソケット接続を開始します。\nサポートされるソケットトランスポートのリスト に記述されているように、PHP は Internet ドメインまたは Unix ドメインをサポートします。 サポートされるトランスポートのリストは、stream_get_transports() を使って取得することもできます。\nソケットはデフォルトでブロックモードで開かれます。 socket_set_blocking() を使用して、 非ブロックモードに切換えることができます。
array fstat ( resource $handle )\nファイルポインタhandle によりオープンされたファイルの統計情報を取得します。 この関数は関数stat()に似ていますが、 ファイル名の代わりにオープンされたファイルポインタを指定するところが異なります。
int ftell ( resource $handle )\nhandle ファイルの読み書き用ポインタの現在位置を返します。
int ftok ( string $pathname , string $proj )\nこの関数は、pathname で表される既存のアクセス可能なファイルおよびプロジェクト ID (proj ) を、shmop_open() やその他で使用する System V IPC キーに変換します。
bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )\nALLO コマンドを FTP サーバに送信し、 アップロードされるファイルのためのスペースを確保します。
bool ftp_cdup ( resource $ftp_stream )\n親ディレクトリに移動します。
bool ftp_chdir ( resource $ftp_stream , string $directory )\nカレントディレクトリを、指定した場所に移動します。
int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )\n指定したリモートファイルのパーミッションを mode に設定します。
bool ftp_close ( resource $ftp_stream )\nftp_close() は、指定されたリンク ID を閉じて resource を開放します。
resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )\nftp_connect() は、指定した host への FTP 接続をオープンします。
bool ftp_delete ( resource $ftp_stream , string $path )\nftp_delete() は、path で指定したファイルを FTP サーバから削除します。
bool ftp_exec ( resource $ftp_stream , string $command )\nFTP サーバに SITE EXEC command リクエストを 送信します。
bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )\nftp_fget() は、FTP サーバから remote_file を取得し、指定したファイルポインタ fp に書きこみます。
bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )\nftp_fput() は、ファイルポインタが指すデータを FTP サーバ上のリモートファイルへアップロードします。
mixed ftp_get_option ( resource $ftp_stream , int $option )\nこの関数は、指定した FTP 接続について option の値を返します。
bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )\nftp_get() は FTP サーバからリモートファイルを取得し、 それをローカルファイルに保存します。
bool ftp_login ( resource $ftp_stream , string $username , string $password )\n指定した FTP ストリームにログインします。
int ftp_mdtm ( resource $ftp_stream , string $remote_file )\nftp_mdtm() はリモートファイルが最後に更新された時刻を取得します。
string ftp_mkdir ( resource $ftp_stream , string $directory )\nFTP サーバ上に、指定した directory を作成します。
int ftp_nb_continue ( resource $ftp_stream )\n非ブロッキングモードで、ファイルの取得/送信を継続します。
int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )\nftp_nb_fget() は、FTP サーバからリモートファイルを取得します。\nftp_fget() との違いは、この関数が 非同期処理でファイルを取得するということです。そのため、 ファイルをダウンロードしている最中に別の処理を行うことができます。
int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )\nftp_nb_fput() は、ファイルポインタが指すデータを FTP サーバ上のリモートファイルへアップロードします。\nftp_fput() との違いは、この関数が 非同期処理でファイルをアップロードするということです。そのため、 ファイルをアップロードしている最中に別の処理を行うことができます。
int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )\nftp_nb_get() は FTP サーバからリモートファイルを取得し、 それをローカルファイルに保存します。\nftp_get() との違いは、この関数が 非同期処理でファイルを取得するということです。そのため、 ファイルをダウンロードしている最中に別の処理を行うことができます。
int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )\nftp_nb_put() はローカルファイルを FTP サーバに保存します。\nftp_put() との違いは、この関数が 非同期処理でファイルをアップロードするということです。そのため、 ファイルをアップロードしている最中に別の処理を行うことができます。
array ftp_nlist ( resource $ftp_stream , string $directory )
bool ftp_pasv ( resource $ftp_stream , bool $pasv )\nftp_pasv() はパッシブモードをオンまたはオフにします。 パッシブモードでは、データ接続はサーバではなくクライアントにより 初期化されます。クライアントがファイアウォールの向こうにある場合に 必要となるでしょう。\nftp_pasv() をコールできるのは、 ログインに成功した後だけであることに注意しましょう。 それ以外の場合は、この関数のコールは失敗します。
bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )\nftp_put() ローカルファイルを FTP サーバに保存します。
string ftp_pwd ( resource $ftp_stream )
bool ftp_close ( resource $ftp_stream )\nftp_close() は、指定されたリンク ID を閉じて resource を開放します。
array ftp_raw ( resource $ftp_stream , string $command )\n任意の command を FTP サーバに送信します。
array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = false ] )\nftp_rawlist() は、FTP LIST コマンドを実行し、結果を配列として返します。
bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )\nftp_rename() は FTP サーバ上のファイルやディレクトリの 名前を変更します。
bool ftp_rmdir ( resource $ftp_stream , string $directory )\nFTP サーバ上の、指定した directory を削除します。
bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )\nこの関数は、指定した FTP ストリームに関してのさまざまな実行時オプションを 制御します。
bool ftp_site ( resource $ftp_stream , string $command )\nftp_site() は、指定された SITE コマンドを FTP サーバに送信します。\nSITE コマンドの規格は統一されていないため、 サーバにより仕様が異なります．ファイルのパーミッションや グループメンバーの設定のような処理を行う際には有用です。
int ftp_size ( resource $ftp_stream , string $remote_file )\nftp_size() は指定されたファイルのサイズを バイト数で返します。
resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )\nftp_ssl_connect() は、指定した host への SSL-FTP 接続をオープンします。
string ftp_systype ( resource $ftp_stream )\nリモート FTP サーバのシステム型 ID を返します。
bool ftruncate ( resource $handle , int $size )\nファイルポインタhandle を引数とし、 ファイルを指定した長さ、サイズに丸めます。
mixed func_get_arg ( int $arg_num )\nユーザが定義した関数の引数リストから、指定した引数を取得します。\nこの関数は、 func_num_args()および func_get_args()と組み合わせて使用され、これにより ユーザ定義の関数が可変長の引数リストをとることができるようになります。
array func_get_args ( void )\n関数の引数リストを配列で取得します。\nこの関数は func_num_args() および func_get_arg() と組み合わせて使用され、 これによりユーザ定義の章において可変長の引数リストを使用することができるようになります。
int func_num_args ( void )\n関数に渡された引数の数を取得します。\nこの関数は func_get_arg() および func_get_args() と組み合わせて使用され、 ユーザ定義関数において可変長の引数リストを使用することができるようになります。
bool function_exists ( string $function_name )\n組み込みの内部関数およびユーザ定義関数の中から、 function_name で指定した名前の関数を探します。
int fwrite ( resource $handle , string $string [, int $length ] )\nfwrite()はstring の内容を handle が指しているファイル・ストリームに書き込みます。
int gc_collect_cycles ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nすべての既存ガベージサイクルを強制的に収集します。
void gc_disable ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n循環参照コレクタを無効にします。
void gc_enable ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n循環参照コレクタを有効にします。
bool gc_enabled ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n循環参照コレクタの状態を返します。
array gd_info ( void )\nインストールされている GD ライブラリのバージョンとスペックに関する情報を取得します。
string geoip_continent_code_by_name ( string $hostname )\ngeoip_continent_code_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する二文字の大陸コードを返します。
string geoip_country_code_by_name ( string $hostname )\ngeoip_country_code_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する二文字の国コードを返します。
string geoip_country_code3_by_name ( string $hostname )\ngeoip_country_code3_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する三文字の国コードを返します。
string geoip_country_name_by_name ( string $hostname )\ngeoip_country_name_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する完全な国名を返します。
string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )\ngeoip_database_info() 関数は、 GeoIP データベースのバージョンを返します。 このバージョンはバイナリファイルの内部で定義されています。\nこの関数を引数なしでコールすると、GeoIP Free Country Edition のバージョンを返します。 ents, it returns the version of the GeoIP Free Country Edition.
bool geoip_db_avail ( int $database )\ngeoip_db_avail() 関数は、対応する GeoIP データベースが存在し、ディスク上にオープンできるかどうかを調べます。\nこれは、そのファイルが適切なデータベース形式かどうかを調べるものではありません。 単にそのファイルが読み込み可能かどうかを調べるだけです。
string geoip_db_filename ( int $database )\ngeoip_db_filename() 関数は、 対応する GeoIP データベースのファイル名を返します。\nこれは、そのファイルが存在するかどうかを表すものではありません。 単に、ライブラリがデータベースを探す先を返すだけのものです。
array geoip_db_get_all_info ( void )\ngeoip_db_get_all_info() 関数は、 すべての GeoIP データベース形式についての詳細情報を多次元配列で返します。\nこの関数は、データベースがインストールされていない場合でも使用可能です。 その場合は、使用できないことが返されます。\n返される連想配列のキーは、次のようになります。\n&quot;available&quot; -- DB が使用可能かどうか (geoip_db_avail() を参照ください)     &quot;description&quot; -- データベースについての説明     &quot;filename&quot; -- ディスク上でのデータベースのファイル名 (geoip_db_filename() を参照ください)
int geoip_id_by_name ( string $hostname )\ngeoip_id_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する国および地域を返します。\n返り値は数値で、以下の定数と比較できます。\nGEOIP_UNKNOWN_SPEED     GEOIP_DIALUP_SPEED     GEOIP_CABLEDSL_SPEED     GEOIP_CORPORATE_SPEED
string geoip_isp_by_name ( string $hostname )\ngeoip_isp_by_name() 関数は、 IP アドレスに対応するインターネットサービスプロバイダ (ISP) 名を返します。\n現在この関数を使用できるのは、商用の GeoIP ISP Edition を購入した人だけです。 適切なデータベースが見つからない場合には警告が発生します。
string geoip_org_by_name ( string $hostname )\ngeoip_org_by_name() 関数は、 その IP アドレスが割り当てられている組織の名前を返します。\n現在この関数を使用できるのは、商用の GeoIP Organization, ISP あるいは AS Edition を購入した人だけです。 適切なデータベースが見つからない場合には警告が発生します。
array geoip_record_by_name ( string $hostname )\ngeoip_record_by_name() 関数は、 ホスト名あるいは IP アドレスに対応するレコード情報を返します。\nこの関数は、GeoLite City Edition および商用の GeoIP City Edition のどちらでも使用可能です。 適切なデータベースが見つからない場合には警告が発生します。\n返される連想配列には、以下のようなさまざまな名前のキーが含まれます。\n&quot;continent_code&quot; -- 二文字の大陸コード (バージョン 1.0.4 以降で libgeoip 1.4.3 以降を使用した場合)     &quot;country_code&quot; -- 二文字の国コード (geoip_country_code_by_name() を参照ください)     &quot;country_code3&quot; -- 三文字の国コード (geoip_country_code3_by_name() を参照ください)     &quot;country_name&quot; -- 国名 (geoip_country_name_by_name() を参照ください)     &quot;region&quot; -- 地域コード (例: カリフォルニアなら CA)     &quot;city&quot; -- 市     &quot;postal_code&quot; -- 郵便番号、FSA あるいは Zip コード     &quot;latitude&quot; -- 緯度 (符号付き浮動小数点形式)     &quot;longitude&quot; -- 経度 (符号付浮動小数点形式)     &quot;dma_code&quot; -- Designated Market Area コード (アメリカおよびカナダのみ)     &quot;area_code&quot; -- PSTN エリアコード (例: 212)
array geoip_region_by_name ( string $hostname )\ngeoip_region_by_name() 関数は、 ホスト名あるいは IP アドレスに対応する国および地域を返します。\n現在この関数を使用できるのは、商用の GeoIP Region Edition を購入した人だけです。 適切なデータベースが見つからない場合には警告が発生します。\n返される連想配列には、以下のようなさまざまな名前のキーが含まれます。\n&quot;country_code&quot; -- 二文字の国コード (geoip_country_code_by_name() を参照ください)     &quot;region&quot; -- 地域コード (例: カリフォルニアなら CA)
string geoip_region_name_by_code ( string $country_code , string $region_code )\ngeoip_region_name_by_code() 関数は、 国コードと地域コードの組み合わせに対応する地域名を返します。\nアメリカの場合、地域コードは各州の名前を二文字で略したものとなります。 カナダの場合、地域コードは Canada Post による二文字の州コードに対応します。\nそれ以外の場所では、GeoIP は FIPS 10-4 コードを用いて地域を表します。 FIPS 10-4 コードの詳細な一覧は &raquo; http://www.maxmind.com/app/fips10_4 で確認できます。\nこの関数は、GeoIP Library バージョン 1.4.1 以降を使っている場合に使用可能です。 データは直接 GeoIP Library から受け取り、データベースは使用しません。
string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )\ngeoip_time_zone_by_country_and_region() 関数は、 国コードと地域コードの組み合わせに対応するタイムゾーンを返します。\nアメリカの場合、地域コードは各州の名前を二文字で略したものとなります。 カナダの場合、地域コードは Canada Post による二文字の州コードに対応します。\nそれ以外の場所では、GeoIP は FIPS 10-4 コードを用いて地域を表します。 FIPS 10-4 コードの詳細な一覧は &raquo; http://www.maxmind.com/app/fips10_4 で確認できます。\nこの関数は、GeoIP Library バージョン 1.4.1 以降を使っている場合に使用可能です。 データは直接 GeoIP Library から受け取り、データベースは使用しません。
mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )\nユーザのブラウザの機能を調べます。これは、browscap.ini ファイルのブラウザ情報を調べることにより行います。
string get_called_class ( void )\n静的メソッドのコール元のクラス名を取得します。
string get_cfg_var ( string $option )\nPHP の設定オプション option の値を取得します。\nこの関数は、 PHP がコンパイルされた際にセットされた設定情報や Apache の設定ファイルから読んだ設定情報は返しません。\nシステムが 設定ファイル を使用しているかどうかを確認するには、cfg_file_path の設定値を取得してみてください。 この値が利用可能なら、設定ファイルが使用されています。
array get_class_methods ( mixed $class_name )\nクラスメソッドの名前を取得します。
array get_class_vars ( string $class_name )\n指定したクラスのデフォルトプロパティを取得します。
string get_class ([ object $object ] )\n指定した object のクラス名を取得します。
string get_current_user ( void )\n現在の PHP スクリプトの所有者の名前を返します。
array get_declared_classes ( void )\nGets the declared classes.
array get_declared_interfaces ( void )\n宣言されているインターフェイスを取得します。
array get_defined_constants ([ bool $categorize ] )\n現在定義されている全ての定数の名前と値を返します。返される値には、 拡張モジュールにより作成された定数や define() 関数で作成された定数も含まれます。
array get_defined_functions ( void )\nすべての定義済み関数を配列で返します。
array get_defined_vars ( void )\nこの関数は、環境変数、サーバ変数、get_defined_vars() がコールされたスコープ内でユーザが定義した変数を含む、全ての の定義済の変数のリストを有する多次元の配列を返します。
array get_extension_funcs ( string $module_name )\nこの関数は、module_name で示したモジュールで定義された全ての関数の名前を返します。
array get_headers ( string $url [, int $format = 0 ] )\nget_headers() は、HTTP リクエストに対するレスポンス内で サーバによって送出されたヘッダの配列を返します。
array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $quote_style = ENT_COMPAT ]] )\nget_html_translation_table() は、 htmlspecialchars() および htmlentities() で内部的に使用される変換テーブルを返します。
string get_include_path ( void )\n現在の include_path 設定オプションを取得します。
array get_included_files ( void )\nこの関数は、include(), include_once(), require(), require_once() によりスクリプトにロードされた すべてのファイルの名前を取得します。
array get_loaded_extensions ([ bool $zend_extensions = false ] )\nこの関数は、PHPインタプリタにコンパイル、 ロードされている全てのモジュールの名前を返します。
int get_magic_quotes_gpc ( void )\nmagic_quotes_gpc の現在の設定を返します。\nmagic_quotes_gpcは 実行時にセットしても反映されないことに 留意してください。\nmagic_quotes についての詳細な情報は セキュリティの欄 を参照してください。
int get_magic_quotes_runtime ( void )\nmagic_quotes_runtime の現在アクティブな値を返します。
array get_meta_tags ( string $filename [, bool $use_include_path = false ] )\nfilename 内の各行をパースし <meta> タグ内の情報を配列として返します。 </head> でパースを終了します。
array get_object_vars ( object $object )\n指定した object について、 そのスコープ内でアクセス可能な非 static プロパティを取得します。
string get_parent_class ([ mixed $object ] )\nオブジェクトあるいはクラスの親クラスの名前を取得します。
array get_included_files ( void )\nこの関数は、include(), include_once(), require(), require_once() によりスクリプトにロードされた すべてのファイルの名前を取得します。
string get_resource_type ( resource $handle )\nこの関数は、指定したリソースの型を取得します。
array getallheaders ( void )\nすべての HTTP ヘッダを現在のリクエストから取得します。\nこの関数は、 apache_request_headers()のエイリアスです。 この関数は、カレントのリクエストにおける全てのHTTPヘッダーを有する 連想配列を返します。この関数の動作に関する詳細については、 apache_request_headers()のドキュメントを参照して ください。\nこの関数は、 PHP が apache モジュールとしてインストールされた場合のみサポートされます。
string getcwd ( void )\nカレントのワーキングディレクトリを返します。
array getdate ([ int $timestamp = time() ] )\ntimestamp に関する日付情報を有する連想配列を返します。 timestamp が指定されない場合は、現在のローカルな時間に関する情報を返します。
string getenv ( string $varname )\n環境変数の値を取得します。\nphpinfo() を使用して全ての環境変数の一覧を見る ことができます。 &raquo; CGI specification 、特に &raquo; 環境変数のページを参照すること により、それらの参照する環境変数の役割の多くを知ることができます。
string gethostbyaddr ( string $ip_address )\nip_address で指定したインターネットホストのホスト名を返します。
string gethostbyname ( string $hostname )\nhostname で指定したインターネットホストの IPv4 アドレスを返します。
array gethostbynamel ( string $hostname )\nhostname で指定したインターネットホストを検索して得られた IPv4 アドレスのリストを返します。
string gethostname ( void )\ngethostname() 関数は、ローカルのマシンに設定されている標準的なホスト名を取得します。
array getimagesize ( string $filename [, array &$imageinfo ] )\ngetimagesize() 関数は任意の画像ファイルの大きさを決定し、 ファイルの型と高さ/幅を表す文字列を返します。これらは HTML の <IMG> タグや HTTP の content type として使用できます。\ngetimagesize() は、 imageinfo パラメータで追加情報を返します。
int getlastmod ( void )\n現在のページの最終更新時刻を取得します。\n別のファイルの最終更新時刻が知りたい場合は、 filemtime() を使用してください。
bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )\nhostname に対応する MX レコードを DNS から探します。
int getmygid ( void )\n現在のスクリプトのグループ ID を取得します。
int getmyinode ( void )\n現在のスクリプトの inode を取得します。
int getmypid ( void )\n現在の PHP プロセスの ID を取得します。
int getmyuid ( void )\n現在のスクリプトのユーザ ID を取得します。
array getopt ( string $options [, array $longopts ] )\nスクリプトに渡されたオプションをパースします。
int getprotobyname ( string $name )\ngetprotobyname()は、プロトコル name のプロトコル番号を /etc/protocols から取得して返します。
string getprotobynumber ( int $number )\ngetprotobynumber() は、 /etc/protocols に基づき プロトコル番号 number が指すプロトコル名を返します。
int getrandmax ( void )\nrand() をコールすることにより得られる最大の値を返します。
array getrusage ([ int $who = 0 ] )\nこの関数は、getrusage(2) へのインターフェースです。 システムコールから返されたデータを含む連想配列を返します。
int getservbyname ( string $service , string $protocol )\ngetservbyname() は、 /etc/services に基づき 指定したプロトコル protocol に関して service に対応するインターネットポートを返します。
string getservbyport ( int $port , string $protocol )\ngetservbyport() は、 /etc/services に基づき 指定したプロトコル protocol に関してポート port に関連するインターネットサービスを返します。
string gettext ( string $message )\n現在のドメインのメッセージを参照します。
mixed gettimeofday ([ bool $return_float ] )\nこの関数は、gettimeofday(2) へのインターフェイスです。 この関数は、システムコールから返されたデータを有する連想配列を返します。
string gettype ( mixed $var )\nPHP 変数 var の型を返します。\n警告\n返された文字列は将来のバージョンで変更される可能性があるので、 gettype() を使用して型を調べることはしないでください。 更に、この関数は文字列比較を行うため、処理が遅くなります。\n代わりに is_* 関数を使用してください。
array glob ( string $pattern [, int $flags = 0 ] )\nglob() 関数は libc の glob() 関数で使われるルールに基づいて pattern にマッチする全てのパス名を検索します。 ルールは、一般のシェルで使われるルールと似ています。
string gmdate ( string $format [, int $timestamp ] )\ndate() 関数と同じですが、返される時刻が グリニッジ標準時 (GMT) であるところが異なります。
int gmmktime ([ int $hour = gmdate(&quot;H&quot;) [, int $minute = gmdate(&quot;i&quot;) [, int $second = gmdate(&quot;s&quot;) [, int $month = gmdate(&quot;n&quot;) [, int $day = gmdate(&quot;j&quot;) [, int $year = gmdate(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]] )\n指定されるパラメータが GMT 日付を表すこと以外は mktime() と同じです。 gmmktime() は内部で mktime() を使用しているので、ローカル時刻として有効な値のみが使用可能です。\nmktime() と同様に、 引数は右から順に省略することができます。 省略された引数は、GMT の日付と時刻に従って、現在の値にセットされます。
resource gmp_abs ( resource $a )\nある数の絶対値を返します。
resource gmp_add ( resource $a , resource $b )\n2 つの数を加算します。
resource gmp_and ( resource $a , resource $b )\n2 つの GMP 数のビット AND を計算します。
void gmp_clrbit ( resource $a , int $index )\na のビット index をクリア (0 に設定) します。index は 0 から始まります。
int gmp_cmp ( resource $a , resource $b )\nふたつの数を比較します。
resource gmp_com ( resource $a )\na について、1 の補数を返します。
resource gmp_div_q ( resource $a , resource $b [, int $round = GMP_ROUND_ZERO ] )\na を b で割り、 結果を整数で返します。
array gmp_div_qr ( resource $n , resource $d [, int $round = GMP_ROUND_ZERO ] )\nこの関数は、n を d で割ります。
resource gmp_div_r ( resource $n , resource $d [, int $round = GMP_ROUND_ZERO ] )\nn を d で整数として割った際の余りを計算します。余りは、引数 n がゼロでないばあいに、これと同じ符号を有します。
resource gmp_div_q ( resource $a , resource $b [, int $round = GMP_ROUND_ZERO ] )\na を b で割り、 結果を整数で返します。
resource gmp_divexact ( resource $n , resource $d )\n高速な &quot;exact division&quot; アルゴリズムを使用して n を d で割ります。 この関数は、n が d で割り切れることがわかっている場合にのみ正確な結果を出力します。
resource gmp_fact ( mixed $a )\na の階乗 (a!) を計算します。
resource gmp_gcd ( resource $a , resource $b )\na と b の最大公約数を計算します。 引数のどちらかまたは両方が負の場合でも結果は常に正となります。
array gmp_gcdext ( resource $a , resource $b )\na*s + b*t = g = gcd(a,b) となるような g, s, t を計算します。ただし、gcd は最大公約数です。g, s, t を要素とする配列を返します。\nこの関数は、2 変数の線形不定方程式 (linear Diophantine equations) を解く際に使用することが可能です。 この方程式は、a*x + b*y = c のような形式で、 整数のみを解とするものです。 詳細な情報は、&raquo; MathWorld の &quot;Diophantine Equation&quot; についてのページを参照ください。
int gmp_hamdist ( resource $a , resource $b )\na と b の間のハミング距離を返します。オペランドは共に非負とする必要があります。
resource gmp_init ( mixed $number [, int $base = 0 ] )\n整数または文字列から GMP 数を生成します。
int gmp_intval ( resource $gmpnumber )\nこの関数により、GMP 数を整数に変換することが可能になります。
resource gmp_invert ( resource $a , resource $b )\nb を法とした a の逆を計算します。
int gmp_jacobi ( resource $a , resource $p )\na および p の &raquo; ヤコビ記号 を計算します。p は正の奇数である必要があります。
int gmp_legendre ( resource $a , resource $p )\na と p の &raquo; ルジェンドル記号 を計算します。p は、正の奇数である必要があります。
resource gmp_mod ( resource $n , resource $d )\nd を法として n を計算します。結果は常に非負であり、 d の符号は無視されます。
resource gmp_mul ( resource $a , resource $b )\na と b をかけ、 結果を返します。
resource gmp_neg ( resource $a )\nある数の符号を反転したものを返します。
resource gmp_nextprime ( int $a )\n次の素数を見つけます。
resource gmp_or ( resource $a , resource $b )\n2 つの GMP 数のビット OR を計算します。
bool gmp_perfect_square ( resource $a )\nその数が平方数であるかどうかを調べます。
int gmp_popcount ( resource $a )\nセットされているビットの数を返します。
resource gmp_pow ( resource $base , int $exp )\nbase の exp 乗を計算します。
resource gmp_powm ( resource $base , resource $exp , resource $mod )\nmod を法として (base の exp 乗) を計算します。 exp が負の場合、結果は未定義(undefined) となります。
int gmp_prob_prime ( resource $a [, int $reps = 10 ] )\nこの関数は、Miller-Rabin の予測テストを使用して、 その数が素数かどうかを調べます。
resource gmp_random ([ int $limiter = 20 ] )\n乱数を生成します。乱数の範囲は、ゼロから limiter * limb のビット数となります。 limiter が負の場合、 負の数が生成されます。\nlimb は GMP の内部機構です。limb のビット数は固定ではなく、 システムによって変化します。一般的には limb は 16 あるいは 32 ビットですが、それが保証されているわけではありません。
int gmp_scan0 ( resource $a , int $start )\nビット start から最上位ビットの方に、 最初のクリアビットが見付かるまで a をスキャンします。
int gmp_scan1 ( resource $a , int $start )\nビット start から最上位ビットの方に、 セットされているビットが最初に見付かるまで a をスキャンします。
void gmp_setbit ( resource $a , int $index [, bool $set_clear = true ] )\na のビット index を設定します。
int gmp_sign ( resource $a )\n数の符号を調べます。
resource gmp_sqrt ( resource $a )\na の平方根を計算します。
array gmp_sqrtrem ( resource $a )\nある数の平方根を余りつきで計算します。
string gmp_strval ( resource $gmpnumber [, int $base ] )\nGMP 数を base を基数とする文字列表現に変換します。 デフォルトの基数は 10 です。
resource gmp_sub ( resource $a , resource $b )\na から b を引いた結果を返します。
bool gmp_testbit ( resource $a , int $index )\n指定したビットが設定されているかどうかを調べます。
resource gmp_xor ( resource $a , resource $b )\n2 つの GMP 数のビット排他的論理和 (XOR) を計算します。
string gmstrftime ( string $format [, int $timestamp = time() ] )\nグリニッジ標準時を返すこと以外は、 strftime() と同じ動作をします。例えば、東部標準時 (GMT -0500) で実行した場合、以下の最初の行は &quot;Dec 31 1998 20:00:00&quot; を出力し、二行目は &quot;Jan 01 1999 01:00:00&quot; を出力します。
bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase )
bool gnupg_addencryptkey ( resource $identifier , string $fingerprint )
bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] )
bool gnupg_cleardecryptkeys ( resource $identifier )
bool gnupg_clearencryptkeys ( resource $identifier )
bool gnupg_clearsignkeys ( resource $identifier )
string gnupg_decrypt ( resource $identifier , string $text )\n事前に gnupg_adddecryptkey で設定されたキーを使用し、指定されたテキストを復号します。
array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext )\n指定したテキストを復号・検証し、署名の情報を返します。
string gnupg_encrypt ( resource $identifier , string $plaintext )\n事前に gnupg_addencryptkey で設定したキーを使用し、指定されたテキストを暗号化します。暗号化された テキストを返します。
string gnupg_encryptsign ( resource $identifier , string $plaintext )\n事前に gnupg_addsignkey および gnupg_addencryptkey で設定したキーを使用し、指定した plaintext を暗号化・署名します。暗号化・署名済みのテキストを返します。
string gnupg_export ( resource $identifier , string $fingerprint )\nキーの fingerprint をエクスポートします。
string gnupg_geterror ( resource $identifier )
int gnupg_getprotocol ( resource $identifier )
array gnupg_import ( resource $identifier , string $keydata )\nキー keydata をインポートし、インポート処理に ついての情報を配列で返します。
resource gnupg_init ( void )
array gnupg_keyinfo ( resource $identifier , string $pattern )
bool gnupg_setarmor ( resource $identifier , int $armor )\narmor 形式の出力を切り替えます。
void gnupg_seterrormode ( resource $identifier , int $errormode )\nerror_reporting のモードを設定します。
bool gnupg_setsignmode ( resource $identifier , int $signmode )\n署名方式を設定します。
string gnupg_sign ( resource $identifier , string $plaintext )\n事前に gnupg_addsignkey で設定したキーを使用して plaintext に署名し、 gnupg_setsignmode の設定に応じて署名済みテキストあるいは署名を返します。
array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] )\n指定した signed_text を検証し、署名についての情報を返します。
array gopher_parsedir ( string $dirent )\ngopher_parsedir() は、gopher フォーマットされたディレクトリエントリを連想配列に変換します。\ngopher は、リクエストに対して text/plain 形式の ドキュメントを返します。ディレクトリ（例えば / など）へのリクエストには 特別にエンコードされた一連の行を返し、その個々の行が 1 つのディレクトリ エントリあるいは情報行を表します。
手続き型\nstring grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start [, int &$next ]]] )\nデフォルトの書記素クラスタシーケンスをテキストバッファから取り出す関数です。 テキストは UTF-8 でエンコードされている必要があります。
手続き型\nint grapheme_stripos ( string $haystack , string $needle [, int $offset ] )\n大文字小文字を区別せず、文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つけます。
手続き型\nstring grapheme_stristr ( string $haystack , string $needle [, bool $before_needle ] )\n大文字小文字を区別せず、haystack 文字列の中で needle が最初に登場した場所以降の部分文字列を返します。
手続き型\nint grapheme_strlen ( string $input )\n書記素単位 (バイト数や文字数ではありません) で文字列の長さを取得します。
手続き型\nint grapheme_strpos ( string $haystack , string $needle [, int $offset ] )\n文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つけます。
手続き型\nint grapheme_strripos ( string $haystack , string $needle [, int $offset ] )\n大文字小文字を区別せず、文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つけます。
手続き型\nint grapheme_strrpos ( string $haystack , string $needle [, int $offset ] )\n文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つけます。
手続き型\nstring grapheme_strstr ( string $haystack , string $needle [, bool $before_needle ] )\nhaystack 文字列の中で needle が最初に登場した場所以降の部分文字列を返します。
手続き型\nint grapheme_substr ( string $string , int $start [, int $length ] )\n部分文字列を返します。
int gregoriantojd ( int $month , int $day , int $year )\n有効なグレゴリウス暦の範囲は紀元前 4714 年から紀元 9999 年までです。\nこのソフトウェアは日付けを全て紀元前 4714 年にさかのぼることが 出来ますが、この様な使い方は特に意味があるわけではありません。 グレゴリウス暦は 1582 年 10 月 15 日(ユリウス暦では 1582 年 10 月 5 日)まで制定されていませんでした。 この暦は、いくつかの国でもっと後まで受け入れられませんでした。 例えば、イギリスは 1752 年、ロシア(USSR)は 1918 年、ギリシャは 1923 年に 移行しました。 ほとんどのヨーロッパの国々では、グレゴリウス暦の前は ユリウス暦を使用していました。
string gupnp_context_get_host_ip ( resource $context )\nGet the IP address we advertise ourselves as using.
int gupnp_context_get_port ( resource $context )\nGet the port that the SOAP server is running on.
int gupnp_context_get_subscription_timeout ( resource $context )\nGet the event subscription timeout (in seconds), or 0 meaning there is no timeout.
bool gupnp_context_host_path ( resource $context , string $local_path , string $server_path )\nStart hosting local_path at server_path . Files with the path local_path .LOCALE (if they exist) will be served up when LOCALE is specified in the request&#039;s Accept-Language header.
resource gupnp_context_new ([ string $host_ip [, int $port ]] )\nCreate a new context with the specified host_ip and port.
void gupnp_context_set_subscription_timeout ( resource $context , int $timeout )\nSets the event subscription timeout (in seconds) to time out. Note that any client side subscriptions will automatically be renewed.
bool gupnp_context_timeout_add ( int $timeout , mixed $callback [, mixed $arg ] )\nSets a function to be called at regular intervals.
bool gupnp_context_unhost_path ( resource $context , string $server_path )\nStop hosting the file or folder at server_path .
bool gupnp_control_point_browse_start ( resource $cpoint )\nStart the search and calls user-defined callback.
bool gupnp_control_point_browse_stop ( resource $cpoint )\nStop the search and calls user-defined callback.
bool gupnp_control_point_callback_set ( resource $cpoint , int $signal , mixed $callback [, mixed $arg ] )\nSet control point callback function for signal.
resource gupnp_control_point_new ( resource $context , string $target )\nCreate a new control point with the specified target.
bool gupnp_device_action_callback_set ( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ] )\nSet device callback function for signal and action.
resource gupnp_device_info_get_service ( resource $root_device , string $type )\nGet the service with type or false if no such device was found.
array gupnp_device_info_get ( resource $root_device )\nGet info of root device.
bool gupnp_root_device_get_available ( resource $root_device )\nGet whether or not root_device is available (announcing its presence).
string gupnp_root_device_get_relative_location ( resource $root_device )\nGet the relative location of root device.
resource gupnp_root_device_new ( resource $context , string $location )\nCreate a new root device, automatically downloading and parsing location.
bool gupnp_root_device_set_available ( resource $root_device , bool $available )\nControls whether or not root_device is available (announcing its presence).
bool gupnp_root_device_start ( resource $root_device )\nStart root server&#039;s main loop.
bool gupnp_root_device_stop ( resource $root_device )\nStop root server&#039;s main loop.
mixed gupnp_service_action_get ( resource $action , string $name , int $type )\nRetrieves the specified action arguments.
bool gupnp_service_action_return_error ( resource $action , int $error_code [, string $error_description ] )\nReturn error code.
bool gupnp_service_action_return ( resource $action )\nReturn succesfully.
bool gupnp_service_action_set ( resource $action , string $name , int $type , mixed $value )\nSets the specified action return values.
bool gupnp_service_freeze_notify ( resource $service )\nCauses new notifications to be queued up until gupnp_service_thaw_notify() is called.
mixed gupnp_service_info_get_introspection ( resource $proxy [, mixed $callback [, mixed $arg ]] )\nGet resource introspection of service or register callback if corresponding parameter was passed.
array gupnp_service_info_get ( resource $proxy )\nGet full info of service.
array gupnp_service_introspection_get_state_variable ( resource $introspection , string $variable_name )\nReturns the state variable data by the name variable_name in this service.
bool gupnp_service_notify ( resource $service , string $name , int $type , mixed $value )\nNotifies listening clients that the property have changed to the specified values.
bool gupnp_service_proxy_action_get ( resource $proxy , string $action , string $name , int $type )\nSends action with parameters to the service exposed by proxy synchronously and get value.
bool gupnp_service_proxy_action_set ( resource $proxy , string $action , string $name , mixed $value , string $type )\nSends action with parameters to the service exposed by proxy synchronously and set value.
bool gupnp_service_proxy_add_notify ( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ] )\nSets up callback to be called whenever a change notification for variable is recieved.
bool gupnp_service_proxy_callback_set ( resource $proxy , int $signal , mixed $callback [, mixed $arg ] )\nSet service proxy callback for signal.
bool gupnp_service_proxy_get_subscribed ( resource $proxy )\nCheck whether subscription is valid to the service.
bool gupnp_service_proxy_remove_notify ( resource $proxy , string $value )\nCancels the variable change notification.
bool gupnp_service_proxy_set_subscribed ( resource $proxy , bool $subscribed )\n(Un)subscribes to the service.
bool gupnp_service_thaw_notify ( resource $service )\nSends out any pending notifications and stops queuing of new ones.
bool gzclose ( resource $zp )\n与えられた gz ファイルへのポインタを閉じます。
string gzcompress ( string $data [, int $level = -1 ] )\nこの関数は、ZLIB データフォーマットを用いて 与えられた文字列を圧縮します。\nZLIB 圧縮アルゴリズムについての詳細は、 &quot;&raquo; ZLIB Compressed Data Format Specification version 3.3&quot; (RFC 1950) を参照ください。
string gzdecode ( string $data [, int $length ] )\nこの関数は、入力された data をデコードしたものを返します。
string gzdeflate ( string $data [, int $level = -1 ] )\nこの関数は、DEFLATE データフォーマットを用いて 与えられた文字列を圧縮します。\nDEFLATE 圧縮アルゴリズムについての詳細は、 &quot;&raquo; DEFLATE Compressed Data Format Specification version 1.3&quot; (RFC 1951) を参照ください。
string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )\nこの関数は、入力 data を gzip プログラムの出力と互換性のある形式で圧縮 して返します。\nGZIPファイルフォーマットに関する詳細な情報については、次のドキュ メントを参照ください。 &raquo; GZIP file format specification version 4.3 (RFC 1952)
int gzeof ( resource $zp )\n与えられた GZ ファイルポインタが EOF (ファイル終端) を指すかどうかを調べます。
array gzfile ( string $filename [, int $use_include_path = 0 ] )\nファイルを配列にして返すこと以外は readgzfile() と同じです。
string gzgetc ( resource $zp )\n与えられた gz ファイルポインタから (非圧縮の) 1 文字を読み込み、これを含む 文字列を返します。
string gzgets ( resource $zp , int $length )\n与えられたファイルポインタから最大 length - 1 バイトの文字を読み込み、 これを含む (非圧縮の) 文字列を返します。 length - 1 バイトを読み込むか、改行または EOF になった場合、 (どれかが最初にきた時点で) 読み込みを終了します。
string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )\ngzgetss()は読み込んだテキストから HTML および PHP タグを全て取り除こうとすることを除いて、 gzgets()と同じです。
string gzinflate ( string $data [, int $length = 0 ] )\nこの関数は収縮された文字列を伸長します。
resource gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] )\n読み込みもしくは書き込みのために gzip (.gz) ファイルをオープンします。\ngzopen() は、gzip フォーマットでないファイルの読み込みについても使用することができます。 この場合、gzread()は、ファイルを解凍せずに直接読み 込まれます。
int gzpassthru ( resource $zp )\ngz ファイルポインタについて現在位置から EOF までデータを読み込み、 標準出力に (伸長された) 結果を書き込みます。
int gzwrite ( resource $zp , string $string [, int $length ] )\ngzwrite() は string の内容を与えられた gz ファイルに書き込みます。
string gzread ( resource $zp , int $length )\ngzread() は、最大 length バイトのデータを zp が指す gz ファイルポインタ から読み込みます。(伸長された) length バイトのデータが読み込まれたか、 EOF に達したとき、読み込みは終了します。
bool gzrewind ( resource $zp )\n与えられた gz ファイルポインタが指すファイルのファイル位置記述子を、 ファイルストリームの先頭にセットします。
int gzseek ( resource $zp , int $offset [, int $whence = SEEK_SET ] )\n与えられたファイルポインタが指すファイルのファイル位置記述子を、 ファイルストリーム上の与えられた offset バイトにセットします。 gzseek(zp, offset, SEEK_SET) を (C 言語において) コールするのと同じです。\nファイルが読み込み用にオープンされた場合、この関数は、 エミュレーションされますが、極端に遅くなる可能性があります。 ファイルを書き込み用にオープンした場合、 前方への移動のみがサポートされます。この場合、gzseek() は、新しい開始位置までゼロの並びのデータを圧縮します。
int gztell ( resource $zp )\n与えられたファイルポインタが指す位置、つまり、 圧縮されていないファイルストリームにおけるオフセット値を返します。
string gzuncompress ( string $data [, int $length = 0 ] )\nこの関数は圧縮された文字列を解凍します。
int gzwrite ( resource $zp , string $string [, int $length ] )\ngzwrite() は string の内容を与えられた gz ファイルに書き込みます。
void __halt_compiler ( void )\nコンパイラの実行を中止します。 これは、インストール用ファイルのようなデータを PHP スクリプトに埋め込んでいる場合に便利です。\nデータの開始位置（バイト値）は、定数 __COMPILER_HALT_OFFSET__ で定義されています。 これはファイル内で __halt_compiler() が使用されている場合にのみ存在します。
bool HaruAnnotation::setBorderStyle ( float $width , int $dash_on , int $dash_off )\nアノテーションの枠の形式を定義します。 この関数は、リンクアノテーションに対してのみ使用します。
bool HaruAnnotation::setHighlightMode ( int $mode )\nアノテーションをクリックした際の表示方法を定義します。 この関数は、リンクアノテーションに対してのみ使用します。
bool HaruAnnotation::setIcon ( int $icon )\nアノテーションアイコンの形式を定義します。 この関数は、テキストアノテーションに対してのみ使用します。
bool HaruAnnotation::setOpened ( bool $opened )\nアノテーションが初期状態で開いているかどうかを定義します。 この関数は、テキストアノテーションに対してのみ使用します。
bool HaruDestination::setFit ( void )\nページの表示を、ウィンドウにあわせるよう設定します。
bool HaruDestination::setFitB ( void )\nページの表示を、ページのバウンディングボックスをウィンドウにあわせるよう設定します。
bool HaruDestination::setFitBH ( float $top )\nページの表示を拡大し、バウンディングボックスの幅にあわせるようにします。 ページの上端の位置は top に設定します。
bool HaruDestination::setFitBV ( float $left )\nページの表示を拡大し、バウンディングボックスの高さにあわせるようにします。 ページの左端の位置は left に設定します。
bool HaruDestination::setFitH ( float $top )\nページの表示を、ウィンドウの幅にあわせるようにします。 ページの上端の位置は top に設定します。
bool HaruDestination::setFitR ( float $left , float $bottom , float $right , float $top )\nページの表示を、パラメータで指定した矩形にあわせるよう設定します。
bool HaruDestination::setFitV ( float $left )\nページの表示を、ウィンドウの高さにあわせるようにします。
bool HaruDestination::setXYZ ( float $left , float $top , float $zoom )\nページの表示方法を、三つのパラメータ left 、top および zoom で設定します。
object HaruDoc::addPage ( void )\n新しいページをドキュメントに追加します。
bool HaruDoc::addPageLabel ( int $first_page , int $style , int $first_num [, string $prefix ] )\n指定した範囲のページにおけるページラベルの形式を設定します。
void HaruDoc::__construct ( void )\n新しい HaruDoc のインスタンスを作成します。
object HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] )\n新しい HaruOutline のインスタンスを作成します。
object HaruDoc::getCurrentEncoder ( void )\nドキュメントが現在使用している HaruEncoder を取得します。
object HaruDoc::getCurrentPage ( void )\nドキュメントの現在のページを取得します。
object HaruDoc::getEncoder ( string $encoding )\n指定したエンコーディングの HaruEncoder のインスタンスを取得します。
object HaruDoc::getFont ( string $fontname [, string $encoding ] )\nHaruFont のインスタンスを取得します。
string HaruDoc::getInfoAttr ( int $type )\n指定したドキュメント属性の文字列値を取得します。
int HaruDoc::getPageLayout ( void )\n現在のページレイアウトを取得します。 とりうる値の一覧は HaruDoc::setPageLayout を参照ください。
int HaruDoc::getPageMode ( void )\n現在のページモードを取得します。 とりうる値の一覧については HaruDoc::setPageMode を参照ください。
int HaruDoc::getStreamSize ( void )\n一時ストリームの大きさを取得します。
object HaruDoc::insertPage ( object $page )\n新しいページを作成し、指定したページの直前に挿入します。
object HaruDoc::loadJPEG ( string $filename )\n指定した JPEG 画像を読み込みます。
object HaruDoc::loadPNG ( string $filename [, bool $deferred = false ] )\nPNG 画像を読み込みます。\nlibharu が libpng サポートを含めずにビルドされている場合は、 このメソッドをコールすると例外が発生します。
object HaruDoc::loadRaw ( string $filename , int $width , int $height , int $color_space )\nRAW 画像を読み込みます。
string HaruDoc::loadTTC ( string $fontfile , int $index [, bool $embed = false ] )\nTrueType コレクション (TTC) ファイルから、 指定したインデックスの TrueType フォントを読み込みます。
string HaruDoc::loadTTF ( string $fontfile [, bool $embed = false ] )\n指定した TTF ファイルを読み込み、(オプションで) そのデータをドキュメントに埋め込みます。
string HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] )\nType1 フォントを指定したファイルから読み込み、PDF ドキュメントに登録します。
bool HaruDoc::output ( void )\nドキュメントデータを標準出力に書き出します。
string HaruDoc::readFromStream ( int $bytes )\nデータを一時ストリームから読み込みます。
bool HaruDoc::resetError ( void )\nいったんエラーコードが設定されると、入出力処理を含む 大半の操作が実行できなくなります。 エラーへの対処を済ませたあとで処理を続けたい場合は、 この関数を実行してエラー状態をリセットする必要があります。
bool HaruDoc::resetStream ( void )\nドキュメントの一時ストリームを巻き戻します。
bool HaruDoc::save ( string $file )\nドキュメントを、指定したファイルに保存します。
bool HaruDoc::saveToStream ( void )\nドキュメントのデータを一時ストリームに保存します。
bool HaruDoc::setCompressionMode ( int $mode )\nドキュメントの圧縮モードを定義します。libharu が Zlib サポートなしでコンパイルされている場合は、この関数は常に HaruException をスローします。
bool HaruDoc::setCurrentEncoder ( string $encoding )\nドキュメントで現在使用しているエンコーダを定義します。
bool HaruDoc::setEncryptionMode ( int $mode [, int $key_len = 5 ] )\nドキュメントの暗号化モードを定義します。 先にパスワードを設定しないと、暗号化モードを設定することはできません。
bool HaruDoc::setInfoAttr ( int $type , string $info )\n情報属性を定義します。ドキュメントの現在のエンコーディングを使用します。
bool HaruDoc::setInfoDateAttr ( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min )\nドキュメントの日付や時刻の属性を設定します。
bool HaruDoc::setOpenAction ( object $destination )\nドキュメントを開いたときに、どのページを表示するかを定義します。
bool HaruDoc::setPageLayout ( int $layout )\nページをどのように表示するかを定義します。
bool HaruDoc::setPageMode ( int $mode )\nドキュメントをどのように表示するかを定義します。
bool HaruDoc::setPagesConfiguration ( int $page_per_pages )\nデフォルトでは、ドキュメントはひとつの pages オブジェクトを持っており、 これがすべてのページのルートとなります。各ページのオブジェクトは、 すべてこのオブジェクトの配下に作成されます。ひとつの pages オブジェクトが保持できるページ数は最大で 8191 までなので、 ドキュメントの最大ページ数は 8191 となります。しかし、パラメータ page_per_pages を指定することで、 これを変更することができます。ルートオブジェクトは 8191 を超える pages (ページではない) オブジェクトを保持することができ、 それぞれの pages が 8191 のページを保持するのです。 これにより、ドキュメントの最大ページ数は 8191*page_per_pages となります。
bool HaruDoc::setPassword ( string $owner_password , string $user_password )\nドキュメントに所有者パスワードおよびユーザパスワードを設定します。 これらのパスワードを設定すると、ドキュメントの内容が暗号化されます。
bool HaruDoc::setPermission ( int $permission )\nドキュメントの使用権限を定義します。
bool HaruDoc::useCNSEncodings ( void )\n簡体字中国語エンコーディングを有効にします。
bool HaruDoc::useCNSFonts ( void )\n組み込みの簡体字中国語フォントを有効にします。
bool HaruDoc::useCNTEncodings ( void )\n繁体字中国語エンコーディングを有効にします。
bool HaruDoc::useCNTFonts ( void )\n組み込みの繁体字中国語フォントを有効にします。
bool HaruDoc::useJPEncodings ( void )\n日本語エンコーディングを有効にします。
bool HaruDoc::useJPFonts ( void )\n組み込みの日本語フォントを有効にします。
bool HaruDoc::useKREncodings ( void )\n韓国/朝鮮語エンコーディングを有効にします。
bool HaruDoc::useKRFonts ( void )\n組み込みの韓国/朝鮮語フォントを有効にします。
int HaruEncoder::getByteType ( string $text , int $index )\nテキスト内のバイトの型を取得します。
int HaruEncoder::getType ( void )\nエンコーダの型を取得します。
int HaruEncoder::getUnicode ( int $character )\n指定した文字を unicode に変換します。
int HaruEncoder::getWritingMode ( void )\nエンコーダの書き込みモードを取得します。
int HaruFont::getAscent ( void )\nフォントの垂直 ascent (ベースラインの上側の高さ) を取得します。
int HaruFont::getCapHeight ( void )\n大文字のベースラインからの距離を取得します。
int HaruFont::getDescent ( void )\nフォントの垂直 descent (ベースラインの下側の高さ) を取得します。
string HaruFont::getEncodingName ( void )\nフォントエンコーディングの名前を取得します。
string HaruFont::getFontName ( void )\nフォントの名前を取得します。
array HaruFont::getTextWidth ( string $text )\n指定したテキストについて、 テキスト全体の幅、文字数、単語数および空白の数を取得します。
int HaruFont::getUnicodeWidth ( int $character )\nフォントの文字の幅を取得します。
int HaruFont::getXHeight ( void )\n小文字のベースラインからの距離を取得します。
int HaruFont::measureText ( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap = false ] )\n指定した幅に収めることのできる文字数を計算します。
int HaruImage::getBitsPerComponent ( void )\n画像の各色コンポーネントで使用するビット数を取得します。
string HaruImage::getColorSpace ( void )\n色空間の名前を取得します。
int HaruImage::getHeight ( void )\n画像の高さを取得します。
array HaruImage::getSize ( void )\n画像の大きさを取得します。
int HaruImage::getWidth ( void )\n画像の幅を取得します。
bool HaruImage::setColorMask ( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax )\n画像の透過色を、RGB 値の範囲を用いて定義します。 この範囲内の色が透過色として表示されます。 画像の色空間は RGB でなければなりません。
bool HaruImage::setMaskImage ( object $mask_image )\n画像マスクとして使用する画像を設定します。 1 ビットのグレイスケール画像である必要があります。
bool HaruOutline::setDestination ( object $destination )\nアウトラインがクリックされたときにジャンプする先の 対象オブジェクトを設定します。
bool HaruOutline::setOpened ( bool $opened )\nアウトラインを最初に表示した際に、 このノードを開くか開かないかを定義します。
bool HaruPage::arc ( float $x , float $y , float $ray , float $ang1 , float $ang2 )\n現在のパスに弧を追加します。
bool HaruPage::beginText ( void )\n新しいテキストオブジェクトを開始し、テキストの現在位置を (0,0) に設定します。
bool HaruPage::circle ( float $x , float $y , float $ray )\n現在のパスに円を追加します。
bool HaruPage::closePath ( void )\n現在の位置からパスの開始位置に直線を追加します。
bool HaruPage::concat ( float $a , float $b , float $c , float $d , float $x , float $y )\n現在のページの変換行列と指定した行列を連結します。
object HaruPage::createDestination ( void )\n新しい HaruDestination のインスタンスを作成します。
object HaruPage::createLinkAnnotation ( array $rectangle , object $destination )\n新しい HaruAnnotation のインスタンスを作成します。
object HaruPage::createTextAnnotation ( array $rectangle , string $text [, object $encoder ] )\n新しい HaruAnnotation のインスタンスを作成します。
object HaruPage::createURLAnnotation ( array $rectangle , string $url )\n新しい HaruAnnotation のインスタンスを作成します。
bool HaruPage::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加します。 点 (x1, y1) および点 (x2, y2) をベジエ曲線の制御点とし、 現在位置を点 (x3, y3) に移動します。
bool HaruPage::curveTo2 ( float $x2 , float $y2 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加します。 現在位置および点 (x2, y2) をベジエ曲線の制御点とし、 現在位置を点 (x3, y3) に移動します。
bool HaruPage::curveTo3 ( float $x1 , float $y1 , float $x3 , float $y3 )\nベジエ曲線を現在のパスに追加します。 点 (x1, y1) および点 (x3, y3) をベジエ曲線の制御点とし、 現在位置を点 (x3, y3) に移動します。
bool HaruPage::drawImage ( object $image , float $x , float $y , float $width , float $height )\n画像をページに表示します。
bool HaruPage::ellipse ( float $x , float $y , float $xray , float $yray )\n楕円を現在のパスに追加します。
bool HaruPage::endPath ( void )\n塗りつぶしや描画を行わずに現在のパスオブジェクトを終了します。
bool HaruPage::endText ( void )\n現在のテキストオブジェクトを終了します。
bool HaruPage::eofill ( void )\n奇偶規則を使用して現在のパスを塗りつぶします。
bool HaruPage::eoFillStroke ([ bool $close_path = false ] )\n奇偶規則を使用して現在のパスを塗りつぶします。
bool HaruPage::fill ( void )\nノンゼロワインディング規則を使用して現在のパスを塗りつぶします。
bool HaruPage::fillStroke ([ bool $close_path = false ] )\nノンゼロワインディング規則を使用して現在のパスを塗りつぶします。
float HaruPage::getCharSpace ( void )\n現在の文字間隔を取得します。
array HaruPage::getCMYKFill ( void )\n現在の塗りつぶし色を取得します。
array HaruPage::getCMYKStroke ( void )\n現在の描画色を取得します。
object HaruPage::getCurrentFont ( void )\n現在使用中のフォントを取得します。
float HaruPage::getCurrentFontSize ( void )\n現在のフォントのサイズを取得します。
array HaruPage::getCurrentPos ( void )\nパスの描画用に使用する現在位置を取得します。
array HaruPage::getCurrentTextPos ( void )\nテキストの印字用に使用する現在位置を取得します。
array HaruPage::getDash ( void )\n現在の破線のパターンを取得します。破線のパターンについての詳細な情報は HaruPage::setDash を参照ください。
int HaruPage::getFillingColorSpace ( void )\n現在の塗りつぶしの色空間を取得します。
float HaruPage::getFlatness ( void )\nページの平坦度を取得します。
int HaruPage::getGMode ( void )\n現在のグラフィックスモードを取得します。
float HaruPage::getGrayFill ( void )\n現在の塗りつぶし色を取得します。
float HaruPage::getGrayStroke ( void )\n現在の塗りつぶし色を取得します。
float HaruPage::getHeight ( void )\nページの高さを取得します。
float HaruPage::getHorizontalScaling ( void )\n現在の水平方向の拡大率を取得します。
int HaruPage::getLineCap ( void )\n現在のパスの終端の形式を取得します。
int HaruPage::getLineJoin ( void )\n現在のパスの角の形式を取得します。
float HaruPage::getLineWidth ( void )\n現在の線幅を取得します。
float HaruPage::getMiterLimit ( void )\nマイターリミットの値を取得します。
array HaruPage::getRGBFill ( void )\n現在の塗りつぶし色を取得します。
array HaruPage::getRGBStroke ( void )\n現在の描画色を取得します。
int HaruPage::getStrokingColorSpace ( void )\n現在の描画の色空間を取得します。
float HaruPage::getTextLeading ( void )\n現在の行間隔の値を取得します。
array HaruPage::getTextMatrix ( void )\nそのページの現在のテキスト変換行列を取得します。
int HaruPage::getTextRenderingMode ( void )\n現在のテキストのレンダリングモードを取得します。
float HaruPage::getTextRise ( void )\n現在のテキストライズの値を取得します。
float HaruPage::getTextWidth ( string $text )\n現在のフォントサイズ、文字エンコーディングおよび単語間隔を使用して テキストの幅を取得します。
array HaruPage::getTransMatrix ( void )\nそのページの現在の変換行列を取得します。
float HaruPage::getWidth ( void )\nページの幅を取得します。
float HaruPage::getWordSpace ( void )\n現在の単語間隔の値を取得します。
bool HaruPage::lineTo ( float $x , float $y )\n現在位置から指定した位置まで直線を描画します。
int HaruPage::measureText ( string $text , float $width [, bool $wordwrap = false ] )\n指定した幅の中に配置できる文字の数を返します。
bool HaruPage::moveTextPos ( float $x , float $y [, bool $set_leading = false ] )\nテキストの位置を、指定したオフセットに移動します。 現在の行の開始位置が (x1, y1) の場合、次の行の開始位置は (x1 + x , y1 + y ) となります。
bool HaruPage::moveTo ( float $x , float $y )\n新しい描画パスの開始位置を定義します。
bool HaruPage::moveToNextLine ( void )\nテキストの位置を次の行の行頭に移動します。
bool HaruPage::rectangle ( float $x , float $y , float $width , float $height )\n現在の描画パスに矩形を追加します。
bool HaruPage::setCharSpace ( float $char_space )\nページの文字間隔を定義します。
bool HaruPage::setCMYKFill ( float $c , float $m , float $y , float $k )\nページの塗りつぶし色を定義します。
bool HaruPage::setCMYKStroke ( float $c , float $m , float $y , float $k )\nページの描画色を設定します。
bool HaruPage::setDash ( array $pattern , int $phase )\nページの破線パターンを定義します。
bool HaruPage::setFlatness ( float $flatness )\nページの平坦度を定義します。
bool HaruPage::setFontAndSize ( object $font , float $size )\nページの現在のフォントおよびフォントサイズを定義します。
bool HaruPage::setGrayFill ( float $value )\nページの塗りつぶし色を定義します。
bool HaruPage::setGrayStroke ( float $value )\nページの描画色を定義します。
bool HaruPage::setHeight ( float $height )\nページの高さを定義します。
bool HaruPage::setHorizontalScaling ( float $scaling )\nページの水平方向の拡大率を設定します。
bool HaruPage::setLineCap ( int $cap )\nパスの終端に使用する形式を定義します。
bool HaruPage::setLineJoin ( int $join )\nそのページのパスの角の形式を定義します。
bool HaruPage::setLineWidth ( float $width )\nページの線幅を定義します。
bool HaruPage::setMiterLimit ( float $limit )\nページのマイターリミットの現在値を設定します。
bool HaruPage::setRGBFill ( float $r , float $g , float $b )\nページの塗りつぶし色を定義します。すべての値は 0 から 1 までの間でなければなりません。
bool HaruPage::setRGBStroke ( float $r , float $g , float $b )\nページの描画色を定義します。すべての値は 0 から 1 までの間でなければなりません。
bool HaruPage::setRotate ( int $angle )\nページの回転角度を定義します。
bool HaruPage::setSize ( int $size , int $direction )\nページのサイズおよび方向を、定義済みのフォーマットに変更します。
bool HaruPage::setSlideShow ( int $type , float $disp_time , float $trans_time )\nページの移動方式を設定します。
bool HaruPage::setTextLeading ( float $text_leading )\nページの行間隔を設定します。
bool HaruPage::setTextMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )\nそのページのテキスト変換行列を定義します。
bool HaruPage::setTextRenderingMode ( int $mode )\nそのページのテキストのレンダリングモードを定義します。
bool HaruPage::setTextRise ( float $rise )\n現在のテキストライズの値を設定します。
bool HaruPage::setWidth ( float $width )\nページの幅を設定します。
bool HaruPage::setWordSpace ( float $word_space )\nページの単語間隔を設定します。
bool HaruPage::showText ( string $text )\nページの現在位置にテキストを表示します。
bool HaruPage::showTextNextLine ( string $text [, float $word_space [, float $char_space ]] )\n現在位置を次の行の行頭に移動してテキストを表示します。
bool HaruPage::stroke ([ bool $close_path = false ] )\n現在のパスを描画します。
bool HaruPage::textOut ( float $x , float $y , string $text )\nテキストを指定した位置に表示します。
bool HaruPage::textRect ( float $left , float $top , float $right , float $bottom , string $text [, int $align = HaruPage::TALIGN_LEFT ] )\n指定した領域内にテキストを表示します。
array hash_algos ( void )
resource hash_copy ( resource $context )
string hash_file ( string $algo , string $filename [, bool $raw_output = false ] )
string hash_final ( resource $context [, bool $raw_output = false ] )
string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = false ] )
string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )
resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )
bool hash_update_file ( resource $context , string $filename [, resource $context = NULL ] )
int hash_update_stream ( resource $context , resource $handle [, int $length = -1 ] )
bool hash_update ( resource $context , string $data )
string hash ( string $algo , string $data [, bool $raw_output = false ] )
void header_remove ([ string $name ] )\nheader()関数を使って以前に設定したHTTPヘッダを削除します。
void header ( string $string [, bool $replace = true [, int $http_response_code ]] )\nheader() は、生の HTTP ヘッダを送信するために使用されます。 HTTP ヘッダについての詳細な情報は &raquo; HTTP/1.1 仕様 を参照ください。\n覚えておいて頂きたいのは、header() 関数は、 通常の HTML タグまたは PHP からの出力にかかわらず、すべての実際の 出力の前にコールする必要があることです。 頻出するエラーとして、include() または require() 関数、他のファイルをアクセスする関数に 空白または空行があり、header() の前に出力が 行われてしまうというものがあります。同じ問題は、単一の PHP/HTML ファイルを使用している場合でも存在します。\n<html><?php/*&nbsp;これはエラーとなります。この上に出力があることに注目してください。&nbsp;*&nbsp;それはheader()のコールより前であるということになります&nbsp;*/header('Location:&nbsp;http://www.example.com/');?>
array headers_list ( void )\nheaders_list() はブラウザもしくはクライアントに送信されるヘッダの数値配列を返します。 これらのヘッダが送信されたかどうかを判断するためには headers_sent() を使用します。
bool headers_sent ([ string &$file [, int &$line ]] )\nヘッダがすでに送信されているかどうかを調べます。\nヘッダブロックがいったん送信されてしまった後で header() 関数を使って新たなヘッダ行を送信することはできません。 この関数を使うには、少なくとも HTTP ヘッダ関連のエラーを予防する必要があります。 あるいは、出力バッファリング を使う方法もあります。
string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )\n論理表記のヘブライ語を物理表記に変換します。\nこの関数は、単語の分断をできるだけ回避しようとします。
string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )\nこの関数は、hebrev() に似ていますが、 改行 (\\n) を &quot;<br>\\n&quot; に変換するところが異なります。\nこの関数は、単語の分断をできるだけ回避しようとします。
number hexdec ( string $hex_string )\n引数 hex_string により指定された 16 進数に 等価な 10 進数を返します。hexdec() は、16 進数を 表す文字列を 10 進数に変換します。\nhexdec() は、16 進数以外の文字を一切無視します。
mixed highlight_file ( string $filename [, bool $return = false ] )\nfilename の中のコードを構文ハイライト表示して 出力します。色は、PHP 組込の構文ハイライタで定義されているものを使用します。\n多くのサーバでは、拡張子が phps のファイルは 自動的に構文ハイライト表示されるように設定されています。例えば example.phps のようなファイルは、構文ハイライト したソースファイルとして表示されます。これを有効にするには、 httpd.conf に以下のような行を追加します。\nAddType application/x-httpd-php-source .phps
mixed highlight_string ( string $str [, bool $return = false ] )\nPHP 組込みの 構文ハイライタで定義されたカラーを使用して str を構文ハイライト表示したものを出力あるいは返します。
string html_entity_decode ( string $string [, int $quote_style = ENT_COMPAT [, string $charset ]] )\nhtml_entity_decode() は htmlentities() の反対で、string にあるすべての HTML エンティティを適切な文字に変換します。
string htmlentities ( string $string [, int $quote_style = ENT_COMPAT [, string $charset [, bool $double_encode = true ]]] )\nこの関数はhtmlspecialchars()と同じですが、 HTML エンティティと等価な意味を有する文字をHTMLエンティティに変換します。\nもしデコード (逆の処理) をしたい場合、 html_entity_decode() を使用することができます。
string htmlspecialchars_decode ( string $string [, int $quote_style = ENT_COMPAT ] )\nこの関数は htmlspecialchars() の反対です。 特殊な HTML エンティティを文字に戻します。\n変換されるエンティティは次のものです。&amp;、 &quot; (ENT_NOQUOTES が設定されていない場合)、 &#039; (ENT_QUOTES が設定されている場合)、 &lt; および &gt;。
string htmlspecialchars ( string $string [, int $quote_style = ENT_COMPAT [, string $charset [, bool $double_encode = true ]]] )\n文字の中には HTML において特殊な意味を持つものがあり、 それらの本来の値を表示したければ HTML の表現形式に変換してやらなければなりません。 この関数は、これらの変換を行った結果の文字列を返します。 これは、日常的な Web プログラミングにおいて最も有用な変換を行います。 全ての HTML 文字エンティティを変換する必要がある場合には、代わりに htmlentities() を使用してください。\nこの関数は、掲示板やゲストブックなどでユーザが書きこんだテキストから HTML のマークアップ用文字を取り除く場合に有用です。\n変換対象となる文字は以下の通りです。    &#039;&&#039; (アンパサンド) は &#039;&amp;&#039; になります。     ENT_NOQUOTES が設定されていない場合、 &#039;&quot;&#039; (ダブルクォート) は &#039;&quot;&#039;になります。     ENT_QUOTES が設定されている場合のみ、 &#039;&#039;&#039; (シングルクオート) は &#039;&#039;&#039;になります。     &#039;<&#039; (小なり) は &#039;&lt;&#039; になります。     &#039;>&#039; (大なり) は &#039;&gt;&#039; になります。
string http_build_cookie ( array $cookie )\nhttp_parse_cookie() が返すような形式の配列/オブジェクトから、クッキー文字列を作成します。
string http_build_query ( array $formdata [, string $numeric_prefix [, string $arg_separator ]] )\n与えられた連想配列 (もしくは添字配列) から URL エンコードされたクエリ文字列を生成します。
string http_build_str ( array $query [, string $prefix [, string $arg_separator ]] )\nparse_str() の逆の動作をします。
string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )\nURL を組み立てます。\n引数 flag の設定によっては、二番目の URL の一部が最初の URL に統合されます。
bool http_cache_etag ([ string $etag ] )\n送信されるエンティティを、その ETag を基準にしてキャッシュしようとします。 ETag は、指定されたものを使用するか、あるいは INI 設定 http.etag.mode で指定したハッシュアルゴリズムにより生成したものを使用します。\nクライアントの If-None-Match ヘッダがこの ETag と一致した場合は、その本文はクライアント側でキャッシュされていると判断し、 ステータスコード 304 Not Modified を発行します。\nINI 設定 http.log.cache が設定されており、キャッシュの試みが成功した場合は、 キャッシュログにエントリが書き込まれます。
bool http_cache_last_modified ([ int $timestamp_or_expires ] )\n送信されるエンティティを、その最終更新日時を基準にしてキャッシュしようとします。\n引数に 0 より大きい値が指定された場合、それは timestamp として扱われ、最終更新日時として送信されます。0 または省略された場合は、 現在の時刻を Last-Modified 日時として送信します。負の数を指定した場合は、 それは有効期限を表す秒数として扱われます。つまり、 リクエストされた最終更新日時がこの範囲内にない場合は、 Last-Modified ヘッダが更新されて実際の本文が送信されます。\nINI 設定 http.log.cache が設定されており、キャッシュの試みが成功した場合は、 キャッシュログにエントリが書き込まれます。
string http_chunked_decode ( string $encoded )\nHTTP-chunked エンコードされた文字列をデコードします。
string http_date ([ int $timestamp ] )\nRFC 1123 に準拠した、妥当な形式の HTTP 日付を作成します。 Wed, 22 Dec 2004 11:34:47 GMT のような形式になります。
string http_deflate ( string $data [, int $flags = 0 ] )\ngzip、 zlib 別名 deflate あるいは raw deflate エンコーディングを使用してデータを圧縮します。\nflags に指定できる値については、 圧縮定数の表 を参照ください。
resource http_get_request_body_stream ( void )\nストリームを作成し、生のリクエスト本文 (例: POST あるいは PUT データ) を読み込めるようにします。\nリクエストメソッドが POST 以外の場合は、この関数は一度しか使用できません。
string http_get_request_body ( void )\n生のリクエスト本文 (例: POST あるいは PUT データ) を取得します。\nリクエストメソッドが POST 以外の場合は、 http_get_request_body_stream() の後にこの関数を使用することはできません。
array http_get_request_headers ( void )\n受け取った HTTP ヘッダの一覧を取得します。
string http_get ( string $url [, array $options [, array &$info ]] )\n指定した url に対して HTTP GET リクエストを実行します。\nリクエストのオプション を参照ください。
string http_head ([ string $url [, array $options [, array &$info ]]] )\n指定した url に対して HTTP HEAD リクエストを実行します。\nリクエストのオプション を参照ください。
string http_inflate ( string $data )\ngzip、deflate 別名 zlib あるいは raw deflate エンコーディングで圧縮されたデータを展開します。
bool http_match_etag ( string $etag [, bool $for_range = false ] )\n指定された ETag を、クライアントの HTTP ヘッダ If-Match あるいは If-None-Match と比較します。
bool http_match_modified ([ int $timestamp [, bool $for_range = false ]] )\n指定された Unix タイムスタンプを、クライアントの HTTP ヘッダ If-Modified-Since あるいは If-Unmodified-Since と比較します。
bool http_match_request_header ( string $header , string $value [, bool $match_case = false ] )\n受け取った HTTP ヘッダを比較します。
string http_negotiate_charset ( array $supported [, array &$result ] )\nこの関数は、クライアントが希望している文字セットを Accept-Charset HTTP ヘッダに基づいて選択します。 qualifier も理解し、qualifier の指定されていない文字セットが最優先されます。
string http_negotiate_content_type ( array $supported [, array &$result ] )\nこの関数は、クライアントが希望している content type を Accept HTTP ヘッダに基づいて選択します。 qualifier も理解し、qualifier の指定されていない content type が最優先されます。
string http_negotiate_language ( array $supported [, array &$result ] )\nこの関数は、クライアントが希望している言語を Accept-Language HTTP ヘッダに基づいて選択します。 qualifier も理解し、qualifier の指定されていない言語が最優先されます。 部分的に一致した (つまりプライマリ言語についてのみ一致した) 言語については、qualifier が 10% 割り引かれます。
object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )\nレスポンスとして送信されるのと同様の形式に HTTP クッキーをパースし、構造体に格納します。
array http_parse_headers ( string $header )\nHTTP ヘッダをパースし、連想配列に格納します。
object http_parse_message ( string $message )\nHTTP の　message をパースし、 単純な形式の再帰的な object に格納します。
object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )\nパラメータリストをパースします。\n引数 flags に指定可能な値については パラメータ解析の定数の表 を参照ください。
string http_persistent_handles_clean ([ string $ident ] )\n持続ハンドルを消去します (閉じます)。オプションで、ident による認証を行います。
object http_persistent_handles_count ( void )\n持続ハンドルの使用状況についての一覧を取得します。
string http_persistent_handles_ident ( string $ident )\n持続ハンドルの ident を取得あるいは定義します。
string http_post_data ( string $url [, string $data [, array $options [, array &$info ]]] )\n指定した url に対して HTTP POST リクエストを実行します。\nリクエストのオプション を参照ください。
string http_post_fields ( string $url [, array $data [, array $files [, array $options [, array &$info ]]]] )\n指定した url に対して HTTP POST リクエストを実行します。\nリクエストのオプション を参照ください。
string http_put_data ( string $url [, string $data [, array $options [, array &$info ]]] )\n指定した url に対して HTTP PUT リクエストを実行します。\nリクエストのオプション を参照ください。
string http_put_file ( string $url [, string $file [, array $options [, array &$info ]]] )\n指定した url に対して HTTP PUT リクエストを実行します。\nリクエストのオプション を参照ください。
string http_put_stream ( string $url [, resource $stream [, array $options [, array &$info ]]] )\n指定した url に対して HTTP PUT リクエストを実行します。\nリクエストのオプション を参照ください。
void http_redirect ([ string $url [, array $params [, bool $session = false [, int $status ]]]] )\n指定した url にリダイレクトします。\n指定した url は http_build_url() で展開され、 params の内容は http_build_str() で扱われます。 また、session が true の場合はセッション ID が付加されます。 HTTP レスポンスコードは、status に応じたものが設定されます。 リダイレクト定数 のいずれかを使用すると便利です。 どのような場面でどのようなレスポンスコードが返されるのかについては、 &raquo; RFC 2616 を参照ください。デフォルトでは、いちばんうまく当てはまるステータスを PHP が決定します。\nRFC に準拠するため、クライアントがすぐにリダイレクトしない場合でも &quot;Redirecting to <a>URL</a>.&quot; と表示されます。 また、リクエストメソッドは HEAD 以外のものとなります。\nINI 設定 http.log.redirect が設定されており、リダイレクトの試みが成功した場合には リダイレクトのログにエントリが書き込まれます。
string http_request_body_encode ( array $fields , array $files )\nx-www-form-urlencoded あるいは form-data でエンコードされたリクエスト本文を作成します。
int http_request_method_exists ( mixed $method )\nリクエストメソッドが登録されているか (あるいはデフォルトで使用可能か) どうかを調べます。
string http_request_method_name ( int $method )\n標準的な、あるいは登録されたリクエストメソッドの名前を リテラル文字列として取得します。
int http_request_method_register ( string $method )\n独自のリクエストメソッドを登録します。
bool http_request_method_unregister ( mixed $method )\n事前に登録された、独自のリクエストメソッドの登録を解除します。
string http_request ( int $method [, string $url [, string $body [, array $options [, array &$info ]]]] )\n指定した url に対して独自の HTTP リクエストを実行します。\nリクエストのオプション を参照ください。
bool http_send_content_disposition ( string $filename [, bool $inline = false ] )\nContent-Disposition を送信します。 Content-Disposition ヘッダは、 実際に送信するデータがファイルなどであり、それをクライアント/ユーザに &quot;保存&quot; させたい (ブラウザのポップアップ &quot;名前を付けて保存...&quot; を出させたい) 場合に便利です。
bool http_send_content_type ([ string $content_type = &quot;application/x-octetstream&quot; ] )\nエンティティの Content-Type を送信します。
bool http_send_data ( string $data )\n(複数の) range リクエストをサポートする生のデータを送信します。
bool http_send_file ( string $file )\n(複数の) range リクエストをサポートするファイルを送信します。\nこの関数の振る舞いおよびその後の動作は、以下の INI 設定 http.send.not_found_404 そして http.log.not_found に依存します。\nINI 設定 http.send.not_found_404 が有効で INI 設定 http.log.not_found が書き込み可能なファイルを指している場合は、file が見つからないときにそこにログメッセージが書き込まれます。
bool http_send_last_modified ([ int $timestamp ] )\nLast-Modified ヘッダに、有効な HTTP 日付を設定して送信します。
bool http_send_status ( int $status )\nHTTP ステータスコードを送信します。
bool http_send_stream ( resource $stream )\n(複数の) range リクエストをサポートする、 オープン済みのストリームを送信します。
int http_support ([ int $feature = 0 ] )\n外部ライブラリを必要とする機能について調べます。\n引数 feature に指定可能な値については サポートする機能の定数の表 を参照ください。
void http_throttle ([ float $sec [, int $bytes = 40960 ]] )\nthrottle delay および送信バッファサイズを指定します。
public void HttpDeflateStream::__construct ([ int $flags = 0 ] )\n新しい HttpDeflateStream クラスのインスタンスを作成します。\nflags に指定する内容については 圧縮ストリームの定数の表 を参照ください。
public HttpDeflateStream HttpDeflateStream::factory ([ int $flags = 0 [, string $class_name = &quot;HttpDeflateStream&quot; ]] )\n新しい HttpDeflateStream オブジェクトのインスタンスを作成します。\nflags に指定する内容については 圧縮ストリームの定数の表 を参照ください。
public string HttpDeflateStream::finish ([ string $data ] )\n圧縮ストリームを終了します。圧縮ストリームは、 終了した後でも再開することが可能です。
public string HttpDeflateStream::flush ([ string $data ] )\n圧縮ストリームをフラッシュします。
public string HttpDeflateStream::update ( string $data )\n圧縮ストリームに、さらにデータを渡します。
public void HttpInflateStream::__construct ([ int $flags = 0 ] )\n新しい HttpInflateStream オブジェクトのインスタンスを作成します。\nflags に指定する内容については 展開ストリームの定数の表 を参照ください。
public HttpInflateStream HttpInflateStream::factory ([ int $flags = 0 [, string $class_name = &quot;HttpInflateStream&quot; ]] )\n新しい HttpInflateStream オブジェクトのインスタンスを作成します。\nflags に指定する内容については 展開ストリームの定数の表 を参照ください。
public string HttpInflateStream::finish ([ string $data ] )\n展開ストリームを終了します。展開ストリームは、 終了した後でも再開することが可能です。
public string HttpInflateStream::flush ([ string $data ] )\n展開ストリームをフラッシュします。
public string HttpInflateStream::update ( string $data )\n展開ストリームに、さらにデータを渡します。
public void HttpMessage::addHeaders ( array $headers [, bool $append = false ] )\nヘッダを追加します。append が true の場合は同名のヘッダが複数登録されます。 そうでない場合は、同名のヘッダは上書きされます。
public void HttpMessage::__construct ([ string $message ] )\n新しい HttpMessage オブジェクトのインスタンスを作成します。\n作成されたオブジェクトが表すのは、渡された文字列の 直近のメッセージです。 それ以前のメッセージが存在する場合、そこにアクセスするには HttpMessage::getParentMessage() を使用します。
public HttpMessage HttpMessage::detach ( void )\nHttpMessage オブジェクトの複製を返します。 これは親メッセージからデタッチされたものです。
static public HttpMessage HttpMessage::factory ([ string $raw_message [, string $class_name = &quot;HttpMessage&quot; ]] )\n文字列から HttpMessage オブジェクトを作成します。
static public HttpMessage HttpMessage::fromEnv ( int $message_type [, string $class_name = &quot;HttpMessage&quot; ] )\nスクリプトの環境から HttpMessage オブジェクトを作成します。
static public HttpMessage HttpMessage::fromString ([ string $raw_message [, string $class_name = &quot;HttpMessage&quot; ]] )\n文字列から HttpMessage オブジェクトを作成します。\nこの関数エイリアスは非推奨であり、下位互換性維持のために残されています。 今後、PHP から削除される可能性がありますので、この関数を使用しないことを推奨します。
public string HttpMessage::getBody ( void )\nパースされた HttpMessage の本文を取得します。
public string HttpMessage::getHeader ( string $header )\nメッセージのヘッダを取得します。
public array HttpMessage::getHeaders ( void )\nメッセージのヘッダを取得します。
public string HttpMessage::getHttpVersion ( void )\nメッセージの HTTP プロトコルバージョンを取得します。
public HttpMessage HttpMessage::getParentMessage ( void )\n親メッセージを取得します。
public string HttpMessage::getRequestMethod ( void )\nメッセージのリクエストメソッドを取得します。
public string HttpMessage::getRequestUrl ( void )\nメッセージのリクエスト URL を取得します。
public int HttpMessage::getResponseCode ( void )\nメッセージのレスポンスコードを取得します。
public string HttpMessage::getResponseStatus ( void )\nメッセージのレスポンスステータス (レスポンスコードの後に続く文字列) を取得します。
public int HttpMessage::getType ( void )\nメッセージの型を取得します。 HTTP_MSG_NONE、HTTP_MSG_REQUEST あるいは HTTP_MSG_RESPONSE のいずれかです。
public string HttpMessage::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )\nメッセージ本文の content type を、libmagic を使用して推測します。
public void HttpMessage::prepend ( HttpMessage $message [, bool $top = true ] )\nHTTP メッセージの先頭に、メッセージを追加します。
public HttpMessage HttpMessage::reverse ( void )\nメッセージチェインを逆順に並べなおします。
public bool HttpMessage::send ( void )\nレスポンスあるいはリクエストのいずれかの型に応じたメッセージを送信します。\nこのメソッドの機能は、HttpRequest および HttpResponse に比べて限定されています。
public void HttpMessage::setBody ( string $body )\nHttpMessage の本文を設定します。
public void HttpMessage::setHeaders ( array $headers )\n新しいヘッダを設定します。
public bool HttpMessage::setHttpVersion ( string $version )\nメッセージの HTTP プロトコルバージョンを設定します。
public bool HttpMessage::setRequestMethod ( string $method )\nHTTP メッセージのリクエストメソッドを設定します。
public bool HttpMessage::setRequestUrl ( string $url )\nHTTP メッセージのリクエスト URL を設定します。
public bool HttpMessage::setResponseCode ( int $code )\nHTTP レスポンスメッセージのレスポンスコードを設定します。
public bool HttpMessage::setResponseStatus ( string $status )\nHTTP メッセージのレスポンスステータス (レスポンスコードの後に続く文字列) を設定します。
public void HttpMessage::setType ( int $type )\nメッセージの型を設定します。 HTTP_MSG_NONE、HTTP_MSG_REQUEST あるいは HTTP_MSG_RESPONSE のいずれかとなります。
public HttpRequest|HttpResponse HttpMessage::toMessageTypeObject ( void )\nメッセージの型に応じたオブジェクトを作成します。
public string HttpMessage::toString ([ bool $include_parent = false ] )\nメッセージの文字列表現を取得します。
final public void HttpQueryString::__construct ([ bool $global = true [, mixed $add ]] )\n新しい HttpQueryString オブジェクトのインスタンスを作成します。\nglobal が TRUE の場合は、 $_GET および $_SERVER['QUERY_STRING'] を操作して変更します。
public mixed HttpQueryString::get ([ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]] )\nクエリ文字列 (の一部) を取得します。\nパラメータ type には HttpQueryString::TYPE_* 定数のいずれか、 あるいは型を省略したものを指定します。例えば &quot;b&quot; は bool、&quot;i&quot; は int、&quot;f&quot; は float、 &quot;s&quot; は string、&quot;a&quot; は array そして &quot;o&quot; は stdClass オブジェクトです。
public HttpQueryString HttpQueryString::mod ( mixed $params )\nクエリ文字列オブジェクトを複製し、指定したパラメータをその複製に設定します。
public string HttpQueryString::set ( mixed $params )\nクエリ文字列エントリを設定します。NULL を指定すると、変数を削除します。
static public HttpQueryString HttpQueryString::singleton ([ bool $global = true ] )\nシングルトンインスタンス (グローバル設定によって異なります) を取得します。
public array HttpQueryString::toArray ( void )\nクエリ文字列を、連想配列として取得します。
public string HttpQueryString::toString ( void )\nクエリ文字列を取得します。
public bool HttpQueryString::xlate ( string $ie , string $oe )\nクエリ文字列のエンコーディングを、ie から oe に変換します。\n警告\nUTF-16 のように NUL バイトを含められる文字セットは、使用しないでください。
public bool HttpRequest::addCookies ( array $cookies )\n独自のクッキーを追加します。
public bool HttpRequest::addHeaders ( array $headers )\nリクエストヘッダの 名前/値 の組み合わせを追加します。
public bool HttpRequest::addPostFields ( array $post_data )\nPOST データエントリを追加します。既存のデータは、 同名のエントリを指定されない限りはそのまま残ります。\nPOST およびカスタムリクエストについてのみ影響します。
public bool HttpRequest::addPostFile ( string $name , string $file [, string $content_type = &quot;application/x-octetstream&quot; ] )\nファイルを POST リクエストに追加します。事前に設定されているファイルは変更されません。\nPOST およびカスタムリクエストについてのみ影響します。 生の POST データには使用できません。
public bool HttpRequest::addPutData ( string $put_data )\nPUT データを追加します。事前に設定されている PUT データはそのまま残ります。\nPUT リクエストについてのみ影響します。
public bool HttpRequest::addQueryData ( array $query_params )\nクエリパラメータのリストにパラメータを追加します。 既存のデータはそのまま残ります。\nあらゆる型のリクエストに影響します。
public bool HttpRequest::addRawPostData ( string $raw_post_data )\n生の POST データを追加します。既存のデータはそのまま変更されません。\nPOST およびカスタムリクエストについてのみ影響します。
public bool HttpRequest::addSslOptions ( array $options )\n追加の SSL オプションを設定します。
public void HttpRequest::clearHistory ( void )\nすべての履歴メッセージを消去します。
public void HttpRequest::__construct ([ string $url [, int $request_method = HTTP_METH_GET [, array $options ]]] )\n新しい HttpRequest オブジェクトのインスタンスを作成します。
public bool HttpRequest::enableCookies ( void )\n受け取ったクッキーを自動送信するようにします。
public string HttpRequest::getContentType ( void )\n事前に設定された content type を取得します。
public array HttpRequest::getCookies ( void )\n事前に設定されたクッキーを取得します。
public array HttpRequest::getHeaders ( void )\n事前に設定されたリクエストヘッダを取得します。
public HttpMessage HttpRequest::getHistory ( void )\nすべての送信済みリクエストと受信したレスポンスを、 HttpMessage オブジェクトとして取得します。\n履歴を記録したい場合は、インスタンス変数 HttpRequest::recordHistory を TRUE に設定します。\n返されるオブジェクトは、直近に受け取ったレスポンスを参照しています。 それ以前に送信したリクエストや受信したレスポンスにアクセスするには HttpMessage::getParentMessage() を使用します。
public int HttpRequest::getMethod ( void )\n事前に設定されたリクエストメソッドを取得します。
public array HttpRequest::getOptions ( void )\n現在設定されているオプションを取得します。
public array HttpRequest::getPostFields ( void )\n事前に設定された POST データを取得します。
public array HttpRequest::getPostFiles ( void )\n事前に追加された POST ファイルをすべて取得します。
public string HttpRequest::getPutData ( void )\n事前に設定された PUT データを取得します。
public string HttpRequest::getPutFile ( void )\n事前に設定された PUT ファイルを取得します。
public string HttpRequest::getQueryData ( void )\n現在のクエリデータを、urlencode された形式の文字列で取得します。
public string HttpRequest::getRawPostData ( void )\n事前に設定された生の POST データを取得します。
public string HttpRequest::getRawRequestMessage ( void )\n送信された HTTP メッセージを取得します。
public string HttpRequest::getRawResponseMessage ( void )\nHTTP レスポンスの全体を取得します。
public HttpMessage HttpRequest::getRequestMessage ( void )\n送信された HTTP メッセージを取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。このリクエストにおいて その前に送信したリクエストの内容にアクセスするには HttpMessage::getParentMessage() を使用します。
public string HttpRequest::getResponseBody ( void )\nリクエストが送信された後に、レスポンスの本文を取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public int HttpRequest::getResponseCode ( void )\nリクエストが送信された後に、レスポンスコードを取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public array HttpRequest::getResponseCookies ([ int $flags [, array $allowed_extras ]] )\nリクエストが送信された後に、レスポンスのクッキーを取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public array HttpRequest::getResponseData ( void )\nリクエストが送信された後に、すべてのレスポンスデータを取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public mixed HttpRequest::getResponseHeader ([ string $name ] )\nリクエストが送信された後に、レスポンスヘッダを取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public mixed HttpRequest::getResponseInfo ([ string $name ] )\nリクエストが送信された後に、レスポンスの情報を取得します。\nどのような 情報 が返されるのかについては、 http_get() を参照ください。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。
public HttpMessage HttpRequest::getResponseMessage ( void )\nリクエストが送信された後に、完全なレスポンスを HttpMessage オブジェクトとして取得します。\nリダイレクトが許可されており、複数のレスポンスを受信した場合は、 最後に受信したレスポンスを参照します。このリクエストにおいて その前に送信したリクエストの内容にアクセスするには HttpMessage::getParentMessage() を使用します。
public string HttpRequest::getResponseStatus ( void )\nメッセージが送信された後に、レスポンスのステータス (レスポンスコードの後に続く文字列) を取得します。
public array HttpRequest::getSslOptions ( void )\n事前に設定された SSL オプションを取得します。
public string HttpRequest::getUrl ( void )\n事前に設定されたリクエスト URL を取得します。
public bool HttpRequest::resetCookies ([ bool $session_only = false ] )\n自動的に受信/送信されたクッキーを、リセットします。
public HttpMessage HttpRequest::send ( void )\nHTTP リクエストを送信します。
public bool HttpRequest::setContentType ( string $content_type )\npost リクエストの content type を設定します。
public bool HttpRequest::setCookies ([ array $cookies ] )\n独自のクッキーを設定します。
public bool HttpRequest::setHeaders ([ array $headers ] )\nリクエストヘッダの 名前/値 の組み合わせを設定します。
public bool HttpRequest::setMethod ( int $request_method )\nリクエストメソッドを設定します。
public bool HttpRequest::setOptions ([ array $options ] )\n使用するリクエストオプションを設定します。\nリクエストのオプション を参照ください。
public bool HttpRequest::setPostFields ( array $post_data )\nPOST データエントリを設定します。事前に設定されている POST データが上書きされます。\nPOST およびカスタムリクエストについてのみ影響します。
public bool HttpRequest::setPostFiles ( array $post_files )\nPOST するファイルを設定します。事前に設定されているファイルを上書きします。\nPOST およびカスタムリクエストについてのみ影響します。 生の POST データには使用できません。
public bool HttpRequest::setPutData ([ string $put_data ] )\nPUT データを追加します。事前に設定されている PUT データを上書きします。\nPUT リクエストについてのみ影響します。\n各リクエストについて、PUT データあるいは PUT ファイルの どちらか一方のみが使用されます。PUT データのほうが優先順位が高いので、 たとえ PUT ファイルが設定されていたとしても PUT データがあればそちらを使用します。
public bool HttpRequest::setPutFile ([ string $file ] )\nPUT するファイルを設定します。 PUT リクエストについてのみ影響します。
public bool HttpRequest::setQueryData ( mixed $query_data )\n使用する URL クエリパラメータを設定します。 事前に設定されているクエリパラメータを上書きします。\nあらゆる型のリクエストに影響します。
public bool HttpRequest::setRawPostData ([ string $raw_post_data ] )\n生の POST データを追加します。事前に設定されているデータは上書きされます。 content type を指定することを忘れないでください。 POST およびカスタムリクエストについてのみ影響します。\n各リクエストについて、POST フィールドあるいは生の POST データの どちらか一方のみが使用されます。生の POST データのほうが優先順位が高いので、 たとえ POST フィールドが設定されていたとしても 生の POST データがあればそちらを使用します。
public bool HttpRequest::setSslOptions ([ array $options ] )\nSSL オプションを設定します。
public bool HttpRequest::setUrl ( string $url )\nリクエスト URL を設定します。
public bool HttpRequestPool::attach ( HttpRequest $request )\nHttpRequest オブジェクトを、この HttpRequestPool にアタッチします。\n警告\nアタッチする前に、すべてのオプションを設定しておいてください!
void HttpRequestPool::__construct ([ HttpRequest $request ] )\n新しい HttpRequestPool オブジェクトのインスタンスを作成します。 HttpRequestPool は、複数の HttpRequest を平行して送信することができます。\n事実上無限にオプションのパラメータを指定することができます。 各パラメータは HttpRequest オブジェクトへの参照です。
void HttpRequestPool::__destruct ( void )\nHttpRequestPool オブジェクトの後始末をします。
bool HttpRequestPool::detach ( HttpRequest $request )\nこの HttpRequestPool から、HttpRequest オブジェクトをデタッチします。
array HttpRequestPool::getAttachedRequests ( void )\nアタッチされている HttpRequest オブジェクトを取得します。
array HttpRequestPool::getFinishedRequests ( void )\nアタッチされている HttpRequest オブジェクトのうち、 すでに処理を終えた後のものを取得します。
void HttpRequestPool::reset ( void )\nアタッチされているすべての HttpRequest オブジェクトを デタッチします。
bool HttpRequestPool::send ( void )\nアタッチされているすべての HttpRequest オブジェクトを、平行して送信します。
protected bool HttpRequestPool::socketPerform ( void )\n各リクエストがトランザクションを終了するまでの間、TRUE を返します。
protected bool HttpRequestPool::socketSelect ( void )
static void HttpResponse::capture ( void )\nスクリプトの出力を取り込みます。
static int HttpResponse::getBufferSize ( void )\n現在のバッファのサイズを取得します。
static bool HttpResponse::getCache ( void )\n現在のキャッシュ設定を取得します。
static string HttpResponse::getCacheControl ( void )\n現在の Cache-Control ヘッダの設定を取得します。
static string HttpResponse::getContentDisposition ( void )\n現在の Content-Disposition の設定を取得します。
static string HttpResponse::getContentType ( void )\n現在の Content-Type ヘッダの設定を取得します。
static string HttpResponse::getData ( void )\n事前に設定された、送信されようとしているデータを取得します。
static string HttpResponse::getETag ( void )\n予測される、あるいは事前に設定された独自の ETag を取得します。
static string HttpResponse::getFile ( void )\n事前に設定された、送信されようとしているファイルを取得します。
static bool HttpResponse::getGzip ( void )\n現在の gzip 圧縮設定を取得します。
static mixed HttpResponse::getHeader ([ string $name ] )\n送信されようとしているヘッダを取得します。
static int HttpResponse::getLastModified ( void )\n予測される、あるいは事前に設定された Last-Modified 日付を取得します。
string http_get_request_body ( void )\n生のリクエスト本文 (例: POST あるいは PUT データ) を取得します。\nリクエストメソッドが POST 以外の場合は、 http_get_request_body_stream() の後にこの関数を使用することはできません。
resource http_get_request_body_stream ( void )\nストリームを作成し、生のリクエスト本文 (例: POST あるいは PUT データ) を読み込めるようにします。\nリクエストメソッドが POST 以外の場合は、この関数は一度しか使用できません。
array http_get_request_headers ( void )\n受け取った HTTP ヘッダの一覧を取得します。
static resource HttpResponse::getStream ( void )\n事前に設定された、送信されようとしているリソースを取得します。
static double HttpResponse::getThrottleDelay ( void )\n現在の throttle delay を取得します。
static string HttpResponse::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )\n指定された本文の content type を、libmagic を使用して推測します。\n推測に成功すると、その結果の Content-Type が自動的にレスポンスの Content-Type として設定されます。
void http_redirect ([ string $url [, array $params [, bool $session = false [, int $status ]]]] )\n指定した url にリダイレクトします。\n指定した url は http_build_url() で展開され、 params の内容は http_build_str() で扱われます。 また、session が true の場合はセッション ID が付加されます。 HTTP レスポンスコードは、status に応じたものが設定されます。 リダイレクト定数 のいずれかを使用すると便利です。 どのような場面でどのようなレスポンスコードが返されるのかについては、 &raquo; RFC 2616 を参照ください。デフォルトでは、いちばんうまく当てはまるステータスを PHP が決定します。\nRFC に準拠するため、クライアントがすぐにリダイレクトしない場合でも &quot;Redirecting to <a>URL</a>.&quot; と表示されます。 また、リクエストメソッドは HEAD 以外のものとなります。\nINI 設定 http.log.redirect が設定されており、リダイレクトの試みが成功した場合には リダイレクトのログにエントリが書き込まれます。
static bool HttpResponse::send ([ bool $clean_ob = true ] )\nエンティティを送信します。\nキャッシュ処理に成功すると PHP の処理を終了します。そして、 INI 設定 http.log.cache が設定されている場合にはログにエントリを書き出します。 &quot;終了&quot; の意味については、INI 設定 http.force_exit を参照ください。
static bool HttpResponse::setBufferSize ( int $bytes )\n抑止機構の送信バッファの大きさを設定します。
static bool HttpResponse::setCache ( bool $cache )\nエンティティのキャッシュを試みるかどうかを設定します。\nこれは、必要なキャッシュヘッダを設定したうえで、クライアントの If-Modified-Since および If-None-Match ヘッダを調べます。これらのヘッダのいずれかにマッチした場合、 ステータスコード 304 Not Modified が発行されます。
static bool HttpResponse::setCacheControl ( string $control [, int $max_age = 0 [, bool $must_revalidate = true ]] )\nCache-Control ヘッダを定義します。 通常は private または public です。
static bool HttpResponse::setContentDisposition ( string $filename [, bool $inline = false ] )\nContent-Disposition を設定します。 Content-Disposition ヘッダは、 実際に送信するデータがファイルなどであり、それをクライアント/ユーザに &quot;保存&quot; させたい (ブラウザのポップアップ &quot;名前を付けて保存...&quot; を出させたい) 場合に便利です。
static bool HttpResponse::setContentType ( string $content_type )\n送信されるエンティティの Content-Type を設定します。
static bool HttpResponse::setData ( mixed $data )\n送信されるデータを設定します。
static bool HttpResponse::setETag ( string $etag )\n独自の ETag を設定します。 これが何を意味するのかをわかっている人以外は使用しないでください。
static bool HttpResponse::setFile ( string $file )\n送信されるファイルを設定します。
static bool HttpResponse::setGzip ( bool $gzip )\n送信されるエンティティを、その場で gzip 圧縮する処理を有効にします。
static bool HttpResponse::setHeader ( string $name [, mixed $value [, bool $replace = true ]] )\nHTTP ヘッダを送信します。
static bool HttpResponse::setLastModified ( int $timestamp )\n独自の Last-Modified 日時を設定します。
static bool HttpResponse::setStream ( resource $stream )\n送信されるリソースを設定します。
static bool HttpResponse::setThrottleDelay ( float $seconds )\nthrottle delay を設定します。
bool http_send_status ( int $status )\nHTTP ステータスコードを送信します。
string hw_array2objrec ( array $object_array )\nobject_array をオブジェクトレコードに変換します。 &#039;Title&#039; のような異なった言語で多重定義された属性は正しく処理されます。
bool hw_changeobject ( int $link , int $objid , array $attributes )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array hw_children ( int $connection , int $objectID )\nコレクションの子の ID を返します。
array hw_childrenobj ( int $connection , int $objectID )\nコレクションの子のオブジェクトレコードを返します。
bool hw_close ( int $connection )\nHyperwave サーバとの接続を閉じます。
int hw_connect ( string $host , int $port [, string $username ], string $password )\nHyperwave サーバへの接続をオープンします。 複数の接続を一度にオープンすることができます。
void hw_connection_info ( int $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int hw_cp ( int $connection , array $object_id_array , int $destination_id )\n2番目のパラメータとして指定されたオブジェクトID を有するオブジェクト ID destination id を有するコレクションにコピーします。
bool hw_deleteobject ( int $connection , int $object_to_delete )\n2 番目のパラメータで指定されたオブジェクト ID を有するオブジェクトを 削除します。この関数は、オブジェクトの全てのインスタンスを削除します。
int hw_docbyanchor ( int $connection , int $anchorID )\nanchorID が指す ドキュメントのオブジェクト ID を返します。
string hw_docbyanchorobj ( int $connection , int $anchorID )\nanchorID が指す ドキュメントのオブジェクトレコードを返します。
string hw_document_attributes ( int $hw_document )\nドキュメントのオブジェクトレコードを返します。\n下位互換性のためにhw_DocumentAttributes() も 使用可能です。しかし、この関数の使用は推奨されません。
string hw_document_bodytag ( int $hw_document [, string $prefix ] )\nドキュメントの BODY タグを返します。そのドキュメントが HTML ドキュメントの場合、BODY タグがドキュメントの前に 出力されます。\n下位互換性のため hw_DocumentBodyTag() も使用可能です。しかし、推奨されません。
string hw_document_content ( int $hw_document )\nドキュメントの内容を取得します。
bool hw_document_setcontent ( int $hw_document , string $content )\nドキュメントの内容を設定または置換します。ドキュメントが HTML ドキュメントの場合、内容はすべて BODY タグの後となります。HEAD および BODY タグからの情報は、オブジェクトレコードに保存されます。ドキュメントの 内容の中にもこの情報を与えた場合、Hyperwave サーバはドキュメントが 挿入された際にオブジェクトレコードを変更します。 これは恐らくあまり良い考えではありません。 この関数は、ドキュメントが古い内容を保持する場合に失敗します。
int hw_document_size ( int $hw_document )\nドキュメントのサイズを返します。\n下位互換性のため、hw_DocumentSize() も使用可能です。しかし、この関数の使用は推奨されません。
string hw_dummy ( int $link , int $id , int $msgid )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool hw_edittext ( int $connection , int $hw_document )\nテキストドキュメントをサーバにアップロードします。 ドキュメントのオブジェクトレコードは、そのドキュメントを編集している間、 修正することができません。\nこの関数は、純粋なテキストドキュメントについてのみ動作します。 この関数は、特別なデータ接続をオープンしないため、伝送の間、 制御用の接続をブロックします。
int hw_error ( int $connection )\n直近のコマンドのエラー番号を返します。
string hw_errormsg ( int $connection )\n直近のコマンドのエラーメッセージを含む文字列を返します。
bool hw_free_document ( int $hw_document )\nHyperwave ドキュメントにより占有されたメモリを解放します。
array hw_getanchors ( int $connection , int $objectID )\n指定したドキュメントのアンカーのオブジェクト ID の配列を返します。
array hw_getanchorsobj ( int $connection , int $objectID )\nオブジェクト ID objectID を有するドキュメントの アンカーのオブジェクトレコードの配列を返します。
string hw_getandlock ( int $connection , int $objectID )\nID objectID を有するオブジェクトの オブジェクトレコードを返します。 また、オブジェクトをロックします。このため、ロックを解放するまで、 他のユーザはアクセスできません。
array hw_getchildcoll ( int $connection , int $objectID )\nオブジェクト ID の配列を返します。各オブジェクト ID は、 ID objectID を有するコレクションの 子コレクションに属しています。 この関数は、子ドキュメントを返しません。
array hw_getchildcollobj ( int $connection , int $objectID )\nオブジェクトレコードの配列を返します。各オブジェクトレコードは、 ID objectID を有するコレクションの 子コレクションに属しています。 この関数は、子ドキュメントを返しません。
array hw_getchilddoccoll ( int $connection , int $objectID )\nコレクションの子ドキュメントに関するオブジェクト ID の配列を返します。
array hw_getchilddoccollobj ( int $connection , int $objectID )\nコレクションの子ドキュメントに関するオブジェクトレコードの配列を返します。
mixed hw_getobject ( int $connection , mixed $objectID [, string $query ] )\nオブジェクトレコードを取得します。 二番目のパラメータが整数(スカラー)の場合、ID objectID を有するオブジェクトの オブジェクトレコードを返します。
array hw_getobjectbyquery ( int $connection , string $query , int $max_hits )\nサーバ全体のオブジェクトを検索し、オブジェクト ID の配列を返します。
array hw_getobjectbyquerycoll ( int $connection , int $objectID , string $query , int $max_hits )\nID objectID を有するコレクションのオブジェクトを 検索し、オブジェクト ID の配列を返します。
array hw_getobjectbyquerycollobj ( int $connection , int $objectID , string $query , int $max_hits )\nID objectID を有するコレクションのオブジェクトを 検索し、オブジェクトレコードの配列を返します。
array hw_getobjectbyqueryobj ( int $connection , string $query , int $max_hits )\nサーバ全体のオブジェクトを検索し、オブジェクトレコードの配列を返します。
array hw_getparents ( int $connection , int $objectID )\nオブジェクトの親のオブジェクト ID を返します。
array hw_getparentsobj ( int $connection , int $objectID )\nオブジェクトレコードの添字配列に加えてオブジェクトでコードに関する 統計情報を含む連想配列を返します。各オブジェクトレコードは、 ID objectID を有するオブジェクトの 親に属しています。
string hw_getrellink ( int $link , int $rootid , int $sourceid , int $destid )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int hw_getremote ( int $connection , int $objectID )\nリモートドキュメントを取得します。\nHyperwave 表記のリモートドキュメントは、 外部ソースから取得されたドキュメントです。一般的なリモートドキュメントは、 例えば外部 Web ページまたはデータベースのクエリです。\n外部ソースをアクセス可能とするために、Hyperwave では CGI に似た HGI(Hyperwave Gateway Interface)を導入しています。現在、 ftp,http サーバといくつかのデータベースのみが HGI によりアクセス可能です。\nhw_GetRemote() をコールすることにより 外部ソースからのドキュメントが返されます。この関数を使用したい場合、 HGI を熟知している必要があります。外部ソースをアクセスするために Hyperwave のかわりに PHP を使用することも考慮する必要があります。 Hyperwave ゲートウエイにデータベースのサポートを付加するのは、PHP において同じことを行うよりもより困難です。
mixed hw_getremotechildren ( int $connection , string $object_record )\nリモートドキュメントの子を返します。リモートドキュメントの 子は、リモートドキュメント自身です。これは、データベースクエリ の範囲を限定する必要があることを意味し、このことは、Hyperwave Programmers&#039; Guide に説明されています。\nこの関数を使用したい場合、HGI に習熟している必要があります。 外部ソースをアクセスするために Hyperwave のかわりに PHP を使用することも 考慮する必要があります。Hyperwave ゲートウエイにデータベースのサポートを 付加するのは、PHP において同じことを行うよりもより困難です。
array hw_getsrcbydestobj ( int $connection , int $objectID )\nID objectID を有するオブジェクトを指す 全てのアンカーのオブジェクトレコードを返します。
int hw_gettext ( int $connection , int $objectID [, mixed $rootID/prefix ] )\nオブジェクト ID objectID を有するドキュメントを 返します。ドキュメントが、挿入可能なアンカーを有している場合、 既に挿入されています。\nこの関数は、純粋なテキストドキュメントについてのみ動作します。 特別なデータ接続をオープンしないため、伝達の間、 制御用の接続はブロックされます。
string hw_getusername ( int $connection )\n接続を行っているユーザ名を返します。
string hw_identify ( int $link , string $username , string $password )\nユーザを username および password で認証します。 認証は、カレントのセッションでのみ有効です。 この関数が頻繁に必要とされるとは考えられません。 多くの場合、接続をオープンする際に認証を行う方がより 簡単でしょう。
array hw_incollections ( int $connection , array $object_id_array , array $collection_id_array , int $return_collections )\nobject_id_array により指定された オブジェクトの組 (ドキュメントまたはコレクション）が、 コレクション collection_id_array により定義された コレクションの一部であるかどうかを調べます。
string hw_info ( int $connection )\n現在の接続に関する情報を返します。
int hw_inscoll ( int $connection , int $objectID , array $object_array )\nobject_array の中の属性を有する新しいコレクションを オブジェクト ID objectID のコレクションに 挿入します。
int hw_insdoc ( resource $connection , int $parentID , string $object_record [, string $text ] )\nobject_record の中の属性を有する 新しいドキュメントをコレクションに挿入します。\n汎用の一般的なドキュメントを挿入したい場合は、代わりに hw_insertdocument() を使用してください。
bool hw_insertanchors ( int $hwdoc , array $anchorecs , array $dest [, array $urlprefixes ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int hw_insertdocument ( int $connection , int $parent_id , int $hw_document )\nドキュメントを、指定したコレクションにアップロードします。\nドキュメントは、事前に hw_NewDocument() で 作成されている必要があります。 新規ドキュメントのオブジェクトレコードは、少なくとも次の属性を 有しているよう注意してください。: Type, DocumentType, Title ,Name MimeType を設定したい場合もあるかもしれません。
int hw_insertobject ( int $connection , string $object_rec , string $parameter )\nオブジェクトをサーバに挿入します。\n注意: アンカーを挿入したい場合、属性 Position は常に start/end の値または &#039;invisible&#039; のどちらかに常に 設定されています。 不可視(invisible)位置は、注釈が対応する注釈文へのリンクを 有していない場合に必要です。
int hw_mapid ( int $connection , int $server_id , int $object_id )\nhyperwave サーバのグローバルオブジェクト ID を、 仮想的なオブジェクト ID に割りつけます。 これは、hw_connect() で接続を行っていない場合でも 行われます。\nこの仮想オブジェクト ID は、 hw_getobject() でオブジェクトレコードを得るといった用途に 他のオブジェクト ID と同様に使用することが可能です。\n注意: この関数を使用するには、F_DISTRIBUTED フラグを設定しておく必要があります。 このフラグは、現在のところコンパイル時に hg_comm.c の中で設定することのみが可能です。 このフラグは、デフォルトでは設定されていません。 hg_comm.c の先頭にあるコメントをお読みください。
bool hw_modifyobject ( int $connection , int $object_to_change , array $remove , array $add [, int $mode ] )\nこのコマンドによりオブジェクトレコードの個々の属性を削除、追加、 修正することが可能となります。オブジェクトはオブジェクト ID object_to_change により指定します。 ある属性を修正するためには、古い属性を削除し、新規に追加する 必要があります。hw_modifyobject() は、 削除する属性の値が文字列または配列でない限り、つねに属性を追加する前に 属性の削除を行います。\n二つの配列のキーは属性の名前です。各配列要素の値は、配列または文字列 またはその他のものとすることができます。配列の場合、各属性の 値は、各要素のキーにコロンと各要素の値を加えたものから構成されます。 文字列の場合、属性の値として指定します。空文字列を指定すると その属性は完全に削除されます。値が文字列でも配列でもなく、整数の ような他のものである場合、その属性に関して処理は全く行われません。 このような動作は、既存の属性に新規の値を追加するのではなく、 完全に新規の属性を追加したい場合に必要です。remove 配列がその属性に 関する空の文字列を含む場合、値が存在しないため、その属性の削除は 失敗します。続いてその属性に新規の値を追加する処理も同じく失敗します。 属性の値を例えば 0 に設定すると削除することさえできませんが、 加算は実行可能です。\n値 &#039;books&#039; を有する属性 &#039;Name&#039; を &#039;articles&#039; に変更したい場合、 二つの配列を作成し、hw_modifyobject() をコールする 必要があります。
int hw_mv ( int $connection , array $object_id_array , int $source_id , int $destination_id )\nコレクション内の指定したオブジェクトを別のコレクションに移動します。
int hw_new_document ( string $object_record , string $document_data , int $document_size )\n指定したドキュメントデータとオブジェクトレコードから新しい Hyperwave ドキュメントを返します。\nこの関数は、ドキュメントを Hyperwave サーバに挿入しません。
array hw_objrec2array ( string $object_record [, array $format ] )\nobject_record をオブジェクト配列に変換します。
bool hw_output_document ( int $hw_document )\nBODY タグを除きドキュメントを出力します。\n下位互換性のため、hw_OutputDocument() も使用可能です。しかし、この関数の使用は推奨されません。
int hw_pconnect ( string $host , int $port [, string $username ], string $password )\nHyperwave サーバへの持続的接続をオープンします。 同時に複数の持続的接続をオープンすることができます。
int hw_pipedocument ( int $connection , int $objectID [, array $url_prefixes ] )\n指定したオブジェクト ID の Hyperwave ドキュメントを取得します。 ドキュメントが、挿入可能なアンカーを有している場合、 既に挿入されているかもしれません。\nドキュメントは、制御用接続をブロックしない特別なデータ接続により伝達されます。
int hw_root ( void )\nhyperroot コレクションのオブジェクト ID を返します。 現在、これは常に 0 となります。hyperroot の子コレクションは、 接続するサーバのルートコレクションです。
int hw_setlinkroot ( int $link , int $rootid )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string hw_stat ( int $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool hw_unlock ( int $connection , int $objectID )\nドキュメントをアンロックし、他のユーザーが再びアクセスできるようにします。
array hw_who ( int $connection )\n現在ログイン中のユーザの一覧を取得します。
hw_api_attribute\nstring key ( void )\n属性の名前を返します。
hw_api_attribute\nstring langdepvalue ( string $language )\n属性の、指定した言語における値を返します。
hw_api_attribute\nstring value ( void )\n属性の値を取得します。
hw_api_attribute\narray values ( void )\n属性のすべての値を取得します。
HW_API_Attribute hw_api_attribute ([ string $name [, string $value ]] )\n指定した名前および値を使用して、hw_api_attribute の新しいインスタンスを作成します。
hw_api\nbool checkin ( array $parameter )\nこの関数は、オブジェクトあるいはオブジェクト階層の全体をチェックインします。 パラメータ配列の中には、必須要素 &#039;objectIdentifier&#039; およびオプションの要素 &#039;version&#039;、&#039;comment&#039;、&#039;mode&#039;、&#039;objectQuery&#039; が含まれます。&#039;version&#039; ではオブジェクトのバージョンを設定します。 これは、メジャーバージョンとマイナーバージョンをピリオドで区切ったものです。 version が設定されていない場合、マイナーバージョンがひとつ加算されます。 &#039;mode&#039; は以下の値のいずれかです。   HW_API_CHECKIN_NORMAL   オブジェクトをチェックインし、コミットします。 オブジェクトは文書でなければなりません。    HW_API_CHECKIN_RECURSIVE   チェックインするオブジェクトがコレクションであった場合、 もし子要素が文書であればそれらもすべて再帰的にチェックインされます。 コレクションをチェックインしようとすると、エラーが発生することがあります。    HW_API_CHECKIN_FORCE_VERSION_CONTROL   バージョン管理されていないオブジェクトも強制的にチェックインします。    HW_API_CHECKIN_REVERT_IF_NOT_CHANGED   新しいバージョンが以前のバージョンと変わっているかどうかを調べます。 変わっている場合にのみオブジェクトがチェックインされます。    HW_API_CHECKIN_KEEP_TIME_MODIFIED   直近のオブジェクトの更新時刻を保持します。    HW_API_CHECKIN_NO_AUTO_COMMIT   オブジェクトのチェックイン時に、自動的なコミットは行われません。
hw_api\nbool checkout ( array $parameter )\nこの関数は、オブジェクトあるいはオブジェクト階層の全体をチェックアウトします。
hw_api\narray children ( array $parameter )\nコレクションの子、あるいは文書の属性を取得します。 オブジェクトクエリによって、取得する内容をさらに絞り込むことが可能です。
hw_api_content\nstring mimetype ( void )\nコンテンツの mimetype を返します。
hw_api_content\nstring read ( string $buffer , int $len )\nコンテンツを len バイト分読み込み、 指定したバッファに保存します。
hw_api\nHW_API_Content content ( array $parameter )\nこの関数は、文書のコンテンツを hw_api_content 型のオブジェクトとして返します。
hw_api\nhw_api_content copy ( array $parameter )\nこの関数は物理的なコピーを作成します。 もしコンテンツが含まれる場合は、それも含めてコピーされ、 新しいオブジェクトあるいはエラーオブジェクトを返します。
hw_api\nhw_api_object dbstat ( array $parameter )\nデータベースサーバの統計情報を返します。
hw_api\nhw_api_object dcstat ( array $parameter )\n文書キャッシュサーバの統計情報を返します。
hw_api\narray dstanchors ( array $parameter )\nオブジェクトのすべての対象アンカーを取得します。
hw_api\nhw_api_object dstofsrcanchor ( array $parameter )\n指定したソースアンカーが指す対象オブジェクトを取得します。 対象オブジェクトは、対象アンカーあるいは文書全体となります。
hw_api_error\nint count ( void )\nエラーの原因の数を返します。
hw_api_error\nHW_API_Reason reason ( void )\n最初のエラーの原因を返します。
hw_api\narray find ( array $parameter )\nこの関数は、キーやフルテキストクエリを使用してオブジェクトを検索します。 見つかったオブジェクトは、オプションのオブジェクトクエリによって さらに絞り込むことができます。また、その重要性の順に並べ替えられます。 2 回目の検索は相対的に遅くなり、その結果はある程度絞り込まれます。 これによりインクリメンタルな検索ができ、前の検索の結果をもとに 検索を進めていくことが可能となります。
hw_api\nhw_api_object ftstat ( array $parameter )\nフルテキストサーバの統計情報を返します。
HW_API hwapi_hgcsp ( string $hostname [, int $port ] )\nホスト hostname 上の Hyperwave サーバへの接続をオープンします。 プロトコルは HGCSP を使用します。
hw_api\nhw_api_object hwstat ( array $parameter )\nHyperwave サーバについての統計情報を返します。
hw_api\nbool identify ( array $parameter )\nHyperwave サーバにログインします。
hw_api\narray info ( array $parameter )\nサーバ設定についての情報を返します。
hw_api\nhw_api_object insert ( array $parameter )\n新しいオブジェクトを挿入します。オブジェクトは ユーザ(user)・グループ(group)・文書(document)・アンカー(anchor) のいずれかの型となります。 オブジェクトの型に応じて、設定すべき他の属性が決まります。
hw_api\nhw_api_object insertanchor ( array $parameter )\nこの関数は hwapi_insert() の短縮版です。 アンカー型のオブジェクトを挿入し、必要な属性を設定します。
hw_api\nhw_api_object insertcollection ( array $parameter )\nこの関数は hwapi_insert() の短縮版です。 コレクション型のオブジェクトを挿入し、必要な属性を設定します。
hw_api\nhw_api_object insertdocument ( array $parameter )\nこの関数は hwapi_insert() の短縮版です。 内容を含むのオブジェクトを挿入し、文書に必要な属性を設定します。
hw_api\nbool link ( array $parameter )\nオブジェクトへのリンクを作成します。このリンクへのアクセスは、 リンクが指している先のオブジェクトへのアクセスと同じになります。
hw_api\nbool lock ( array $parameter )\nこの関数をコールすると、オブジェクトを排他的に編集するためにロックします。 ロックを解除できるのは、ロックしたユーザあるいはシステムユーザのみです。
hw_api\nbool move ( array $parameter )\nコレクション間でオブジェクトを移動します。
HW_API_Content hw_api_content ( string $content , string $mimetype )\n文字列 content から新しいコンテンツオブジェクトを作成します。
hw_api_object\nbool assign ( array $parameter )\nオブジェクトの属性を複製します。
hw_api_object\nbool attreditable ( array $parameter )\n属性が編集可能かどうかを調べます。
hw_api_object\nint count ( array $parameter )\n属性の数を返します。
hw_api_object\nbool insert ( HW_API_Attribute $attribute )\nオブジェクトに新しい属性を追加します。
hw_api_object hw_api_object ( array $parameter )\nhw_api_object クラスの新しいインスタンスを作成します。
hw_api_object\nbool remove ( string $name )\n指定した名前の属性を削除します。
hw_api_object\nstring title ( array $parameter )\ntitle 属性を返します。
hw_api_object\nstring value ( string $name )\n指定した名前の属性の値を返します。
hw_api\nhw_api_object object ( array $parameter )\nこの関数は、いずれかのバージョンのオブジェクトの属性情報を取得します。 文書の内容は返しません。
hw_api\nhw_api_object objectbyanchor ( array $parameter )\nこの関数は、指定したアンカーが属しているオブジェクトを取得します。
hw_api\narray parents ( array $parameter )\nオブジェクトの親を取得します。オブジェクトクエリを指定することにより、 親をさらに絞り込むことが可能です。
hw_api_reason\nstring description ( void )\n原因の説明を返します。
hw_api_reason\nHW_API_Reason type ( void )\n原因の型を返します。
hw_api\nbool remove ( array $parameter )\n指定した親から、オブジェクトを削除します。コレクションは、 再帰的に削除されます。
hw_api\nhw_api_object replace ( array $parameter )\nオブジェクトの属性および内容を置き換えます。
hw_api\nhw_api_object setcommittedversion ( array $parameter )\n文書をコミットします。コミットされたバージョンが、 読み込みアクセス権を持つユーザから見えるものとなります。 デフォルトでは、最後のバージョンがコミットされたバージョンとなります。
hw_api\narray srcanchors ( array $parameter )\nオブジェクトの全てのソースアンカーを取得します。
hw_api\narray srcsofdst ( array $parameter )\n指定した対象を指しているすべてのソースアンカーを取得します。 対象となるオブジェクトとしては、 対象アンカーあるいはドキュメント全体を指定できます。
hw_api\nbool unlock ( array $parameter )\nロックされたオブジェクトのロックを解除します。 ロックを解除できるのは、そのオブジェクトをロックしたユーザか システムユーザのみです。
hw_api\nhw_api_object user ( array $parameter )\n自分自身のユーザオブジェクトを返します。
hw_api\narray userlist ( array $parameter )\nログイン中の全ユーザの一覧を返します。
float hypot ( float $x , float $y )\nhypot() は、直角をはさむ 2 辺の長さが x および y である 直角三角形の斜辺の長さ、すなわち原点と (x , y ) との距離を返します。 これは sqrt(x*x + y*y) と等価です。
bool ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )\nPHP 4 では、service_handle パラメータの かわりに server 、 dba_user_name および dba_user_password を使用します。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ibase_affected_rows ([ resource $link_identifier ] )\nこの関数は、link_identifier で指定された トランザクション内で実行された直近のクエリ(INSERT、UPDATE あるいは DELETE)によって変更された行の数を返します。
mixed ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = false ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ibase_blob_add ( resource $blob_handle , string $data )\nibase_blob_add() は、 ibase_blob_create() で作成した blob にデータを追加します。
bool ibase_blob_cancel ( resource $blob_handle )\nこの関数は、まだ ibase_blob_close() で閉じられていない場合に BLOB を捨てます。
mixed ibase_blob_close ( resource $blob_handle )\nこの関数は、読み込み用に ibase_blob_open() でオープンされたかあるいは書き込み用に ibase_blob_create() でオープンされた BLOB を閉じます。
resource ibase_blob_create ([ resource $link_identifier = NULL ] )\nibase_blob_create() は、 データを書き込むための新しい BLOB を生成します。
bool ibase_blob_echo ( string $blob_id )\nbool ibase_blob_echo ( resource $link_identifier , string $blob_id )\nこの関数は読み込み用に BLOB をオープンし、直接その内容を標準出力 (たいていの場合はブラウザ) に送信します。
string ibase_blob_get ( resource $blob_handle , int $len )\nこの関数は、ibase_blob_open() によって読み込み用に オープンした BLOB から最大 len バイトを返します。
string ibase_blob_import ( resource $link_identifier , resource $file_handle )\nstring ibase_blob_import ( resource $file_handle )\nこの関数は BLOB を作成し、その中にファイルのすべての内容を読み込み、 それを閉じ、関連付けられた BLOB ID を返します。
array ibase_blob_info ( resource $link_identifier , string $blob_id )\narray ibase_blob_info ( string $blob_id )\nBLOB の長さや他の便利な情報を返します。
resource ibase_blob_open ( resource $link_identifier , string $blob_id )\nresource ibase_blob_open ( string $blob_id )\n既存の BLOB を読み込み用にオープンします。
bool ibase_close ([ resource $connection_id = NULL ] )\nibase_connect() から返された接続 ID が指す InterBase データベースへのリンクを閉じます。 接続 ID が省略された場合、最後にオープンされたリンクが仮定されます。 リンクにおけるデフォルトのトランザクションがコミットされ、 他のトランザクションはロールバックされます。
bool ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] )\nトランザクションを閉じずにコミットします。
bool ibase_commit ([ resource $link_or_trans_identifier = NULL ] )\nトランザクションをコミットします。
resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )\nInterBaseサーバへの接続を確立します。\n同じ引数で ibase_connect() が再度コールされた場合、 新規のリンクは作成されず、代わりに既にオープンされているリンクの リンク ID が返されます。 ibase_close() を明示的にコールしない限り、 サーバへのリンクはスクリプトの実行終了時に閉じられます。
string ibase_db_info ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_delete_user ( resource $service_handle , string $user_name )\nPHP 4 では、service_handle パラメータの かわりに server 、 dba_user_name および dba_user_password を使用します。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_drop_db ([ resource $connection = NULL ] )\nこの関数は、ibase_connect() あるいは ibase_pconnect() のいずれかによってオープンされたデータベースを削除します。 データベースがクローズされ、サーバから削除されます。
int ibase_errcode ( void )\n直近の InterBase 関数のコールによって得られたエラーコードを返します。
string ibase_errmsg ( void )\n直近の InterBase 関数コールの結果として得られるエラーメッセージを返します。
resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )\nibase_prepare() で準備したクエリを実行します。\nいくつかのパラメータが変わるだけで同じクエリを 複数回実行する場合には、この関数は ibase_query() を使用するよりもずっと効率的です。
array ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] )\nクエリの結果の行を連想配列で返します。\nibase_fetch_assoc() は、 result から結果を 1 行取得します。 同じフィールド名のカラムが 2 つ以上存在する場合、最後のカラムが 優先されます。同名のその他のカラムにアクセスするには、 ibase_fetch_row() を使用して数値添字を用いるか あるいはクエリ中でカラムに別名をつけます。
object ibase_fetch_object ( resource $result_id [, int $fetch_flag = 0 ] )\n指定した結果 ID から、行を疑似オブジェクトとして取得します。\nibase_fetch_object() を続けてコールすると、 結果セットの次の行を返します。
array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] )\nibase_fetch_row() は、指定した result_identifier に関連付けられた結果からデータを 1 行取得します。\nibase_fetch_row() を続けてコールすると、 結果セットの次の行を返します。行がもうない場合には FALSE を返します。
array ibase_field_info ( resource $result , int $field_number )\nselect クエリが実行された後、フィールドに関する情報を配列として返します。
bool ibase_free_event_handler ( resource $event )\nこの関数は、event で指定した登録済みの イベントハンドラをキャンセルします。イベントに対応して登録されていた コールバック関数は、もはやコールされません。
bool ibase_free_query ( resource $query )\nプリペアドクエリを解放します。
bool ibase_free_result ( resource $result_identifier )\n結果セットを解放します。
mixed ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nPHP 4 では、service_handle パラメータのかわりに server 、 dba_user_name および dba_user_password を使用します。
bool ibase_name_result ( resource $result , string $name )\nこの関数は、結果セットに新しい名前を割り当てます。この名前は、後で UPDATE|DELETE ... WHERE CURRENT OF name 文で使用します。
int ibase_num_fields ( resource $result_id )\n結果セットにおけるフィールド数を整数として返します。
int ibase_num_params ( resource $query )\nこの関数は、query で指定した プリペアドクエリのパラメータの数を返します。 ibase_execute() をコールする際に、 この数と同じだけのバインド引数が割り当てられている必要があります。
array ibase_param_info ( resource $query , int $param_number )\nクエリが準備された後に、パラメータについての情報を配列で返します。
resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )\nInterBase データベースへの持続的な接続をオープンします。\nibase_pconnect() の動作は ibase_connect() と非常に似ていますが、 大きな違いが二つあります。\nまず、この関数は接続時に同じパラメータで既にオープンされている (持続的)リンクを探します。見つかった場合、新規接続をオープンする 代わりにそのリンクの ID が返されます。\n2 番目の違いとしては、InterBase サーバへの接続は スクリプト終了時にも閉じられないということです。 代わりに、そのリンクは今後使用するためにオープンされたままとなります (ibase_close() は ibase_pconnect() によりオープンされたリンクを閉じません)。 このため、この型のリンクは&#039;持続的(persistent)&#039;と呼ばれます。
resource ibase_prepare ( string $query )\nresource ibase_prepare ( resource $link_identifier , string $query )\nresource ibase_prepare ( resource $link_identifier , string $trans , string $query )\n対応するパラメータのバインドや (ibase_execute() による) 実行をするためのクエリを準備します。
resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )\nInterBase データベース上でクエリを実行します。
mixed ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = false ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] )\nトランザクションを閉じずにロールバックします。
bool ibase_rollback ([ resource $link_or_trans_identifier = NULL ] )\nトランザクションをロールバックします。
string ibase_server_info ( resource $service_handle , int $action )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ibase_service_attach ( string $host , string $dba_username , string $dba_password )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ibase_service_detach ( resource $service_handle )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ibase_set_event_handler ( callback $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )\nresource ibase_set_event_handler ( resource $connection , callback $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )\nこの関数は、指定したイベントのハンドラとして PHP ユーザ関数を登録します。
bool ibase_timefmt ( string $format [, int $columntype ] )\nクエリから返される timestamp、data、time 型カラムのフォーマットを設定します。\nPHP 設定ディレクティブ ibase.timestampformat、 ibase.dateformat および ibase.timeformat によりこれらのフォーマットのデフォルト値を設定することが可能です。
resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )\nresource ibase_trans ([ resource $link_identifier [, int $trans_args ]] )\nトランザクションを開始します。
string ibase_wait_event ( string $event_name1 [, string $event_name2 [, string $... ]] )\nstring ibase_wait_event ( resource $connection , string $event_name1 [, string $event_name2 [, string $... ]] )\nこの関数は、指定したイベントのうちのひとつがデータベースで発生するまで スクリプトの実行を停止します。発生したイベントの名前を返します。 この関数は、最大 15 のイベントを指定可能です。
mixed iconv_get_encoding ([ string $type = &quot;all&quot; ] )\niconv 拡張モジュールの内部設定変数を取得します。
array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ]] )\n複数の MIME ヘッダフィールドを一度にデコードします。
string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ]] )\nMIME ヘッダフィールドをデコードします。
string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences = NULL ] )\n有効な MIME ヘッダフィールドを作成し、返します。 これは以下のような形式になります。\nSubject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile   上の例では &quot;Subject&quot; がフィールド名、&quot;=?ISO-8859-1?...&quot; で始まる部分が フィールドの値となります。
bool iconv_set_encoding ( string $type , string $charset )\ntype で指定された内部設定変数の値を、 charset に変更します。
int iconv_strlen ( string $str [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ] )\nstrlen() とは違い、iconv_strlen() は与えられたバイト列 str 中に現れる文字の数を 指定された文字セットに基づいて数えます。この結果は、必ずしも文字列の バイト数と一致するとは限りません。
int iconv_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ]] )\nneedle が haystack の中で最初に現れる位置を探します。\nstrpos() の返り値は needle が見つかった位置の 先頭からのバイト数でしたが、それとは異なり iconv_strpos() の返り値は needle が見つかった 位置の先頭からの文字数となります。文字数は charset で指定された文字セットに基づいて 数えられます。
int iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ] )\nstrrpos() の返り値は needle が見つかった位置の 先頭からのバイト数でしたが、それとは異なり iconv_strrpos() の返り値は needle が見つかった 位置の先頭からの文字数となります。
string iconv_substr ( string $str , int $offset [, int $length = 0 [, string $charset = ini_set(&quot;iconv.internal_encoding&quot;) ]] )\n文字列 str の、 start と length で指定された一部を返します。
string iconv ( string $in_charset , string $out_charset , string $str )\n文字列 str の文字セットを in_charset から out_charset に変換します。
string id3_get_frame_long_name ( string $frameId )\nid3_get_frame_long_name() は、 ID3v2 フレームの長い名前を返します。
string id3_get_frame_short_name ( string $frameId )\nid3_get_frame_short_name() は、 ID3v2 フレームの短い名前を返します。
int id3_get_genre_id ( string $genre )\nid3_get_genre_id() は、ジャンルの ID を返します。
array id3_get_genre_list ( void )\nid3_get_genre_list() は、ID3 タグに格納されている すべてのジャンルを配列で返します。この一覧は Eric Kemp によって作成されたもので、後に WinAmp によって拡張されました。\nこの関数は、選択可能なジャンルの一覧を利用者に提供するのに便利です。 ID3 タグを更新する際には、ジャンルは 0 から 147 までの整数値で 指定しなければなりません。
string id3_get_genre_name ( int $genre_id )\nid3_get_genre_name() は、ジャンル ID に対応する名前を返します。
array id3_get_tag ( string $filename [, int $version = ID3_BEST ] )\nid3_get_tag() は、指定したファイルの ID3 タグに 含まれるすべての情報を取得するために使用されます。
int id3_get_version ( string $filename )\nid3_get_version() は、MP3 ファイル内の ID3 タグのバージョンを取得します。\nあるファイルが ID3 v1.1 タグを含んでいるのなら、そのファイルは 常に 1.0 タグも含んでいます。というのも、バージョン 1.1 は単に 1.0 を拡張したものであるからです。
bool id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] )\nid3_remove_tag() は、ID3 タグに格納されている 情報を削除するために使用されます。
bool id3_set_tag ( string $filename , array $tag [, int $version = ID3_V1_0 ] )\nid3_set_tag() は、ID3 タグに格納されている情報を 変更するために使用されます。タグが存在しない場合は、新たに追加されます。
int idate ( string $format [, int $timestamp = time() ] )\n指定された引数 timestamp を、 与えられたフォーマット文字列によりフォーマットし、日付数値を返します。 タイムスタンプが与えられない場合は、現在のローカル時刻が使われます。 つまり、timestamp はオプションであり、 そのデフォルト値は time() の値です。\n関数 date() と異なり、idate() は format パラメータ中は一文字しか受け取りません。
手続き型\nstring idn_to_ascii ( string $domain [, int $options ] )\nUnicode のドメイン名を、IDNAが定めたASCII形式に変換します。
手続き型\nstring idn_to_utf8 ( string $domain [, int $options ] )\nIDNAのASCII方式でエンコードされたドメイン名をUnicodeに変換します。
手続き型\nstring idn_to_utf8 ( string $domain [, int $options ] )\nIDNAのASCII方式でエンコードされたドメイン名をUnicodeに変換します。
int ifx_affected_rows ( resource $result_id )\nresult_id に関連するクエリにより変更された 行の数を返します。\ninsert, update ,delete の場合、その数は、実際に作用された行の数 (sqlerrd[2]) です。select の場合、これは推定値 (sqlerrd[0]) です。 この値を信用してはいけません。データベースサーバは、SELECT により 実際に返される行の数を返すことはありません。これは、この段階 (オプティマイザがクエリ手順を定義している場合には、&quot;PREPARE&quot; を 行った直後) では、行の取得を始めてさえもいないためです。\nifx_prepare() の実行後に、クエリ結果を適当な量に 制限するために使用すると便利です。
bool ifx_blobinfile_mode ( int $mode )\n全ての select クエリに関するデフォルトの BLOB モードを設定します。
bool ifx_byteasvarchar ( int $mode )\n全ての select クエリに関するデフォルトのバイトモードを設定します。
bool ifx_close ([ resource $link_identifier ] )\nifx_close() は、 指定したリンク ID に関連づけられた Informix データベースへの接続を閉じます。\n非持続的接続としてオープンされたリンクはスクリプトの実行終了時に 自動的に閉じられるため、 この関数は通常は必要ではないことに注意してください。\nifx_close() は、ifx_pconnect() により作成された持続的リンクは閉じません。
resource ifx_connect ([ string $database [, string $userid [, string $password ]]] )\nifx_connect() は、Informix サーバへの接続を確立します。\n同じ引数で ifx_connect() を 2 回目にコールした際には、 新規のリンクは確立されず、代わりに既にオープンされたリンクの リンク ID が返されます。\nサーバへのリンクは、ifx_close() のコールに より明示的に事前に閉じない限り、スクリプトの実行終了直後に閉じられます。
int ifx_copy_blob ( int $bid )\n指定した BLOB オブジェクトを二重化します。
int ifx_create_blob ( int $type , int $mode , string $param )\nBLOB オブジェクトを作成します。
int ifx_create_char ( string $param )\n文字オブジェクトを作成します。
bool ifx_do ( resource $result_id )\n事前に準備されたクエリを実行し、カーソルをオープンします。\nエラーの際に、result_id を解放しないでください。\nselect 文でない場合に、ifx_affected_rows() に数を設定します。 これは、ifx_affected_rows() で取得可能です。
string ifx_error ([ resource $link_identifier ] )\n文の結果を表す一文字の文字列、そして、 直近に実行された SQL 文についての SQLSTATE と SQLCODE を返します。
string ifx_errormsg ([ int $errorcode ] )\n直近の Informix エラーに関する Informix エラーメッセージを返します。
array ifx_fetch_row ( resource $result_id [, mixed $position ] )\n結果 ID で指定した結果に対応するデータのひとつの行を取得します。\nifx_fetch_row() を続けてコールした場合、結果セットの 次の行が返されるます。 行がもうない場合は、FALSE が返されます。
array ifx_fieldproperties ( resource $result_id )\nクエリ中の全てのフィールドの Informix SQL フィールドプロパティを 連想配列として返します。プロパティは、以下のような形式となります。 &quot;SQLTYPE;length;precision;scale;ISNULLABLE&quot; ただし、SQLTYPE は、 &quot;SQLVCHAR&quot; 等の Informix 型。ISNULLABLE は、&quot;Y&quot; または &quot;N&quot; となります。
array ifx_fieldtypes ( resource $result_id )\nresult_id のクエリについて、フィールド名をキーとし、 SQL フィールド型をデータとした連想配列を返します。
bool ifx_free_blob ( int $bid )\n指定された BLOB オブジェクト ID の BLOB オブジェクトを削除します。
bool ifx_free_char ( int $bid )\n指定したオブジェクト ID の文字オブジェクトを削除します。
bool ifx_free_result ( resource $result_id )\nresult_id に間連するクエリの リソースを解放します。
string ifx_get_blob ( int $bid )\nBLOB オブジェクトの内容を返します。
string ifx_get_char ( int $bid )\n文字オブジェクトの内容を返します。
array ifx_getsqlca ( resource $result_id )\nresult_id に関連するクエリを実行した後の sqlca.sqlerrd[0] から sqlca.sqlerrd[5] に関する擬似レコードを返します。\ninsert、update、delete の場合、クエリが実行された後、サーバにより 設定される場合と同様にレコードの値が返されます。 これにより、作用を受けた行の数および連番の挿入値にアクセスすることが 可能となります。 SELECT の場合、この値は PREPARE 文の後で保存された値となります。 この値から作用を受けた行の数の&quot;推測&quot;値が分かります。 ifx ドライバにより適当な時に保存された値が取得されるため、 この関数を使用することにより、 SELECT dbinfo(&#039;sqlca.sqlerrdx&#039;) クエリを実行するオーバーヘッドを防止することができます。
int ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] )\nクエリ結果 result_id の全ての行を HTML テーブルにフォーマットします。
bool ifx_nullformat ( int $mode )\n取得する行のデフォルトの返り値を NULL 値に設定します。
int ifx_num_fields ( resource $result_id )\nクエリを準備または実行された後、この関数をコールすることにより、 クエリ結果中でカラム数が得られます。
int ifx_num_rows ( resource $result_id )\nifx_query() または ifx_do() クエリの後、result_id を有する クエリに関してこれまで取得された行の数を返します。
resource ifx_pconnect ([ string $database [, string $userid [, string $password ]]] )\nifx_pconnect() は、二つの大きな違いはあるものの、 ifx_connect() と非常に似た動作をします。\nまず、接続時に、関数は、既にオープンされている同じホスト、ユーザ名、 パスワードの (持続的) リンクを探します。 そのリンクが見つかった場合、新規に接続をオープンする代わりに その ID が返されます。\n第二に、SQL サーバーへの接続は、スクリプトの実行終了時に閉じられません。 代わりにリンクは、後の使用のためにオープンされたままとなります。 (ifx_close() は ifx_pconnect() により確立されたリンクを閉じません。)\nこの型のリンクは、このため、&#039;持続的&#039; であると呼ばれます。
resource ifx_prepare ( string $query , resource $link_identifier [, int $cursor_def ], mixed $blobidarray )\nあとで ifx_do() で使用するための query を準備します。\n&quot;select 型&quot; のクエリの場合はカーソルを宣言してオープンします。 select 以外のクエリは、直接実行されます。\nどちらのタイプのクエリにおいても、(予測または実際の数として) 作用された行の数は ifx_affected_rows() により 取得可能です。\nTEXT (または BYTE) カラムの内容が許すならば、 &quot;ifx_textasvarchar(1)&quot; または &quot;ifx_byteasvarchar(1)&quot; を使用する ことも可能です。 これにより、TEXT (または BYTE) カラムは、select クエリの 通常の (しかし長い) VARCHAR カラムと同様に処理され、 BLOB ID で悩むこともなくなります。\nifx_textasvarchar(0) または ifx_byteasvarchar(0) (デフォルト値) の場合、select クエリは、BLOB ID (整数値) に属するものとして BLOB カラムを返します。 BLOB 関数により文字列またはファイルとして BLOB の値を得ることが 可能です (下記を参照ください)。
resource ifx_query ( string $query , resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]] )\n指定したリンク ID が指す現在アクティブなデータベースに クエリ query を送信します。\n&quot;select 型&quot; のクエリの場合はカーソルを宣言してオープンします。 select 以外のクエリは、直接実行されます。\nどちらのタイプのクエリにおいても、(予測または実際の数として) 作用された行の数は ifx_affected_rows() により 取得可能です。\nTEXT (または BYTE) カラムの内容が許すならば、 &quot;ifx_textasvarchar(1)&quot; または &quot;ifx_byteasvarchar(1)&quot; を使用する ことも可能です。 これにより、TEXT (または BYTE) カラムは、select クエリの 通常の (しかし長い) VARCHAR カラムと同様に処理され、 BLOB ID で悩むこともなくなります。\nifx_textasvarchar(0) または ifx_byteasvarchar(0) (デフォルト値) の場合、select クエリは、BLOB ID (整数値) に属するものとして BLOB カラムを返します。 BLOB 関数により文字列またはファイルとして BLOB の値を得ることが 可能です (下記を参照ください)。
bool ifx_textasvarchar ( int $mode )\n全ての select クエリに関するデフォルトのテキストモードを設定します。
bool ifx_update_blob ( int $bid , string $content )\n指定したBLOB オブジェクト ID bid に関する BLOB オブジェクトの内容を更新します。
bool ifx_update_char ( int $bid , string $content )\n指定した文字オブジェクト bid に関して 文字オブジェクトの内容を更新します。
bool ifxus_close_slob ( int $bid )\n指定した SLOB オブジェクト ID bid の SLOB オブジェクトを削除します。
int ifxus_create_slob ( int $mode )\nSLOB オブジェクトを作成し、オープンします。
bool ifxus_free_slob ( int $bid )\nSLOB オブジェクトを削除します。
int ifxus_open_slob ( int $bid , int $mode )\nSLOB オブジェクトをオープンします。 bid は存在する SLOB ID である必要があります。
string ifxus_read_slob ( int $bid , int $nbytes )\nSLOB オブジェクトから nbytes バイトを読みこみます。
int ifxus_seek_slob ( int $bid , int $mode , int $offset )\nオープンされた SLOB オブジェクトに関する 現在のファイルまたはシーク位置を設定します。
int ifxus_tell_slob ( int $bid )\nオープンされた SLOB オブジェクトに関して 現在のファイルまたはシーク位置を返します。
int ifxus_write_slob ( int $bid , string $content )\nSLOB オブジェクトを文字列に書きこみます。
int ignore_user_abort ([ string $value ] )\nクライアントの接続が切断された際にスクリプトの実行を終了するかどうかを設定します。
int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_get_dir_security ( int $server_instance , string $virtual_path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_get_server_by_comment ( string $comment )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_get_server_by_path ( string $path )\nIIS の各仮想サーバには、インスタンス番号が付けられています。 iis_get_server_by_path() は、ルートディレクトリへの 実際のパスからインスタンス番号を検索します。
int iis_get_server_rights ( int $server_instance , string $virtual_path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_get_service_state ( string $service_id )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_remove_server ( int $server_instance )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_start_server ( int $server_instance )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_start_service ( string $service_id )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_stop_server ( int $server_instance )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int iis_stop_service ( string $service_id )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string image_type_to_extension ( int $imagetype [, bool $include_dot ] )\n指定した定数 IMAGETYPE_XXX に対応する拡張子を返します。
string image_type_to_mime_type ( int $imagetype )\nimage_type_to_mime_type() は IMAGETYPE 定数で指定される Mime-Type を取得します。
bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )\nimage2wbmp() は、イメージ im から filename に WBMP ファイルを作成します。
bool imagealphablending ( resource $image , bool $blendmode )\nimagealphablending() によりTrueColorイメージに 二つの異なる描画モードを使用可能となります。ブレンドモードでは、 全ての描画関数に指定される色のalphaチャネル要素として使用され、 例えばimagesetpixel()では背景色の透過割合を定 義します。結果として、gd は描画色に関してその点に存在する色を自動 的にブレンドし、イメージに結果を保存します。結果のピクセルは、透 明になります。ブレンドモードでない場合、描画色は形式的にそのアル ファチャネル情報にコピーされ、出力ピクセルを置換します。ブレンド モードは、パレットイメージを描画している際には使用できません。
bool imageantialias ( resource $image , bool $enabled )\n直線や多角形を高速に描画するためのアンチエイリアス機能を有効にします。 アルファコンポーネントはサポートしていません。ダイレクトブレンド操作を 使用します。truecolor 画像に対してのみ動作します。\nthickness および styled はサポートしていません。\n背景色が透明な場合にアンチエイリアス機能を使用すると、予期せぬ結果に 終わることがあります。ブレンドメソッドでは、背景色が使用されます。 アルファコンポーネントをサポートしていないため、アルファコンポーネントに 基づいたアンチエイリアス手法は使用できません。
bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )\nimagearc() は、指定した座標を中心とする円弧を描画します。
bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )\nimagechar() は、画像 im 上の座標 x ,y (左上が 0, 0) に color 色で c の最初の文字を描画します。
bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )\n指定した画像 image の指定した位置に、 文字 c を垂直に描画します。
int imagecolorallocate ( resource $image , int $red , int $green , int $blue )\n指定した RGB を配色とする色の ID を返します。\nimagecolorallocate() は image で表される画像上で使用する各々の色を作成する際にコールする必要があります。
int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )\nimagecolorallocatealpha() は、 透明度を指定するパラメータ alpha が追加されている以外は imagecolorallocate() と等価です。
int imagecolorat ( resource $image , int $x , int $y )\nimage で指定された画像上の 特定位置にあるピクセルの色のインデックスを返します。\nPHP が GD ライブラリ 2.0 以上とともにコンパイルされておりかつ画像が True カラーイメージである場合、この関数はそのピクセルの RGB 値を整数で返します。 赤、緑、青のそれぞれの値にアクセスするにはビットシフトとマスキングを利用してください:
int imagecolorclosest ( resource $image , int $red , int $green , int $blue )\n指定した RGB 値に「近い」 画像パレット中の色のインデックスを返します。\n指定した色とパレット上の各色の「距離」は、 RGB 値が三次元空間上の点の座標を表すと考えて計算します。\nもし ファイルからイメージを生成した場合、イメージに使用されている色だけが 解決されます。パレットだけに存在する色は解決されません。
int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )\n指定した RGB 値と alpha レベルに 「近い」画像パレット中の色のインデックスを返します。
int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )\n指定した色に最も近い色合い、白、黒を有する色のインデックスを取得します。
bool imagecolordeallocate ( resource $image , int $color )\nimagecolorallocate() または imagecolorallocatealpha() で確保された色を開放します。
int imagecolorexact ( resource $image , int $red , int $green , int $blue )\n画像パレット中の特定の色のインデックスを返します。\nもし ファイルからイメージを生成した場合、イメージに使用されている色だけが 解決されます。パレットだけに存在する色は解決されません。
int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )\nイメージのパレットで指定した色+アルファ値のインデックスを返します。
bool imagecolormatch ( resource $image1 , resource $image2 )\nパレットイメージの色を True カラーイメージに近づけます。
int imagecolorresolve ( resource $image , int $red , int $green , int $blue )\nこの関数は、指定した色に関するインデックスを常に返します。 その色そのものまたは出来るだけ近い色へのインデックスが返されます。\nもし ファイルからイメージを生成した場合、イメージに使用されている色だけが 解決されます。パレットだけに存在する色は解決されません。
int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )\nこの関数は、指定した色のインデックスを必ず返します。そうでない場合、 正確な色または最も近い別の色のどちらかを返します。
void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue )\nこの関数は、パレット上で指定したインデックス index を 指定した色 color に設定します。 実際にぬりつぶしを実行するオーバーヘッドなしに パレット上の色を使用する画像をぬりつぶしたような効果を得る ことができ、便利です。
array imagecolorsforindex ( resource $image , int $index )\n指定したインデックスに対する色を取得します。
int imagecolorstotal ( resource $image )\n指定した画像パレットの色数を返します。
int imagecolortransparent ( resource $image [, int $color ] )\n指定した画像 image 上の透明色を設定します。
bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )\n画像に畳み込み配列を適用します。 指定した係数とオフセットを使用します。
bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )\nsrc_im の一部、つまり、x,y座標 src_x , src_y を基準として幅src_w 、高さ src_h の領域をdst_im にコピーします。指定された領域は、x,y座標 dst_x ,dst_y にコピー されます。
bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )\nsrc_im のsrc_x , src_y  で始まる幅 src_w 、高さsrc_h の領域を x,y座標で指定した dst_im にコピーします。 定義された部分は、x,y座標、dst_x 、 dst_y にコピーされます。
bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )\nimagecopymergegray() は、 src_im の X,Y座標 src_x , src_y  から 始まる幅src_w 、高さ src_h の領域を dst_im にコピーします。 定義された部分は、x、y座標dst_x 、 dst_y にコピーされます。\nこの関数は imagecopymerge() と同じですが、マー ジをする際に、コピー前にコピー先のピクセルをグレースケールに変換 することにより、コピー先のピクセルをコピー元の色相を維持するとこ ろが異なります。
bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )\nimagecopyresampled() は、イメージの矩形の部分 を別のイメージにコピーします。同時にピクセル値を滑らかに補間を行い、 このため、特にサイズを小さくした場合には鮮明さが維持されます。\n言い換えると、imagecopyresampled() は src_image の座標 (src_x ,src_y ) にある 幅 src_w 、高さ src_h の矩形領域を受け取って、それを dst_image の座標 (dst_x ,dst_y ) にある幅 dst_w 、高さ dst_h の矩形領域に配置します。\nコピー元とコピー先の座標、幅、高さが異なる場合には、 適当なイメージ伸縮が行われます。座標は、左上を基準とします。 この関数は、同じイメージ内の領域にコピーする場合にも使用可能です (dst_image が src_image と同じ場合) が、領域が重なる場合の結果は予測できません。
bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )\nimagecopyresized() は指定した画像の矩形部分を 別の画像へコピーします。dst_image はコピー先の イメージ ID、src_image はコピー元のイメージ ID です。\n言い換えると、imagecopyresized() は src_image の座標 (src_x ,src_y ) にある 幅 src_w 、高さ src_h の矩形領域を受け取って、それを dst_image の座標 (dst_x ,dst_y ) にある幅 dst_w 、高さ dst_h の矩形領域に配置します。\nコピー先とコピー元の座標、幅、高さが異なった場合、画像の一部が 適当に伸縮されます。座標の原点は左上です。(仮に、 dst_image と src_image が 同一であれば)関数は領域のコピーに使うことができますが、領域が 重なったときの結果は予測できません。
resource imagecreate ( int $width , int $height )\nimagecreate() は、 指定した大きさの空の画像を表す画像 ID を返します。\nimagecreatetruecolor() を使うことを推奨します。
resource imagecreatefromgd ( string $filename )\nGD ファイルまたは URL から新規イメージを生成します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromgd2 ( string $filename )\nGD2 ファイルまたは URL から新規イメージを生成します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )\nGD2 ファイルまたは URL の指定した部分から新規イメージを生成します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromgif ( string $filename )\nimagecreatefromgif() は、 指定したファイル名の画像を表す画像 ID を返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromjpeg ( string $filename )\nimagecreatefromjpeg() は引数 filename から得られる画像を表すイメージIDを返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefrompng ( string $filename )\nimagecreatefrompng()は引数 filename から得られる画像を表す画像 ID を返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromstring ( string $data )\nimagecreatefromstring() は、指定した文字列から 得られたイメージを表すイメージ ID を返します。もし、PHP が JPEG, PNG, GIF, WBMP, GD2 をサポートするようビルドされている場合、 イメージの種類は自動的に判別されます。
resource imagecreatefromwbmp ( string $filename )\nimagecreatefromwbmp() は、指定したファイル名から 得られたイメージを表すイメージ ID を返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromxbm ( string $filename )\nimagecreatefromxbm() は、指定した filename から得られたイメージを表すイメージIDを返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatefromxpm ( string $filename )\nimagecreatefromxpm() は、指定した filename から得られたイメージを表すイメージ ID を返します。\nヒント\nfopen wrappers が有効の場合、この関数のファイル名として URL を使用することができます。ファイル名の指定方法に関する詳細は fopen()、サポートされる URL プロトコルの種類 については、(例えば)サポートするプロトコル/ラッパー を参照してください。
resource imagecreatetruecolor ( int $width , int $height )\nimagecreatetruecolor() は、指定した大きさの黒い画像を表す画像 ID を返します。\nこの関数が定義されているかどうかは、PHP および GD のバージョンによって 変わります。PHP 4.0.6 から 4.1.x の場合、GD モジュールが読み込まれていれば この関数は常に存在しますが、GD2 がインストールされていない環境では PHP が致命的なエラーを発生して終了してしまいます。PHP 4.2.x では、 このような場合にエラーではなく警告を発生させます。他のバージョンの PHP では、 適切なバージョンの GD がインストールされている場合にのみ この関数が定義されます。
bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\nこれは古い関数です。代わりに imagesetstyle() と imageline() の組み合せを使用してください。
bool imagedestroy ( resource $image )\nimagedestroy() は画像 image を保持するメモリを解放します。
bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )\n指定した座標を中心とする楕円を描画します。
bool imagefill ( resource $image , int $x , int $y , int $color )\n指定した座標 (左上が 0, 0 です) から、指定した色 color で image を塗りつぶします。
bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )\n指定した image の指定した座標を中心とする、 楕円弧を描画します。
bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )\n指定した image の指定した座標を中心として楕円を描画します。
bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )\nimagefilledpolygon() は画像 image 上に塗りつぶした多角形を生成します。
bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n色 color で塗りつぶした矩形を、 指定した image 上に作成します。 開始位置と終了位置を指定します。0, 0 が画像の左上角を表します。
bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )\nimagefilltoborder()は、 border で指定した色を境界色として塗りつぶし を行います。(x ,y )が 塗りつぶしの始点(左上が0, 0)で、領域内を color 色で塗りつぶします。
bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )\nimagefilter() は、指定したフィルタ filtertype を image に適用します。
int imagefontheight ( int $font )\n指定されたフォントの文字の高さをピクセル単位で返します。
int imagefontwidth ( int $font )\n指定されたフォントの文字の幅をピクセル単位で返します。
array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )\nこの関数は FreeType テキスト用のバウンディングボックスをピクセル単位で算出し、 それを返します。
array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )\n指定した GD 画像 image に 入力ガンマ値、出力ガンマ値を指定してガンマ補正を適用します。
bool imagegd ( resource $image [, string $filename ] )\nGD イメージを、指定した filename に出力します。
bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type ]]] )\nGD2 イメージを、指定した filename に出力します。
bool imagegif ( resource $image [, string $filename ] )\nimagegif() は画像 image から GIF ファイル filename を作成します。 引数 image は imagecreate() あるいは imagecreatefrom* 関数から返されたものです。\n画像フォーマットは、imagecolortransparent() を 用いて画像を透明化しない限り GIF87a となります。 透明化した場合の画像フォーマットは GIF89a となります。
resource imagegrabscreen ( void )\n画面全体のスクリーンショットを取得します。
resource imagegrabwindow ( int $window [, int $client_area = 0 ] )\nウィンドウあるいはそのクライアント領域のキャプチャを、 ウィンドウハンドル (COM インスタンスの HWND プロパティ) を指定して取得します。
int imageinterlace ( resource $image [, int $interlace = 0 ] )\nimageinterlace() は、インターレースビットをon またはoffに切り替えます。\nインターレースビットがonでかつその画像が JPEG の場合、 その画像はプログレッシブ JPEG として生成されています。
bool imageistruecolor ( resource $image )\nimageistruecolor() は、 image が truecolor 画像かどうか調べます。
bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )\nimagejpeg() は、画像 image から JPEG ファイルを作成します。
bool imagelayereffect ( resource $image , int $effect )\nアルファブレンディングフラグを設定し、 libgd にバンドルされているレイヤ効果を使用します。
bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\n指定したふたつの点を結ぶ直線を描画します。
int imageloadfont ( string $file )\nimageloadfont() はユーザが定義したビットマップを読み込み、 その ID を返します。
void imagepalettecopy ( resource $destination , resource $source )\nimagepalettecopy() は、パレットを source から destination にコピーします。
bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )\n指定した image から、PNG 画像を出力あるいは保存します。
bool imagepolygon ( resource $image , array $points , int $num_points , int $color )\nimagepolygon() は、指定した image に多角形を作成します。
array imagepsbbox ( string $text , resource $font , int $size )\narray imagepsbbox ( string $text , resource $font , int $size , int $space , int $tightness , float $angle )\nPostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定します。\nバウンディングボックスは文字メトリックスから得られる情報を用いて計算されますが、 残念なことに実際に描画される文字列の描画結果とはわずかに異なる傾向があります。 角度が 0 度の場合、全ての方向に 1 ピクセル分多く必要であると予想することができます。
bool imagepsencodefont ( resource $font_index , string $encodingfile )\nファイルから文字エンコードベクトルをロードし、変更します。 PostScript フォントのデフォルトベクトルは、127以上の位置には文字 がほとんどないので、英語以外の言語を使用する場合には 恐らくこの部分を変更したいと思うことでしょう。\nこの関数を頻繁に用いている場合には、ずっと優れた方法として 設定ファイル で ps.default_encoding が正しいエンコードファイルを指すようにして エンコード法を定義する方法があります。この場合、 自動的にロードされる全てのフォントは、正しいエンコードとなります。
bool imagepsextendfont ( resource $font_index , float $extend )\nフォント(font_index )を展開または圧縮します。 パラメータextend の値が1より小さい場合、 フォントの圧縮が行われます。
bool imagepsfreefont ( resource $font_index )\nimagepsfreefont() は PostScript Type 1 フォントが使用したメモリを解放します。
resource imagepsloadfont ( string $filename )\n指定した filename から PostScript Type 1 フォントを読み込みます。
bool imagepsslantfont ( resource $font_index , float $slant )\n指定したフォントを傾けます。
array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )\nPostScript Type1 フォントを使用して、画像の上にテキストを描画します。\n動作に関して不明な場合は、フォント及びその測り方に関する PostScipt ドキュメントを参照ください。
bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )\nimagerectangle() は、指定した座標から始まる矩形を作成します。
resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] )\n画像 image を、 angle で指定された角度だけ回転します。\n回転の中心は画像の中心です。 回転後の画像の大きさは、もとの大きさと異なる可能性があります。
bool imagesavealpha ( resource $image , bool $saveflag )\nimagesavealpha() は PNG 画像を保存する際に（単一色の透過設定ではない）完全な アルファチャネル情報を保存するフラグを設定します。\nこれを使用するためには、アルファブレンディングを解除する必要があります (imagealphablending($im, false))。\nアルファチャネルはすべてのブラウザでサポートされているわけではありません。 ブラウザ上での表示で問題が発生した場合は、アルファチャネルに対応している ブラウザ（例: 最新の Mozilla）でスクリプトを実行しなおしてみましょう。
bool imagesetbrush ( resource $image , resource $brush )\nimagesetbrush() は、特別な色 IMG_COLOR_BRUSHED または IMG_COLOR_STYLEDBRUSHED で描画される際に (imageline() や imagepolygon() のような) 全ての線描画関数で使用されるブラシイメージを設定します。
bool imagesetpixel ( resource $image , int $x , int $y , int $color )\nimagesetpixel() は、指定した座標にピクセルを描画します。
bool imagesetstyle ( resource $image , array $style )\nimagesetstyle() は、特別な IMG_COLOR_STYLED または色を有するイメージの線 IMG_COLOR_STYLEDBRUSHED を描画する際に (imageline() と imagepolygon() のような) 全ての線描画関数で使用されるスタイルを設定します。
bool imagesetthickness ( resource $image , int $thickness )\nimagesetthickness() は、長方形、多角形、楕円等を描画する際の線幅を thickness ピクセルに設定します。
bool imagesettile ( resource $image , resource $tile )\nimagesettile() は、特別な色 IMG_COLOR_TILED を指定して塗りつぶされた場合に、 (imagefill() や imagefilledpolygon() のような) 領域塗りつぶし関数で使用されるタイルイメージを設定します。\nタイルは、領域を塗りつぶすために繰り返し使用されるイメージです。 全ての GD イメージをタイルとして使用可能で、 imagecolortransparent() でタイルの透過色 ID を設定することにより、 その一部から下の部分が透けて見えるようなタイルを作成することが可能です。
bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )\n指定した座標に文字列 string を描画します。
bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )\n文字列 string を、指定した座標で垂直に描画します。
int imagesx ( resource $image )\n指定した画像リソース image の幅を返します。
int imagesy ( resource $image )\n指定した画像リソース image の高さを返します。
bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )\nimagetruecolortopalette() は、TrueColorイメー ジをパレットイメージに変換します。この関数のコードは、元々 Independent JPEG Groupライブラリ用に書かれたもので、素晴らしいも のです。このコードは、色をできる限り維持することに加えて、アルファ チャネルに関する情報を出力されるパレットにおいてできるだけ維持す るように修正されています。これは、期待通りにうまくいきません。通 常は、最高の出力品質が保障されるTrueColor出力イメージを単に出力す るのが最良の方法です。
array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )\nこの関数は TrueType テキストの bounding box をピクセル単位で計算して 返します。
array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )\n指定した text を、 TrueType フォントを使用して画像に書き込みます。
int imagetypes ( void )\n現在使用している PHP がサポートする画像形式を返します。
bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )\nimagewbmp() は、指定した image を WBMP にして出力あるいは保存します。
bool imagexbm ( resource $image , string $filename [, int $foreground ] )\nimagewbmp() は、指定した image を XBM にして出力あるいは保存します。
bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )\nadaptive blur (順応性にじみ) フィルタを画像に追加します。 adaptive blur の効果は、画像の端に近づくほど弱くなります。 一方、標準の blur の場合は画像全体に均一に働きます。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $fit = false ] )\nデータに依存する三角測量にもとづいて画像のサイズを変更します。 色が突然変わる箇所でのにじみを避けます。 たとえば、画像をほんの少しだけ縮小して &quot;ウェブサイズ&quot; にする場合などに便利です。フルサイズの画像のサムネイルを作成する場合などは、 あまりうまくいかないかもしれません。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )\n画像をシャープにします。 画像の端の方ほど強くシャープ処理を行い、 端から離れるにつれてシャープ処理の程度を弱くします。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )\n周辺のピクセルの輝度の範囲にもとづいて、 各ピクセルの閾値を選択します。 画像全体の輝度のヒストグラムが特定の頂点を持っていない場合の閾値の設定が可能となります。
bool Imagick::addImage ( Imagick $source )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n元オブジェクトの現在の位置にある新しい画像を、 Imagick オブジェクトの画像リストに追加します。 この操作を行うと、イテレータがリストの最後尾に移動します。
bool Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nランダムなノイズを画像に追加します。
bool Imagick::affineTransformImage ( ImagickDraw $matrix )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nアフィン行列の指定にしたがって画像を変換します。
bool Imagick::animateImages ( string $x_server )\nThis method animates the image onto a local or remote X server. This method is not available on Windows. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を画像に加えます。
Imagick Imagick::appendImages ( bool $stack )\n画像群を追加します。
Imagick Imagick::averageImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像群を平均化します。
bool Imagick::blackThresholdImage ( mixed $threshold )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick::thresholdImage() と似ていますが、 これは閾値に満たないピクセルをすべて黒にし、その他のピクセルはそのままにします。
bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nblur (にじみ) フィルタを画像に追加します。 オプションの 3 番目のパラメータを指定すると、 特定のチャネルにのみ適用します。
bool Imagick::borderImage ( mixed $bordercolor , int $width , int $height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の周りを枠線で囲みます。枠線の色は ImagickPixel オブジェクトで指定します。
bool Imagick::charcoalImage ( float $radius , float $sigma )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n木炭画をシミュレートします。
bool Imagick::chopImage ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の一部を削除し、そこにあった画像をなくします。
bool Imagick::clear ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトに関連付けられたすべてのリソースをクリアします。
bool Imagick::clipImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n8BIM プロファイルの最初のパスが存在する場合に、それにそって切り取ります。
bool Imagick::clipPathImage ( string $pathname , bool $inside )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n8BIM プロファイルの指定した名前のパスが存在する場合に、それにそって切り取ります。 その後の操作はパスの内部に対してのみ有効となります。 番号で指定する場合は、番号の前に # を付加します。つまり &quot;#1&quot; とすると最初のパスを使用します。
Imagick Imagick::clone ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトの完全なコピーを作成します。
bool Imagick::clutImage ( Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ] )\n画像の色を、ルックアップテーブルをもとに置き換えます。 オプションの 2 番目のパラメータを指定すると、 特定のチャネルの色を置き換えます。 このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
Imagick Imagick::coalesceImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nページオフセットや処理方法を指定して、複数の画像を合成します。 典型的な使用例としては、たとえば GIF や MIFF、MNG といった画像シーケンスを最初に背景として指定し、 それ以降にさまざまなサイズやオフセットの画像を合成するというものがあります。 返り値は、新規 Imagick オブジェクトとなります。 シーケンスの各画像のサイズは、最初の画像のサイズと同じになります。
bool Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n対象にマッチする任意の点の色の値を変更します。
bool Imagick::colorizeImage ( mixed $colorize , mixed $opacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の各ピクセルに、塗りつぶし色を混合します。
Imagick Imagick::combineImages ( int $channelType )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数の画像をひとつにまとめます。 一連の画像の各ピクセルのグレースケール値が、 合成した画像の特定のチャネルの値となります。典型的なパターンでは 画像 1 => Red、画像 2 => Green、画像 3 => Blue などとなります。
bool Imagick::commentImage ( string $comment )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nコメントを画像に追加します。
array Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数の画像を比較し、差分の画像を返します。
Imagick Imagick::compareImageLayers ( int $method )\n各画像をシーケンス内の次の画像と比較し、 最大の境界範囲を返します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::compareImages ( Imagick $compare , int $metric )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n再構築された画像と画像の差異を含む配列を返します。
bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nある画像を、別の画像の指定した位置に合成します。
Imagick Imagick::__construct ([ mixed $files ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick のコンストラクタです。
bool Imagick::contrastImage ( bool $sharpen )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の中の暗めの部分と明るめの部分の輝度の差を強調します。 sharpen に 0 以外を指定すると画像のコントラストを上げ、 0 を指定するとコントラストを下げます。
bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_ALL ] )\nとりうる色の範囲全体に色を調整することによって、 カラー画像のコントラストを強調します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n独自の畳み込み関数を画像に適用します。
bool Imagick::cropImage ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の一部を抽出します。
bool Imagick::cropThumbnailImage ( int $width , int $height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n固定サイズのサムネイルを作成します。 まず画像のサイズを縮小し、指定した範囲を中心から切り取ります。
Imagick Imagick::current ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の imagick オブジェクトへの参照を返し、 画像ポインタを正しいシーケンスに設定します。
bool Imagick::cycleColormapImage ( int $displace )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n位置番号を指定して、画像のカラーマップを移動します。 カラーマップを何度か回転させると、サイケデリックな効果が得られます。
bool Imagick::decipherImage ( string $passphrase )\nDeciphers image that has been enciphered before. The image must be enciphered using Imagick::encipherImage(). このメソッドは、ImageMagick バージョン 6.3.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::deconstructImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n各画像をシーケンス内の次の画像と比較し、 最大の境界範囲を返します。
bool Imagick::despeckleImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像内のスペックルノイズを軽減します。ただし元画像の輪郭は保持します。
bool Imagick::destroy ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトを破棄し、関連するリソースをすべて開放します。
bool Imagick::displayImage ( string $servername )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこのメソッドは、画像を X サーバに表示します。
bool Imagick::displayImages ( string $servername )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像あるいは画像シーケンスを X サーバに表示します。
bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )\nさまざまな方式で画像を歪めます。 これは、元画像の色を新たな画像の色に対応させることで行います。 新たな画像は、&#039;bestfit&#039; を true に設定しない限りは元画像と同じ大きさになります。\n&#039;bestfit&#039; を有効にし、使用する歪め方式がサイズ変更を許可していた場合は、 変換後の画像に合わせて画像のサイズやオフセットが調整されます。 多くの場合、元画像の仮想オフセットも考慮したマッピングが行われます。\nこのメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::drawImage ( ImagickDraw $draw )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の画像上の ImagickDraw オブジェクトをレンダリングします。
bool Imagick::edgeImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した半径の畳み込みフィルタを使用して、画像の輪郭を強調します。 radius に 0 を設定すると自動選択となります。
bool Imagick::embossImage ( float $radius , float $sigma )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nグレースケール画像に三次元効果を施したものを返します。 指定した半径と標準偏差 (シグマ) によるガウス演算によって画像を畳み込みます。 意味のある結果を得るには、半径がシグマより大きくなければなりません。 radius に 0 を指定すると、適切な半径を自動的に設定します。
bool Imagick::encipherImage ( string $passphrase )\nConverts plain pixels to enciphered pixels. The image is not readable until it has been deciphered using Imagick::decipherImage() このメソッドは、ImageMagick バージョン 6.3.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::enhanceImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nデジタルフィルタを適用して、ノイジーな画像の品質を向上させます。
bool Imagick::equalizeImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像ヒストグラムを均等化します。
bool Imagick::evaluateImage ( int $op , float $constant [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n算術演算、関係演算、論理演算などを画像に適用します。 これらの演算子を使用すると、画像の明度を変えたりコントラストを変えたり、 あるいは画像の &quot;ネガ&quot; を作成したりすることができます。
bool Imagick::extentImage ( int $width , int $height , int $x , int $y )\nComfortability method for setting image size. The method sets the image size and allows setting x,y coordinates where the new area begins. このメソッドは、ImageMagick バージョン 6.3.1 以降で Imagick をコンパイルした場合に使用可能です。
Imagick Imagick::flattenImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像シーケンスをマージします。 これは、たとえば Photoshop のレイヤを単一の画像にまとめる場合などに便利です。
bool Imagick::flipImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n中心の x 軸を基準してピクセルを反転させ、垂直方向のミラー画像を作成します。
bool Imagick::floodFillPaintImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )\nChanges the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated Imagick::paintFloodFillImage(). このメソッドは、ImageMagick バージョン 6.3.8 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::flopImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n中心の y 軸を基準してピクセルを反転させ、水平方向のミラー画像を作成します。
bool Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の周りに三次元の枠線を追加します。 width と height で、それぞれ縦の枠線と横の枠線の幅を指定します。 inner_bevel および outer_bevel は、 それぞれ枠の内側と外側の影の幅を指定します。
Imagick Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n式を画像の各ピクセルに適用します。 詳細は &raquo; The Fx Special Effects Image Operator を参照ください。
bool Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像をガンマ補正します。同じ画像でも、 異なるデバイス上で見ると見た目が変わることがあります。 これは、画面上に画像の輝度を表現する方法がことなるためです。 赤、緑、青の各チャネルに個別のガンマレベルを指定するか、 あるいはすべてのチャネルに共通のガンマレベルを指定します。 値の典型的な範囲は、0.8 から 2.3 の間となります。
bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像をぼかします。 指定した半径と標準偏差 (シグマ) によるガウス演算によって画像を畳み込みます。 意味のある結果を得るには、半径がシグマより大きくなければなりません。 radius に 0 を指定すると、適切な半径を自動的に設定します。
int Imagick::getCompression ( void )\nオブジェクトの圧縮形式を取得します。
int Imagick::getCompressionQuality ( void )\nオブジェクトの圧縮品質を取得します。
string Imagick::getCopyright ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick API の著作権情報を文字列で返します。
string Imagick::getFilename ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像シーケンスに関連付けられたファイル名を取得します。
string Imagick::getFont ( void )\nReturns the objects font property. このメソッドは、ImageMagick バージョン 6.3.7 以降で Imagick をコンパイルした場合に使用可能です。
string Imagick::getFormat ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのフォーマットを返します。
bool Imagick::getGravity ( void )\nGets the global gravity property for the Imagick object. このメソッドは、ImageMagick バージョン 6.4.0 以降で Imagick をコンパイルした場合に使用可能です。
string Imagick::getHomeURL ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick のホーム URL を返します。
Imagick Imagick::getImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の画像シーケンスを使用した新しい Imagick オブジェクトを返します。
int Imagick::getImageAlphaChannel ( void )\nGets the image alpha channel value. The returned value is one of the alpha channel constants. このメソッドは、ImageMagick バージョン 6.4.0 以降で Imagick をコンパイルした場合に使用可能です。
ImagickPixel Imagick::getImageBackgroundColor ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の背景色を返します。
string Imagick::getImageBlob ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像フォーマットを直接記憶します。 これは、画像シーケンスを文字列で返します。 画像のフォーマットによって、返される blob の形式 (GIF, JPEG, PNG, など) が決まります。 別の画像フォーマットを返すには Imagick::SetImageFormat() を使用します。
array Imagick::getImageBluePrimary ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n青が一番強い点を返します。
ImagickPixel Imagick::getImageBorderColor ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の前景色を返します。
int Imagick::getImageChannelDepth ( int $channel )\n特定の画像チャネルの深度を返します。
float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数のチャネルの内容を再構築した画像と比較し、 指定した歪み係数を返します。
double Imagick::getImageChannelDistortions ( Imagick $reference , int $metric , int $channel )\nCompares one or more image channels of an image to a reconstructed image and returns the specified distortion metrics このメソッドは、ImageMagick バージョン 6.4.4 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getImageChannelExtrema ( int $channel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数の画像チャネルの極値を取得します。 返り値は連想配列で、&quot;minima&quot; および &quot;maxima&quot; というキーを含みます。
array Imagick::getImageChannelMean ( int $channel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数の画像チャネルの平均値および標準偏差を取得します。 返り値は連想配列で、&quot;mean&quot; および &quot;standardDeviation&quot; というキーを含みます。
bool Imagick::getImageChannelRange ( int $channel )\nGets the range for one or more image channels. このメソッドは、ImageMagick バージョン 6.4.0 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getImageChannelStatistics ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の各チャネルの統計情報を返します。 この情報に含まれるのは、チャネルの深度、最小値と最大値、 平均値、そして標準偏差です。 たとえば赤チャネルの平均値を取得するにはこのようにします。
Imagick Imagick::getImageClipMask ( void )\nReturns the image clip mask. The clip mask is an Imagick object containing the clip mask. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
ImagickPixel Imagick::getImageColormapColor ( int $index )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したインデックスに対応する色マップ上の色を返します。
int Imagick::getImageColors ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像で使われている色の数を取得します。
int Imagick::getImageColorspace ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の色空間を取得します。
int Imagick::getImageCompose ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像に関連付けられている合成演算子を返します。
int Imagick::getImageCompression ( void )\nGets the current image&#039;s compression type.
int Imagick::getCompressionQuality ( void )\nGets the current image&#039;s compression quality
int Imagick::getImageDelay ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の遅延を取得します。
int Imagick::getImageDepth ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の深度を取得します。
int Imagick::getImageDispose ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の配置方法を取得します。
float Imagick::getImageDistortion ( MagickWand $reference , int $metric )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nある画像と再構築した画像を比較し、 指定した歪み係数を返します。
array Imagick::getImageExtrema ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の極値を取得します。 &quot;min&quot; および &quot;max&quot; というキーを持つ連想配列を返します。
string Imagick::getImageFilename ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nシーケンス内の特定の画像のファイル名を返します。
string Imagick::getImageFormat ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nシーケンス内の特定の画像のフォーマットを返します。
float Imagick::getImageGamma ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のガンマを取得します。
array Imagick::getImageGeometry ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n幅と高さを連想配列で返します。
array Imagick::getImageGreenPrimary ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n緑が一番強い点を返します。&quot;x&quot; および &quot;y&quot; というキーを持つ配列を返します。
int Imagick::getImageHeight ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の高さを返します。
array Imagick::getImageHistogram ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のヒストグラムを ImagickPixel オブジェクトの配列で返します。
int Imagick::getImageIndex ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクト内で現在アクティブな画像のインデックスを取得します。 このメソッドは非推奨です。 Imagick::getIteratorIndex を参照ください。
int Imagick::getImageInterlaceScheme ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のインターレース手法を取得します。
int Imagick::getImageInterpolateMethod ( void )\n指定した画像の補間方式を返します。 方式は Imagick::INTERPOLATE_* 定数のいずれかで指定します。
int Imagick::getImageIterations ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の反復を取得します。
int Imagick::getImageLength ( void )\n画像の長さをバイト数で返します。
string Imagick::getImageMagickLicense ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick のライセンスを文字列で返します。
int Imagick::getImageMatte ( void )\n画像がマットチャネルを持っている場合に TRUE、 そうでない場合に false を返します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
ImagickPixel Imagick::getImageMatteColor ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のマット色を返します。
int Imagick::getImageOrientation ( void )\n画像の方向を取得します。返り値は 方向定数 のいずれかとなります。
array Imagick::getImagePage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のページジオメトリを配列で返します。配列のキーは &quot;width&quot;、&quot;height&quot;、&quot;x&quot; および &quot;y&quot; です。
ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したピクセルの色を返します。
string Imagick::getImageProfile ( string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した名前の画像プロファイルを返します。
array Imagick::getImageProfiles ([ string $pattern = &quot;*&quot; [, bool $only_names = true ]] )\n関連付けられているプロファイルのうち、パターンにマッチするものをすべて返します。 二番目の引数を TRUE にすると、プロファイルの名前だけを返します。 このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getImageProperties ([ string $pattern = &quot;*&quot; [, bool $only_names = true ]] )\n関連付けられているプロパティのうち、パターンにマッチするものをすべて返します。 二番目の引数を TRUE にすると、プロパティの名前だけを返します。 このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
string Imagick::getImageProperty ( string $name )\n指定した名前の画像プロパティを返します。 このメソッドは、ImageMagick バージョン 6.3.2 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getImageRedPrimary ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n赤が一番強い点を返します。&quot;x&quot; および &quot;y&quot; というキーを持つ配列を返します。
Imagick Imagick::getImageRegion ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の一部を抽出し、新しい Imagick オブジェクトとして返します。
int Imagick::getImageRenderingIntent ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のレンダリング方向を取得します。
array Imagick::getImageResolution ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nX 方向および Y 方向の解像度を取得します。
string Imagick::getImagesBlob ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nメモリ上の画像フォーマットを直接操作します。 すべての画像シーケンスを文字列として返します。 画像のフォーマット (GIF, JPEG, PNG など) に応じて返される blob の形式も異なります。 別の画像フォーマットで返すには Imagick::setImageFormat() を使用します。
int Imagick::getImageScene ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のシーンを取得します。
string Imagick::getImageSignature ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像ピクセルストリームの SHA-256 メッセージダイジェストを生成します。
int Imagick::getImageSize ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の長さをバイト数で返します。
int Imagick::getImageTicksPerSecond ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の ticks-per-second を取得します。
float Imagick::getImageTotalInkDensity ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の総インク密度を取得します。
int Imagick::getImageType ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の型を取得します。
int Imagick::getImageUnits ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の解像度の単位を取得します。
int Imagick::getImageVirtualPixelMethod ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した画像の仮想ピクセルメソッドを返します。
array Imagick::getImageWhitePoint ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色度が白い点を返します。 &quot;x&quot; および &quot;y&quot; というキーを持つ連想配列となります。
int Imagick::getImageWidth ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の幅を返します。
int Imagick::getInterlaceScheme ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトのインターレース方式を取得します。
int Imagick::getIteratorIndex ( void )\nImagick オブジェクト内で現在アクティブな画像のインデックスを取得します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
int Imagick::getNumberImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトに関連付けられている画像の数を返します。
string Imagick::getOption ( string $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクト内の指定したキーに対応する値を返します。
string Imagick::getPackageName ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick パッケージ名を返します。
array Imagick::getPage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトに関連付けられたページのジオメトリを返します。 &quot;width&quot;、&quot;height&quot;、&quot;x&quot; そして &quot;y&quot; というキーを持つ連想配列となります。
ImagickPixelIterator Imagick::getPixelIterator ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nMagickPixelIterator を返します。
ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像セクションの ImagickPixelIterator を取得します。
string Imagick::getPointSize ( void )\nReturns the objects point size property. このメソッドは、ImageMagick バージョン 6.3.7 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getQuantumDepth ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick quantum depth を文字列で返します。
array Imagick::getQuantumRange ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick quantum range を文字列で返します。
string Imagick::getReleaseDate ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick のリリース日を文字列で返します。
int Imagick::getResource ( int $type )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したリソースのメモリ使用状況をメガバイト単位で返します。
int Imagick::getResourceLimit ( int $type )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したリソースの制限をメガバイト単位で返します。
array Imagick::getSamplingFactors ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n水平方向および垂直方向のサンプリング係数を取得します。
array Imagick::getSize ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのサイズを返します。 &quot;columns&quot; および &quot;rows&quot; というキーを持つ連想配列となります。
int Imagick::getSizeOffset ( void )\nImagick オブジェクトのサイズのオフセットを返します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
array Imagick::getVersion ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImageMagick API のバージョンを文字列と数値で返します。
bool Imagick::hasNextImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nリスト内でひとつ先に進んだときにまだオブジェクトが画像を保持していれば TRUE を返します。
bool Imagick::hasPreviousImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nリスト内で逆方向にひとつ進んだときにまだオブジェクトが画像を保持していれば TRUE を返します。
array Imagick::identifyImage ([ bool $appendRawOutput = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を識別し、属性を返します。属性には画像の幅や高さ、サイズなどが含まれます。
bool Imagick::implodeImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n既存の画像をコピーして新しい画像を作成します。 既存の画像のピクセルを、指定したパーセンテージで &quot;内破&quot; します。
bool Imagick::labelImage ( string $label )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nラベルを画像に追加します。
bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のレベルを調整します。 指定した白と黒の範囲にある色を、利用可能な色の範囲全体に拡大します。 黒の点、中間点、白の点をパラメータで指定します。 黒の点は、画像の中で一番暗い色を表します。 これより暗い色の点はゼロに設定されます。 中間点は、画像に適用するガンマ補正を指定します。 黒の点は、画像の中で一番明るい色を表します。 これより明るい色の点は最大値に設定されます。
bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )\n画像の輝度を引き伸ばして飽和させます。
bool Imagick::liquidRescaleImage ( int $width , int $height , float $delta_x , float $rigidity )\nThis method scales the images using liquid rescaling method. This method is an implementation of a technique called seam carving. In order for this method to work as expected ImageMagick must be compiled with liblqr support. このメソッドは、ImageMagick バージョン 6.3.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::magnifyImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を元のサイズの 2 倍に比例拡大します。
bool Imagick::mapImage ( Imagick $map , bool $dither )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n対象となるピクセルとその近傍の透明度を変更します。 FillToBorderMethod を指定した場合は、 画像の描画色に該当しない近傍ピクセルについても透明度を変更します。
bool Imagick::medianFilterImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nデジタルフィルタを適用してノイジーな画像の品質を向上させます。 各ピクセルの内容を、radius で定義した近傍ピクセルの中央値で置き換えます。
bool Imagick::mergeImageLayers ( int $layer_method )\nMerges image layers into one. This method is useful when working with image formats that use multiple layers such as PSD. The merging is controlled using the layer_method which defines how the layers are merged. このメソッドは、ImageMagick バージョン 6.3.7 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::minifyImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のサイズを元の半分に比例縮小します。
bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の明度、飽和度、色相を制御します。 色相は、現在位置からの絶対回転角のパーセンテージで表します。 たとえば 50 の場合は反時計回りに 90 度の回転を表します。 また 150 の場合は時計回りの 90 度の回転、0 および 200 はともに 180 度の回転を表します。
Imagick Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n複数の画像を合成して画像を作成します。 合成画像上で、画像の名前でタイル状に並べられます。 またオプションで各タイルの直下に画像を置くこともできます。
Imagick Imagick::morphImages ( int $number_frames )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n複数の画像をモーフィングします。 それぞれの画像のピクセルとサイズが線形補間され、 ある画像から次の画像へと変形していきます。
Imagick Imagick::mosaicImages ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像シーケンスをはめ込み合成して単一の画像にします。 シーケンス内の各画像を、画像のページオフセットで指定した位置に合成したものを返します。
bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nモーションブラーをシミュレートします。 指定した半径と標準偏差 (シグマ) によるガウス演算によって画像を畳み込みます。 意味のある結果を得るには、半径がシグマより大きくなければなりません。 radius に 0 を指定すると、MotionBlurImage() が適切な半径を自動的に設定します。 angle にはぼかしをかける角度を指定します。
bool Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の色を打ち消します。グレースケールオプションを指定すると、 画像内のグレースケール値のみを打ち消します。
bool Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しい画像を作成し、ImagickPixel の値を背景色として関連付けます。
bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しい画像を、ImageMagick 疑似フォーマットを使用して作成します。
bool Imagick::nextImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像リスト内の次の画像を Imagick オブジェクトに関連付けます。
bool Imagick::normalizeImage ([ int $channel ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nカラー画像のコントラストを強調します。 ピクセルの色を、とりうる値の範囲全体に拡張します。
bool Imagick::oilPaintImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n油絵風の効果を施すフィルタを適用します。 各ピクセルが、指定した半径内の周囲の中で最もよくあらわれる色に置き換えられます。
bool Imagick::opaquePaintImage ( mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )\nChanges any pixel that matches color with the color defined by fill. このメソッドは、ImageMagick バージョン 6.3.8 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::optimizeImageLayers ( void )\nGIF 形式の画像を、シーケンス内のひとつ前の画像と比較します。 必要最小限の画像で各フレームを置き換え、結果のアニメーションはそのままとなるようにします。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_ALL ] )\n定義済みのディザリング閾値マップにもとづいた、複数の強度レベルによる配列ディザリングを行います。 入力の引数に応じて、各チャネルで異なるレベルを使用することができます。 このメソッドは、ImageMagick バージョン 6.3.1 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )\n対象にマッチするピクセルとその近傍の色を変更します。 ImageMagick 6.3.8 以降はこのメソッドは非推奨となりました。かわりに Imagick::floodfillPaintImage() を使用します。
bool Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色にマッチするピクセルを、塗りつぶし色に変更します。
bool Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n塗りつぶし色に指定した色にマッチするピクセルを変更します。
bool Imagick::pingImage ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこのメソッドを使用すると、画像全体を読み込まなくても 画像の幅や高さ、サイズそしてフォーマットを取得できます。
bool Imagick::pingImageBlob ( string $image )\nこのメソッドを使用すると、画像全体を読み込まなくても 画像の幅や高さ、サイズそしてフォーマットを取得できます。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )\nこのメソッドを使用すると、画像全体を読み込まなくても 画像の幅や高さ、サイズそしてフォーマットを取得できます。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )\nポラロイド写真をシミュレートします。 このメソッドは、ImageMagick バージョン 6.3.2 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::posterizeImage ( int $levels , bool $dither )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した色数まで画像を減色します。
bool Imagick::previewImages ( int $preview )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した画像の 9 枚のサムネイルをタイル状に並べ、 さまざまな強度で画像処理を適用します。 これは、画像処理操作のパラメータの適切な値を手早く知りたい場合に便利です。
bool Imagick::previousImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像リスト内の前の画像を Imagick オブジェクトに関連付けます。
bool Imagick::profileImage ( string $name , string $profile )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nICC、IPTC あるいは汎用のプロファイルを画像に追加あるいは削除します。 profile が NULL の場合は画像からプロファイルを削除し、 それ以外の場合は追加します。 name に &#039;*&#039;、profile に NULL を指定すると、画像からすべてのプロパティを削除します。
bool Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nフォントメトリクスを表す、多次元配列を返します。
array Imagick::queryFonts ([ string $pattern = &quot;*&quot; ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick がサポートするフォントを返します。
array Imagick::queryFormats ([ string $pattern = &quot;*&quot; ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick がサポートするフォーマットを返します。
bool Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像にラジアルブラーを施します。
bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の輪郭を明るくしたり暗くしたりすることによって、 三次元のボタン風の効果をシミュレートします。 raise_info のメンバ width および height が、 垂直方向および水平方向の効果の輪郭を定義します。
bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_ALL ] )\n個々のピクセルの輝度を閾値と比較し、その色を変更します。 変換結果は、コントラストの高い 2 色の画像となります。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::readImage ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nファイルから画像を読み込みます。
bool Imagick::readImageBlob ( string $image [, string $filename ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nバイナリ文字列から画像を読み込みます。
bool Imagick::readImageFile ( resource $filehandle [, string $fileName ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオープンしているファイルハンドルから画像を読み込みます。
bool Imagick::animateImages ( array $matrix )\nTranslate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::reduceNoiseImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の輪郭をなめらかにします。縁の情報は保持します。 各ピクセルの内容を近傍の一番近い値で置き換えるというアルゴリズムです。 近傍は半径で定義します。radius に 0 を指定すると、 Imagick::reduceNoiseImage() が適切な半径を自動的に設定します。
bool Imagick::removeImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像リストから画像を削除します。
string Imagick::removeImageProfile ( string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した名前の画像プロファイルを削除してそれを返します。
bool Imagick::render ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nそれまでのすべての描画コマンドをレンダリングします。
bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を指定した解像度にリサンプリングします。
bool Imagick::resetImagePage ( string $page )\nThe page definition as a string. The string is in format WxH+x+y. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $fit = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した大きさと フィルタ で、画像のサイズを変更します。
bool Imagick::rollImage ( int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nx および y を指定して画像を補正します。
bool Imagick::rotateImage ( mixed $background , float $degrees )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した角度だけ画像を回転させます。回転によって生じる空き領域は、 背景色で埋められます。
bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の角を丸めます。 最初の 2 つのパラメータで丸める程度を制御し、 のこりの 3 つのパラメータで丸め処理をより細やかにチューニングします。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::sampleImage ( int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nピクセルのサンプリングによって、指定した大きさに画像の倍率を変更します。 他の拡大・縮小メソッドとは異なり、 このメソッドは変更後の画像に新たな色を追加したりしません。
bool Imagick::scaleImage ( int $cols , int $rows [, bool $fit = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のサイズを指定した大きさに変更します。 パラメータに 0 を指定すると、そのパラメータを自動的に計算します。
bool Imagick::separateImageChannel ( int $channel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像からチャネルを分離し、グレースケール画像を返します。 channel には、画像の各ピクセルの特定の色コンポーネントを指定します。
bool Imagick::sepiaToneImage ( float $threshold )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像に特殊効果を施し、セピア調の写真のような画像にします。 threshold には 0 から QuantumRange までの値を指定し、 これがセピア調の効き具合を表します。threshold を 80 にすると、 とりあえずはそれなりの効き目になるでしょう。
bool Imagick::setBackgroundColor ( mixed $background )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトのデフォルト背景色を設定します。
bool Imagick::setCompression ( int $compression )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトのデフォルトの圧縮方式を設定します。
bool Imagick::setCompressionQuality ( int $quality )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトのデフォルトの圧縮品質を設定します。
bool Imagick::setFilename ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を読み書きする前にファイル名を設定します。
bool Imagick::setFirstIterator ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick イテレータを最初の画像に設定します。
bool Imagick::setFont ( string $font )\nオブジェクトのフォントプロパティを設定します。 このメソッドは、たとえば caption: pseudo-format のフォントを設定したりする際に使用します。 フォントは、ImageMagick の設定で準備しておくか、あるいは font という名前のファイルが存在しなければなりません。 このメソッドを ImagickDraw::setFont() と混同してはいけません。 こちらは、ある特定の ImagickDraw オブジェクトのフォントを設定するメソッドです。 このメソッドは、ImageMagick バージョン 6.3.7 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setFormat ( string $format )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのフォーマットを設定します。
bool Imagick::setGravity ( int $gravity )\nSets the global gravity property for the Imagick object. このメソッドは、ImageMagick バージョン 6.4.0 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImage ( Imagick $replace )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の画像シーケンスを、replace で指定したオブジェクトの画像で置き換えます。
bool Imagick::setImageAlphaChannel ( int $mode )\nActivate or deactivate image alpha channel. The mode is one of the Imagick::ALPHACHANNEL_* constants. このメソッドは、ImageMagick バージョン 6.3.8 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImageBackgroundColor ( mixed $background )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の背景色を設定します。
bool Imagick::setImageBias ( float $bias )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を折りたたむ任意のメソッド (Imagick::ConvolveImage() など) について画像のバイアスを設定します。
bool Imagick::setImageBluePrimary ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n青が一番強い点を設定します。
bool Imagick::setImageBorderColor ( mixed $border )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の前景色を設定します。
bool Imagick::setImageChannelDepth ( int $channel , int $depth )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n特定の画像チャネルの深度を設定します。
bool Imagick::setImageClipMask ( Imagick $clip_mask )\nSets image clip mask from another Imagick object. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した色マップインデックスの色を設定します。
bool Imagick::setImageColorspace ( int $colorspace )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の色空間を設定します。
bool Imagick::setImageCompose ( int $compose )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の合成演算子を設定します。Imagick::montageImage() メソッドを使用して画像のサムネイルを作成する方法を指定する際に便利です。
bool Imagick::setImageCompression ( int $compression )\n画像の圧縮を設定します。
bool Imagick::setImageCompressionQuality ( int $quality )\nSets the image compression quality.
bool Imagick::setImageDelay ( int $delay )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の遅延を設定します。
bool Imagick::setImageDepth ( int $depth )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の深度を設定します。
bool Imagick::setImageDispose ( int $dispose )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の配置方法を設定します。
bool Imagick::setImageExtent ( int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のサイズ (つまりカラム数と行数) を設定します。
bool Imagick::setImageFilename ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nシーケンス内の特定の画像のファイル名を設定します。
bool Imagick::setImageFormat ( string $format )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nシーケンス内の特定の画像のフォーマットを設定します。
bool Imagick::setImageGamma ( float $gamma )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のガンマを設定します。
bool Imagick::setImageGreenPrimary ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n緑が一番強い点を設定します。
bool Imagick::setImageIndex ( int $index )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像リスト内でのイテレータの位置、index パラメータで指定した場所に設定します。\nこのメソッドは非推奨です。 Imagick::setIteratorIndex を参照ください。
bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の圧縮を設定します。
bool Imagick::setImageInterpolateMethod ( int $method )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のピクセル補間方式を設定します。
bool Imagick::setImageIterations ( int $iterations )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の反復を設定します。
bool Imagick::setImageMatte ( bool $matte )\n画像のマットチャネルを設定します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImageMatteColor ( mixed $matte )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のマット色を設定します。
bool Imagick::setImageOpacity ( float $opacity )\n画像の不透明度を設定します。このメソッドは、ImageMagick バージョン 6.3.1 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImageOrientation ( int $orientation )\n画像の方向を設定します。
bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のページのジオメトリを設定します。
bool Imagick::setImageProfile ( string $name , string $profile )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した名前の画像プロファイルを Imagick オブジェクトに追加します。 同じ名前のプロファイルが存在する場合は、それを置き換えます。 このメソッドは Imagick::ProfileImage() メソッドとは異なり、 CMS カラープロファイルは適用しません。
bool Imagick::setImageProperty ( string $name , string $value )\n指定した名前のプロパティを画像に設定します。 このメソッドは、ImageMagick バージョン 6.3.2 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setImageRedPrimary ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n赤が一番強い点を設定します。
bool Imagick::setImageRenderingIntent ( int $rendering_intent )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のレンダリング方向を設定します。
bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の解像度を設定します。
bool Imagick::setImageScene ( int $scene )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のシーンを設定します。
bool Imagick::setImageTicksPerSecond ( int $ticks_per-second )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の ticks-per-second を設定します。
bool Imagick::setImageType ( int $image_type )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の型を設定します。
bool Imagick::setImageUnits ( int $units )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の解像度の単位を設定します。
bool Imagick::setImageVirtualPixelMethod ( int $method )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の仮想ピクセルメソッドを設定します。
bool Imagick::setImageWhitePoint ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の色度が白い点を設定します。
bool Imagick::setInterlaceScheme ( int $interlace_scheme )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の圧縮を設定します。
bool Imagick::setIteratorIndex ( int $index )\nイテレータの位置を、画像リスト内の index で指定した位置に設定します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setLastIterator ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick イテレータを最後の画像に設定します。
bool Imagick::setOption ( string $key , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nひとつあるいは複数のオプションを設定します。
bool Imagick::setPage ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのページジオメトリを設定します。
bool Imagick::setPointSize ( float $point_size )\nSets object&#039;s point size property. This method can be used for example to set font size for caption: pseudo-format. このメソッドは、ImageMagick バージョン 6.3.7 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setResolution ( float $x_resolution , float $y_resolution )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の解像度を設定します。
bool Imagick::setResourceLimit ( int $type , int $limit )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n特定のリソースの制限をメガバイト単位で設定します。
bool Imagick::setSamplingFactors ( array $factors )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のサンプリング係数を設定します。
bool Imagick::setSize ( int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのサイズを設定します。 RGB や GRAY、CMYK といった生の画像フォーマットを読み込む前に設定します。
bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick オブジェクトのサイズとオフセットを設定します。 RGB や GRAY、CMYK といった生の画像フォーマットを読み込む前に設定します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::setType ( int $image_type )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像タイプ属性を設定します。
bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )\n遠くから光をあてているように見せる三次元効果を作成します。 光源の位置は azimuth と elevation で指定します。 azimuth は x 軸方向の角度で、elevation は Z 軸上のピクセル数です。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の影をシミュレートします。
bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像をシャープにします。指定した半径と標準偏差 (シグマ) によるガウス演算を施します。適切な結果を得るには、 半径をシグマより大きくする必要があります。半径を 0 に指定すると、適切な半径を自動的に設定します。
bool Imagick::shaveImage ( int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の輪郭からピクセルを刈り取ります。 新しい画像に必要なメモリを確保し、新しい画像へのポインタを返します。
bool Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像を X 軸方向あるいは Y 軸方向に押しつぶし、平行四辺形を作成します。 X 方向に押しつぶすと X 軸方向にスライドし、Y 方向に押しつぶすと Y 軸方向にスライドします。押しつぶす量は、角度で指定します。 X 方向に押しつぶす場合、x_shear は Y 軸からの相対角度となります。 同様に、Y 方向に押しつぶす場合は y_shear が X 軸からの相対角度となります。 変形によってできた空白部分は、背景色で埋められます。
bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n非線形 S 字コントラストアルゴリズムを用いて画像のコントラストを調整します。 S 字変換関数を使用し、ハイライトや影を飽和させることなく画像のコントラストを強調します。 contrast は、どの程度コントラストを向上させるかを表します (0 は何もしない、3 は一般的な程度、20 は押し出す) mid-point は、結果の画像での中間色の扱いを表します (0 は白、50 はグレー、100 は黒)。sharpen を TRUE にするとコントラストを強め、それ以外にするとコントラストを弱めます。
bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )\n鉛筆画をシミュレートします。 指定した半径と標準偏差 (シグマ) によるガウス演算によって画像を畳み込みます。 意味のある結果を得るには、半径がシグマより大きくなければなりません。 radius に 0 を指定すると、 Imagick::sketchImage() が適切な半径を自動的に設定します。 angle で、モーションブラーの角度を指定します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::solarizeImage ( int $threshold )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像に特殊効果を施し、 印画紙の特定の箇所の露光時間を長くしたような画像になります。 threshold は 0 から QuantumRange までの値で、 ソラリゼーションの効き具合を指定します。
bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n無地の画像を作成します。
bool Imagick::spreadImage ( float $radius )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nradius パラメータで定義したブロック内の各ピクセルを、 ランダムに移動させます。
Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nデジタル透かしを画像に埋め込みます。 あとでこの透かしが見つかれば、その画像の出所を証明することができます。 offset は、透かしの埋め込みを開始する位置を指定します。
bool Imagick::stereoImage ( Imagick $offset_wand )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nふたつの画像を合成してひとつの画像にします。 左と右の画像を合成してステレオ効果を生み出します。
bool Imagick::stripImage ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像からすべてのプロパティやコメントを除去します。
bool Imagick::swirlImage ( float $degrees )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の中心から、ピクセルを渦巻状にします。 degrees は個々のピクセルが移動する弧の量を表します。 degrees を 1 から 360 まで変化させると、劇的な効果が得られます。
bool Imagick::textureImage ( Imagick $texture_wand )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテクスチャ画像をタイル状に繰り返し並べます。
bool Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n個々のピクセルの輝度を閾値と比較し、その色を変更します。 変換結果は、コントラストの高い 2 色の画像となります。
bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $fit = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像のサイズを指定したものに変更し、関連付けられたプロパティをすべて削除します。 ウェブ上での表示に適した小さなサムネイル画像を作成します。 3 番目のパラメータに TRUE を指定すると、columns や rows にそれぞれの最大値を使用します。両方のパラメータが、 マッチするまであるいは指定したパラメータより小さくなるまで縮小されます。
bool Imagick::tintImage ( mixed $tint , mixed $opacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色ベクトルを画像の各ピクセルに適用します。 ベクトルの長さは、黒および白のときに 0、中間色のときに最大となります。 ベクトルの重み関数は f(x)=(1-(4.0*((x-0.5)*(x-0.5)))) です。
Imagick Imagick::transformImage ( string $crop , string $geometry )\n切り取るサイズと画像のジオメトリを設定する便利なメソッドです。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::transparentPaintImage ( mixed $target , float $alpha , float $fuzz , bool $invert )\nPaints pixels matching the target color transparent. このメソッドは、ImageMagick バージョン 6.3.8 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::transposeImage ( void )\n垂直方向に反転させた画像を作成します。 中央の x 軸に対して反転させ、90 度回転させます。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::transverseImage ( void )\n水平方向に反転させた画像を作成します。 中央の y 軸に対して反転させ、270 度回転させます。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::trimImage ( float $fuzz )\n画像の背景色と同じ色の輪郭を削除します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::uniqueImageColors ( void )\nある 1 色以外のすべての色のピクセルを削除します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像をシャープにします。 指定した半径と標準偏差 (シグマ) によるガウス演算によって画像を畳み込みます。 意味のある結果を得るには、半径がシグマより大きくなければなりません。 radius に 0 を指定すると、 Imagick::UnsharpMaskImage() が適切な半径を自動的に設定します。
bool Imagick::valid ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在のアイテムが有効かどうかを調べます。
bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )\nビネット形式で画像の輪郭をぼかします。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::waveImage ( float $amplitude , float $length )\nウェーブフィルタを画像に適用します。 このメソッドは、ImageMagick バージョン 6.2.9 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::whiteThresholdImage ( mixed $threshold )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagick::thresholdImage() と似ていますが、 これは閾値に満たないピクセルをすべて白にし、その他のピクセルはそのままにします。
bool Imagick::writeImage ([ string $filename ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した名前で画像を書き込みます。filename パラメータが NULL の場合は、 Imagick::ReadImage() あるいは Imagick::SetImageFilename() で設定した名前で書き込みます。
bool Imagick::writeImageFile ( resource $filehandle )\nWrites the image sequence to an open filehandle. The handle must be opened with for example fopen. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool Imagick::writeImages ( string $filename , bool $adjoin )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像あるいは画像シーケンスを書き込みます。
bool Imagick::writeImagesFile ( resource $filehandle )\nWrites all image frames into an open filehandle. This method can be used to write animated gifs or other multiframe images into open filehandle. このメソッドは、ImageMagick バージョン 6.3.6 以降で Imagick をコンパイルした場合に使用可能です。
bool ImagickDraw::affine ( array $affine )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在のアフィン変換行列を、指定したものに設定します。
bool ImagickDraw::annotation ( float $x , float $y , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像上にテキストを描画します。
bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像上の指定した矩形内に円弧を描画します。
bool ImagickDraw::bezier ( array $coordinates )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像上に点を指定してベジエ曲線を描画します。
bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像上に円を描画します。
bool ImagickDraw::clear ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickDraw オブジェクト上のコマンドをすべてクリアし、 デフォルト設定で初期化します。
ImagickDraw ImagickDraw::clone ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した ImagickDraw オブジェクトの完全なコピーを作成します。
bool ImagickDraw::color ( float $x , float $y , int $paintMethod )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の塗りつぶし色を使用して、 指定した開始位置から指定した方法で画像上に色を描画します。
bool ImagickDraw::comment ( string $comment )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nベクター出力ストリームにコメントを追加します。
bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の画像上に別の画像を合成します。 合成演算子、位置、サイズを指定します。
ImagickDraw ImagickDraw::__construct ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickDraw のコンストラクタです。
bool ImagickDraw::destroy ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこの ImagickDraw オブジェクトに関連付けられたすべてのリソースを開放します。
bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像上に楕円を描画します。
string ImagickDraw::getClipPath ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在のクリッピングパスの ID を取得します。
int ImagickDraw::getClipRule ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリッピングパスで使用されている、現在の多角形塗りつぶしルールを返します。
int ImagickDraw::getClipUnits ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリップパスの単位の解釈を返します。
ImagickPixel ImagickDraw::getFillColor ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n描画オブジェクトで使用する塗りつぶし色を返します。
float ImagickDraw::getFillOpacity ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色やテクスチャによる塗りつぶしの際の透過度を返します。 完全に不透過の場合は 1.0 となります。
int ImagickDraw::getFillRule ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n多角形の描画時に使用する塗りつぶしルールを返します。
string ImagickDraw::getFont ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントを文字列で返します。
string ImagickDraw::getFontFamily ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントファミリーを返します。
float ImagickDraw::getFontSize ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントのポイント数を返します。
int ImagickDraw::getFontStyle ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントのスタイルを返します。
int ImagickDraw::getFontWeight ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントの重さを返します。
int ImagickDraw::getGravity ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するテキスト配置の gravity を返します。
bool ImagickDraw::getStrokeAntialias ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の縁取りのアンチエイリアス設定を返します。 縁取りの枠線は、デフォルトでアンチエイリアス処理が行われます。 アンチエイリアスを無効にすると、 縁取りの描画時には縁取り色あるいはキャンバスの色のどちらかが用いられることになります。
ImagickPixel ImagickDraw::getStrokeColor ( ImagickPixel $stroke_color )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの縁取りに使用する色を返します。
array ImagickDraw::getStrokeDashArray ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパスの描画に使用する破線のパターンを表す配列を返します。
float ImagickDraw::getStrokeDashOffset ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n破線パターンにおける破線の開始オフセットを返します。
int ImagickDraw::getStrokeLineCap ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n開かれたサブパスを描画する際に使用する端点の形状を返します。
int ImagickDraw::getStrokeLineJoin ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパス (あるいはその他のベクター図形) の角を描画する際に使用する形状を返します。
int ImagickDraw::getStrokeMiterLimit ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nマイターリミットを返します。 2 本の直線が小さい角度で連結され、かつ連結方法が &#039;lineJoin&#039; に設定されている場合、 出来上がる線の角の部分が非常に長くなります。マイターリミットは、miter length (角の長さ) と &#039;lineWidth&#039; の比率の最大値です。
float ImagickDraw::getStrokeOpacity ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の透明度を返します。
float ImagickDraw::getStrokeWidth ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の描画に使用する線の幅を返します。
int ImagickDraw::getTextAlignment ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際の配置を返します。
bool ImagickDraw::getTextAntialias ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在のテキストのアンチエイリアス設定を返します。 これは、テキストのアンチエイリアス処理を行うかどうかを表すものです。 デフォルトでは、テキストのアンチエイリアス処理が行われます。
int ImagickDraw::getTextDecoration ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に適用する装飾を返します。
string ImagickDraw::getTextEncoding ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するコードセットを表す文字列を返します。
ImagickPixel ImagickDraw::getTextUnderColor ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記の背景に置く矩形の色を返します。
string ImagickDraw::getVectorGraphics ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickDraw オブジェクトのインスタンスが作成された後で、 グラフィックメソッドのコールによってできあがったベクターグラフィックを文字列で返します。
bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の描画色、透明度そして線幅を使用して画像上に直線を描画します。
bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n画像の opacity チャネル上に描画し、ピクセルの透過度に影響を与えます。
bool ImagickDraw::pathClose ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパス要素を現在のパスに追加し、 現在の点から現在のサブパスの直近の開始点 (通常は、直近の moveto の点となります) に直線を引くことで現在のパスを閉じます。
bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの三次ベジエ曲線を描画します。 曲線の開始位置の制御点を (x1,y1)、終了位置の制御点を (x2,y2) とし、それぞれ絶対座標で指定します。このコマンドが終了した後は、 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの二次ベジエ曲線を描画します。 制御点を (x1,y1) とし、絶対座標で指定します。このコマンドが終了した後は、 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの二次ベジエ曲線を描画します。 制御点を (x1,y1) とし、相対座標で指定します。このコマンドが終了した後は、 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの二次ベジエ曲線 (相対座標) を描画します。 制御点の位置は、現在の点と直前のコマンドの制御点の位置から推測します (直線のコマンドがなかったり、直前のコマンドが DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut あるいは DrawPathCurveToQuadraticBezierSmoothRelative のいずれかでなかった場合は、現在の点を制御点とみなします)。 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの二次ベジエ曲線 (相対座標) を描画します。 制御点の位置は、現在の点と直前のコマンドの制御点の位置から推測します (直線のコマンドがなかったり、直前のコマンドが DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut あるいは DrawPathCurveToQuadraticBezierSmoothRelative のいずれかでなかった場合は、現在の点を制御点とみなします)。 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの三次ベジエ曲線を描画します。 曲線の開始位置の制御点を (x1,y1)、終了位置の制御点を (x2,y2) とし、それぞれ相対座標で指定します。このコマンドが終了した後は、 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの三次ベジエ曲線 (絶対座標) を描画します。 最初の制御点の位置は、現在の点と直前のコマンドの 2 番目の制御点の位置から推測します (直線のコマンドがなかったり、直前のコマンドが DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute あるいは DrawPathCurveToSmoothRelative のいずれかでなかった場合は、現在の点を最初の制御点とみなします)。 2 番目の制御点 (曲線の終了地点の制御点) は (x2,y2) となります。 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から (x,y) までの三次ベジエ曲線 (相対座標) を描画します。 最初の制御点の位置は、現在の点と直前のコマンドの 2 番目の制御点の位置から推測します (直線のコマンドがなかったり、直前のコマンドが DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute あるいは DrawPathCurveToSmoothRelative のいずれかでなかった場合は、現在の点を最初の制御点とみなします)。 2 番目の制御点 (曲線の終了地点の制御点) は (x2,y2) となります。 現在の位置は polybezier が使用する最後の (x,y) 座標の組となります。
bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の位置から (x, y) まで、絶対座標を使用して楕円弧を描画します。 楕円の大きさと方向は、2 つの半径 (rx, ry) と xAxisRotation で決まります。xAxisRotation は、楕円全体を座標系に対してどれだけ回転させるかを表すものです。 楕円の中心 (cx, cy) は、その他のパラメータの値から自動的に算出されます。 largeArcFlag および sweepFlag は自動計算を支援するためのもので、 楕円の描画方法を定義します。 largeArcFlag が true の場合は考えうる楕円のうち大きいほうを描画します。 sweepFlag が true の場合は時計回りの回転で楕円を描画します。
bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の位置から (x, y) まで、相対座標を使用して楕円弧を描画します。 楕円の大きさと方向は、2 つの半径 (rx, ry) と xAxisRotation で決まります。xAxisRotation は、楕円全体を座標系に対してどれだけ回転させるかを表すものです。 楕円の中心 (cx, cy) は、その他のパラメータの値から自動的に算出されます。 largeArcFlag および sweepFlag は自動計算を支援するためのもので、 楕円の描画方法を定義します。 largeArcFlag が true の場合は考えうる楕円のうち大きいほうを描画します。 sweepFlag が true の場合は時計回りの回転で楕円を描画します。
bool ImagickDraw::pathFinish ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在のパスを終了します。
bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、絶対座標を使用して直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、絶対座標を使用して水平直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathLineToHorizontalRelative ( float $x )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、相対座標を使用して水平直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathLineToRelative ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、相対座標を使用して直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、絶対座標を使用して垂直直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathLineToVerticalRelative ( float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の点から指定した座標まで、相対座標を使用して垂直直線を描画します。 座標は新しい点に移動します。
bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n絶対座標で指定した座標から、新しいサブパスを開始します。 現在の点は指定した座標となります。
bool ImagickDraw::pathMoveToRelative ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n相対座標で指定した座標から、新しいサブパスを開始します。 現在の点は指定した座標となります。
bool ImagickDraw::pathStart ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパス描画リストの開始を宣言します。このリストは、対応する DrawPathFinish() コマンドで終了します。 すべての DrawPath コマンドは、このコマンドと DrawPathFinish() コマンドの間にある必要があります。パス描画コマンドは従属コマンドであり、 それ自身だけでは機能しないからです。
bool ImagickDraw::point ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の描画色と濃度を使用して、 指定した座標に点を描画します。
bool ImagickDraw::polygon ( array $coordinates )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の線と線幅、そして塗りつぶし色あるいはテクスチャを使用して、 指定した座標配列から多角形を描画します。
bool ImagickDraw::polyline ( array $coordinates )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の線と線幅、そして塗りつぶし色あるいはテクスチャを使用して、 指定した座標配列から線分群を描画します。
bool ImagickDraw::pop ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nスタック内の現在の ImagickDraw を破棄し、事前に push された ImagickDraw を返します。 複数の ImagickDraw が存在する可能性もあります。 push された回数より多くの ImagickDraw の pop を試みるとエラーとなります。 また、ImagickDrow が push されたときと同じ方式で pop する必要があります。
bool ImagickDraw::popClipPath ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリップパスの定義を終了します。
bool ImagickDraw::popDefs ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n定義リストを終了します。
bool ImagickDraw::popPattern ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパターン定義を終了します。
bool ImagickDraw::push ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の ImagickDraw をコピーして新しい ImagickDraw を作成し、 それを ImagickDraw スタックに格納します。格納した ImagickDraw は pop() で取り出すことができます。ImagickDraw は ImagickDraw スタックに保存されます。Pop を行うには、事前に Push が行われている必要があります。
bool ImagickDraw::pushClipPath ( string $clip_mask_id )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリップパスの定義を開始します。 これは、任意の数の描画コマンドで構成され、最後は ImagickDraw::popClipPath() コマンドとなります。
bool ImagickDraw::pushDefs ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n後に続く ImagickDraw::popDefs() までのコマンドが、 名前つき要素 (クリップパスやテクスチャなど) を作成することを示します。 これは、効率を考慮して事前に処理されます。
bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n後に続く DrawPopPattern() までのコマンドが、 名前付きパターンを構成することを示します。 パターン空間は、左上の座標と幅、高さで指定します。 そして独自の描画空間となります。 描画される内容は、すべてこのパターン定義を使用します。 名前付きパターンは、線やブラシの定義で使用することができます。
bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n2 つの座標を与え、現在の枠線や線幅、塗りつぶしの設定を使用して矩形を描画します。
bool ImagickDraw::render ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこれまでのすべての描画コマンドを画像上にレンダリングします。
bool ImagickDraw::rotate ( float $degrees )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した回転を現在の座標空間に適用します。
bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n2 つの座標、そして角の x & y 方向の丸めを与え、 現在の枠線や線幅、塗りつぶしの設定を使用して角が丸い矩形を描画します。
bool ImagickDraw::scale ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の座標空間における、 水平方向および垂直方向の拡大率を調整します。
bool ImagickDraw::setClipPath ( string $clip_mask )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した名前のクリッピングパスを画像に関連付けます。 クリッピングパスの範囲内に描画された内容だけが反映されます。
bool ImagickDraw::setClipRule ( int $fill_rule )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリッピングパスで使用する多角形塗りつぶしルールを設定します。
bool ImagickDraw::setClipUnits ( int $clip_units )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nクリップパスの単位の解釈を設定します。
bool ImagickDraw::setFillAlpha ( float $opacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色やテクスチャによる塗りつぶしの際の透過度を設定します。 完全に不透明な状態が 1.0 となります。
bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの塗りつぶしに使用する色を設定します。
bool ImagickDraw::setFillOpacity ( float $fillOpacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n色やテクスチャによる塗りつぶしの際の透過度を設定します。 完全に不透明な状態が 1.0 となります。
bool ImagickDraw::setFillPatternURL ( string $fill_url )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの塗りつぶしパターンとして使用する URL を設定します。 現時点でサポートしているのは、ローカル URL (&quot;#identifier&quot;) のみです。 このローカル URL は、DrawPushPattern/DrawPopPattern で塗りつぶしパターンを定義することによって作成されます。
bool ImagickDraw::setFillRule ( int $fill_rule )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n多角形の描画時に使用する塗りつぶしルールを設定します。
bool ImagickDraw::setFont ( string $font_name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントを設定します。
bool ImagickDraw::setFontFamily ( string $font_family )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントファミリーを設定します。
bool ImagickDraw::setFontSize ( float $pointsize )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントのポイント数を設定します。
bool ImagickDraw::setFontStretch ( int $fontStretch )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントの伸縮を設定します。 AnyStretch は、ワイルドカードの &quot;don&#039;t care&quot; オプションとして働きます。
bool ImagickDraw::setFontStyle ( int $style )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントのスタイルを設定します。 AnyStyle は、ワイルドカードの &quot;don&#039;t care&quot; オプションとして働きます。
bool ImagickDraw::setFontWeight ( int $font_weight )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するフォントの重さを設定します。
bool ImagickDraw::setGravity ( int $gravity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するテキスト配置の gravity を設定します。
bool ImagickDraw::setStrokeAlpha ( float $opacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の透明度を指定します。
bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n縁取りの枠線をアンチエイリアス処理するかどうかを制御します。 縁取りの枠線は、デフォルトでアンチエイリアス処理が行われます。 アンチエイリアスを無効にすると、 縁取りの描画時には縁取り色あるいはキャンバスの色のどちらかが用いられることになります。
bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの縁取りに使用する色を設定します。
bool ImagickDraw::setStrokeDashArray ( array $dashArray )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパスの描画に使用する破線のパターンを指定します。 strokeDashArray は数値の配列で、 互い違いに並べる破線と空白の長さをピクセルで表したものです。 If an odd number of values is provided, then the list of values is repeated to yield an even number of values. 既存の配列を削除するには、number_elements にゼロ、そして dash_array に null を渡します。 典型的な strokeDashArray_ 配列のメンバーは 5 3 2 となります。
bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n破線パターンにおける破線の開始オフセットを指定します。
bool ImagickDraw::setStrokeLineCap ( int $linecap )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n開かれたサブパスを描画する際に使用する端点の形状を指定します。
bool ImagickDraw::setStrokeLineJoin ( int $linejoin )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nパス (あるいはその他のベクター図形) の角を描画する際に使用する形状を指定します。
bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nマイターリミットを指定します。 2 本の直線が小さい角度で連結され、かつ連結方法が &#039;lineJoin&#039; に設定されている場合、 出来上がる線の角の部分が非常に長くなります。マイターリミットは、miter length (角の長さ) と &#039;lineWidth&#039; の比率の最大値です。
bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の透明度を指定します。
bool ImagickDraw::setStrokePatternURL ( string $stroke_url )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の描画に使用するパターンを設定します。
bool ImagickDraw::setStrokeWidth ( float $stroke_width )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nオブジェクトの枠線の描画に使用する線の幅を設定します。
bool ImagickDraw::setTextAlignment ( int $alignment )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際の配置を指定します。
bool ImagickDraw::setTextAntialias ( bool $antiAlias )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストをアンチエイリアス処理するかどうかを制御します。 デフォルトではテキストのアンチエイリアス処理を行います。
bool ImagickDraw::setTextDecoration ( int $decoration )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に適用する装飾を指定します。
bool ImagickDraw::setTextEncoding ( string $encoding )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記を行う際に使用するコードセットを指定します。 現時点で指定できるエンコーディングは &quot;UTF-8&quot; のみで、 これはバイトシーケンスを Unicode で表記したものです。 空文字列を指定すると、システムのデフォルトを使用します。 Unicode によるテキストの注記を行うには、 Unicode をサポートしたフォントが必要です。
bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nテキストによる注記の背景に置く矩形の色を指定します。
bool ImagickDraw::setVectorGraphics ( string $xml )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した ImagickDraw オブジェクトに関連付けるベクターグラフィックを設定します。 このメソッドを ImagickDraw::getVectorGraphics() と組み合わせて使用すると、 ベクターグラフィックの状態を持続させることができます。
bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nベクターデータの描画に使用するキャンバスの大きさを設定します。 通常は、これはキャンバス画像と同じ大きさに設定します。 ベクターデータを SVG や MVG 形式で保存する際に、 これを使用してキャンバス画像の大きさを指定します。 またビューアがベクターデータをレンダリングする際にもこれを使用します。
bool ImagickDraw::skewX ( float $degrees )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の座標系を水平方向に傾けます。
bool ImagickDraw::skewY ( float $degrees )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の座標系を垂直方向に傾けます。
bool ImagickDraw::translate ( float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n現在の座標系に変換を適用し、座標系の原点を指定した座標に移動します。
bool ImagickPixel::clear ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトをクリアし、初期状態に戻します。 このオブジェクトに関連付けられている色も初期化します。
ImagickPixel ImagickPixel::__construct ([ string $color ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトを作成します。color を指定した場合は、 オブジェクトを作成した後で色を初期化してから返します。
bool ImagickPixel::destroy ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトが使用しているリソースの割り当てを解除し、 色を初期化します。destroy 関数をコールした後は、このオブジェクトを使用することはできません。
array ImagickPixel::getColor ([ bool $normalized = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトの色を、配列で返します。透明度が設定されている場合は、 4 つの要素からなる配列となります。
string ImagickPixel::getColorAsString ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトの色を文字列で返します。
int ImagickPixel::getColorCount ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこの色に関連付けられている色カウントを返します。
float ImagickPixel::getColorValue ( int $color )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定した色チャネルの値を取得します。 これは、0 から 1 までの間の浮動小数点数値となります。
array ImagickPixel::getHSL ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixel オブジェクトの HSL カラーを正規化したものを返します。 3 つの値は、それぞれ 0.0 から 1.0 までの間の浮動小数点数値となります。
ImagickPixel\nbool isSimilar ( ImagickPixel $color , float $fuzz )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこの ImagickPixel オブジェクトと別のオブジェクトの色の差を調べます。 これは、両者の RGB 値を色立方体上にプロットすることで行います。 ふたつの色の差が fuzz で指定した値よりも小さければ、 同じ色であるとみなされます。
bool ImagickPixel::setColor ( string $color )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこの ImagickPixel オブジェクトの色を、文字列 (たとえば &quot;blue&quot;、&quot;#0000ff&quot;、&quot;rgb(0,0,255)&quot;、&quot;cmyk(100,100,100,10)&quot; などの形式) で設定します。
bool ImagickPixel::setColorValue ( int $color , float $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nこのオブジェクトの、指定したチャネルの値を正規化したものを設定します。 これは 0 から 1 までの値となります。この関数は、 ImagickPixel オブジェクトの透明度を指定する際にも使用します。
bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nhue (色相)、saturation (彩度) および luminosity (明度) を正規化した値によって ImagickPixel オブジェクトの色を設定します。
bool ImagickPixelIterator::clear ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nPixelIterator に関連付けられたリソースを消去します。
ImagickPixelIterator ImagickPixelIterator::__construct ( Imagick $wand )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nImagickPixelIterator のコンストラクタです。
bool ImagickPixelIterator::destroy ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nPixelIterator に関連付けられているリソースの割り当てを解除します。
array ImagickPixelIterator::getCurrentIteratorRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator の現在の行を、ImagickPixel オブジェクトの配列で返します。
int ImagickPixelIterator::getIteratorRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator の現在の行を返します。
array ImagickPixelIterator::getNextIteratorRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator の次の行を、pixel wands の配列として返します。
array ImagickPixelIterator::getPreviousIteratorRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator の前の行を、pixel wands の配列として返します。
bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しい pixel iterator を返します。
bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しい pixel iterator を返します。
bool ImagickPixelIterator::resetIterator ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator をリセットします。 ImagickPixelIterator::getNextIteratorRow() と組み合わせて使用し、 ピクセルコンテナのすべてのピクセルを順にたどります。
bool ImagickPixelIterator::setIteratorFirstRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator を最初の行に設定します。
bool ImagickPixelIterator::setIteratorLastRow ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator を最後の行に設定します。
bool ImagickPixelIterator::setIteratorRow ( int $row )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator の行を設定します。
bool ImagickPixelIterator::syncIterator ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\npixel iterator を同期します。
string imap_8bit ( string $string )\n(&raquo; RFC2045, section 6.7 に基づき) 8 ビット文字列を quoted-printable 文字列に変換します。
array imap_alerts ( void )\n直近に imap_alerts() をコールして以来、 またはページ処理を開始して以来生成された 全 IMAP 警告メッセージの配列を返します。\nimap_alerts() がコールされた場合、 その処理後に警告のスタックはクリアされます。IMAP の仕様では、 これらのメッセージをユーザに渡すことが規定されています。
bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL ] )\n指定したメールボックス mbox に文字列メッセージ message を追加します。
string imap_base64 ( string $text )\nBASE64 でエンコードされたテキスト text をデコードします。
string imap_binary ( string $string )\n（&raquo; RFC2045, Section 6.8 に基づき）8 ビット文字列を base64 文字列に変換します。
string imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] )\nimap_body() は、現在のメールボックスにある msg_number 番目のメッセージの本文を返します。\nimap_body() は、メッセージの本文と全く同じ コピーのみを返します。マルチパート MIME エンコードされたメッセージの 一部を展開するには、その構造を解析するために imap_fetch_structure() を使用し、単一の部分要素の コピーを展開する際には、 imap_fetchbody() を使用する必要があります。
object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )\n指定したメッセージの指定した body セクションの構造を読み込みます。
object imap_check ( resource $imap_stream )\n現在のメールボックスに関する情報を調べます。
bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] )\nこの関数は、指定したシーケンス sequence のメッセージのフラグから、指定したフラグ flag を削除します。
bool imap_close ( resource $imap_stream [, int $flag = 0 ] )\nIMAP ストリームをクローズします。
bool imap_createmailbox ( resource $imap_stream , string $mailbox )\nimap_createmailbox() は mailbox で指定された新しいメールボックスを作成します。
bool imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] )\nmsg_number が指すメッセージに 削除予定のマークをします。削除マークを付けられたメッセージは、 imap_expunge() がコールされるか imap_close() に CL_EXPUNGE を付けてコールされるかのどちらかが行われるまでメールボックスに残ったままになります。
bool imap_deletemailbox ( resource $imap_stream , string $mailbox )\n指定したメールボックス mailbox を削除します。
array imap_errors ( void )\nページのリクエストの間かエラースタックがリセットされて以来 生じた全ての IMAP エラー (存在すれば) を返します。\nimap_errors() がコールされると、 処理の終了後にエラースタックがクリアされます。
bool imap_expunge ( resource $imap_stream )\nimap_delete()、imap_mail_move()、 あるいは imap_setflag_full() で削除用マークを設定されたすべてのメッセージを削除します。
array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] )\nこの関数は、指定された sequence のメールヘッダを取得してその内容の概要を返します。
string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )\n指定されたメッセージ本文中の特定のセクションを取得します。 本文パートは、この関数ではデコードされません。
string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] )\n指定したメッセージについて、フィルタリング されていない完全な &raquo; RFC2822 フォーマットのヘッダをテキスト文字列として取得します。
object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] )\nこの関数は、指定したメッセージに関するすべての構造化された情報を取り出します。
string imap_gc ( resource $imap_stream , int $caches )\n指定した型のエントリのキャッシュを破棄します。
array imap_get_quota ( resource $imap_stream , string $quota_root )\nクオータレベルの設定、メールボックス毎の使用状況を取得します。\nこの関数の非管理者向けバージョンは、 PHP の imap_get_quotaroot() 関数を参照ください。
array imap_get_quotaroot ( resource $imap_stream , string $quota_root )\nユーザ単位のクォータ設定を取得します。 limit の値は、このユーザがメールボックスで使用可能な総容量を表します。 usage の値は、ユーザが現在メールボックスで使用している容量を表します。
array imap_getacl ( resource $imap_stream , string $mailbox )\n指定したメールボックスの ACL を取得します。
array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )\nメールボックスの情報を取得します。
array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )\n購読中のメールボックスの情報を取得します。\nimap_getmailboxes() と同じ動作をしますが、 ユーザが購読しているメールボックスのみを返すという点が異なります。
object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )\n指定したメッセージ番号についての情報を、そのヘッダを読み込んで取得します。
object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )\n指定したメッセージ番号についての情報を、そのヘッダを読み込んで取得します。
array imap_headers ( resource $imap_stream )\nメールボックス内のすべてのメッセージのヘッダを返します。
string imap_last_error ( void )\n現在のページに生じた直近の IMAP エラーメッセージの全文を返します。 エラースタックは変更されません。 imap_last_error() を続けてコールした際、 コール間に新規エラーが生じていない場合は同じエラーが返されます。
array imap_list ( resource $imap_stream , string $ref , string $pattern )\nメールボックスのリストを読み込みます。
array imap_list ( resource $imap_stream , string $ref , string $pattern )\nメールボックスのリストを読み込みます。
array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )\ncontent をテキストに持つメールボックスの名前を 配列で返します。\nこの関数は imap_listmailbox() に似ていますが、 メールボックス内に文字列 content が存在するか どうかを調べる点が違います。
array imap_lsub ( resource $imap_stream , string $ref , string $pattern )\n購読しているすべてのメールボックスの配列を取得します。
array imap_lsub ( resource $imap_stream , string $ref , string $pattern )\n購読しているすべてのメールボックスの配列を取得します。
string imap_mail_compose ( array $envelope , array $body )\n指定したエンベロープ envelope およびボディセクション body に基づいて MIME メッセージを作成します。
bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )\nmsglist で指定されたメッセージを、 指定したメールボックスにコピーします。
bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )\nmsglist で指定されたメッセージを、 指定されたメールボックス mbox に移動します。
bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )\nこの関数は、Cc および Bcc 受信者の正確な処理を行って email を送信することが可能です。\nパラメータ to 、cc および bcc は全て文字列で、 &raquo; RFC822 アドレスリストとしてパースされます。
object imap_mailboxmsginfo ( resource $imap_stream )\nサーバにおける現在のメールボックスのステータスを調べます。この関数は imap_status() に似ていますが、 メールボックス内の全メッセージのサイズを合計します。このため、 実行時間が幾分余計にかかります。
array imap_mime_header_decode ( string $text )\n非 ASCII テキストの MIME メッセージヘッダエクステンションをデコードします (&raquo; RFC2047 を参照ください)。
int imap_msgno ( resource $imap_stream , int $uid )\n指定した uid のメッセージ番号を返します。\nこの関数は、imap_uid() の逆の動作となります。
int imap_num_msg ( resource $imap_stream )\n現在のメールボックスにあるメッセージ数を返します。
int imap_num_recent ( resource $imap_stream )\n現在のメールボックスにある新しいメッセージの数を返します。
resource imap_open ( string $mailbox , string $username , string $password [, int $options = NIL [, int $n_retries = 0 ]] )\nmailbox への IMAP ストリームをオープンします。\nこの関数は、POP3 や NNTP サーバへのストリームをオープンする際にも使用可能です。 しかし、いくつかの関数および機能は IMAP サーバでしか利用できません。
bool imap_ping ( resource $imap_stream )\nimap_ping() はストリームに ping を行い、 まだアクティブであるかどうかを調べます。これにより新しいメールの到着を知ることもあります。 これは、定期的に「メールのチェック」を行い、サーバとの 「接続を保持し続ける」ためのお勧めの方法です。
string imap_qprint ( string $string )\n（&raquo; RFC2045, section 6.7 に基づき）quoted-printable 文字列を 8 ビット文字列に変換します。
bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )\nこの関数は、古いメールボックスを新しいメールボックスにリネーム します（mbox 名のフォーマットについては imap_open() を参照ください）。
bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )\nIMAP または NNTP サーバ上の新しい mailbox に対して指定されたストリームを再オープンします。
array imap_rfc822_parse_adrlist ( string $address , string $default_host )\n&raquo; RFC2822 の定義に基づき、アドレス文字列をパースします。
object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = &quot;UNKNOWN&quot; ] )\n複数のヘッダ要素を含むオブジェクトを取得します。 imap_header() と同じようなものです。
string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )\n指定された情報を &raquo; RFC822 の定義に基づき 適切にフォーマットされた電子メールアドレスにして返します。
bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = &quot;&quot; [, int $options = 0 ]] )\n指定したメッセージの本文全体、あるいはその一部を保存します。
array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )\ncontent をテキストに持つメールボックスの名前を 配列で返します。\nこの関数は imap_listmailbox() に似ていますが、 メールボックス内に文字列 content が存在するか どうかを調べる点が違います。
array imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]] )\nこの関数は、指定した IMAP ストリームの現在オープンしているメールボックス において検索を行います。\n例えば、Mom から送られた全ての未回答のメッセージにマッチさせるには、 &quot;UNANSWERED FROM mom&quot; を使用します。 検索は、大文字小文字が区別されずに行われます。 検索条件のリストは、UW C クライアントのソースコードからのものであり、 不完全または不正確である可能性があります (&raquo; RFC2060, section 6.4.4 も参照ください)。
bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )\nメールボックス単位でクォータ上限(最大容量)を設定します。
bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )\n指定したメールボックスの ACL を設定します。
bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] )\nこの関数は、指定した sequence のメッセージの フラグに指定した flag を設定し、保存します。
array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]] )\n指定したパラメータにより取得したメッセージ番号をソートします。
object imap_status ( resource $imap_stream , string $mailbox , int $options )\n指定したメールボックス mailbox についてのステータス情報を取得します。
bool imap_subscribe ( resource $imap_stream , string $mailbox )\n新規メールボックスを購読します。
array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )\nスレッド化されたメッセージのツリーを取得します。
mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )\nimap タイムアウトを設定あるいは取得します。
int imap_uid ( resource $imap_stream , int $msg_number )\nこの関数は、指定したメッセージシーケンス番号の UID を返します。 メッセージ番号はメールボックスの内容を変更する度に変わる可能性が ありますが、UID はユニークな ID であり時間が経過しても変わりません。\nこの関数は、imap_msgno() の逆関数です。
bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] )\n指定したメッセージについて、 imap_delete() または imap_mail_move() で設定された削除フラグをはずします。
bool imap_unsubscribe ( resource $imap_stream , string $mailbox )\n指定されたメールボックス mailbox の購読を中止します。
string imap_utf7_decode ( string $text )\n修正版 UTF-7 の text を ISO-8859-1 文字列に デコードします。\nこの関数は、ある種の非 ASCII 文字を含むメールボックス名をデコードする際に 必要となります。
string imap_utf7_encode ( string $data )\ndata を修正版 UTF-7 テキストに変換します。\nこの関数は、ある種の非 ASCII 文字を含むメールボックス名をエンコード する際に必要となります。
string imap_utf8 ( string $mime_encoded_text )\n指定した mime_encoded_text を UTF-8 に変換します。
string implode ( string $glue , array $pieces )\nstring implode ( array $pieces )\n配列の要素を glue 文字列で連結します。
bool import_request_variables ( string $types [, string $prefix ] )\nGET/POST/Cookie 変数をグローバルスコープにインポートします。 この関数は、register_globals を無効としているが、いくつかの変数をグローバルスコープで参照したいといった場合に有用です。\n$_SERVER のような他の変数をグローバルスコープへインポートすることを考えている場合には、 extract() の使用を検討してください。
bool in_array ( mixed $needle , array $haystack [, bool $strict ] )\nneedle で haystack を検索します。
include_once()命令は、スクリプトの実行時に指定 したファイルを読み込み評価します。この動作は、 include()命令と似ていますが、ファイルからのコー ドが既に読み込まれている場合は、再度読み込まれないという重要な違い があります。その名が示す通り、ファイルは一度しか読み込まれません。\ninclude_once()は、スクリプトの実行時に同じファイ ルが複数回読み込まれ、評価される可能性がある場合に、関数の再定義や 変数値の再代入といった問題を回避するために一回だけ読み込ませるため に使用します。\nこの関数の動作についての情報は include() のドキュメントを参照ください。
include()文は指定されたファイルを読み込み、評価します。\n以下の記述内容はrequire()にも当てはまります。\nファイルのインクルードは、指定されたパスから行います。パスを指定しない場合は、 include_path の設定を利用します。 include() は、ファイルを見つけられない場合に warning を発行します。一方 require() の場合は、同じ場合に fatal error を発行する点が異なります。\nパス (絶対パスあるいは相対パスのいずれでも) を指定した場合は include_path は無視されます。たとえば ../ ではじまるファイル名を指定した場合は、 親ディレクトリからそのファイルを探します。\nPHP でのファイルのインクルードやインクルードパスについての詳細は include_path のドキュメントを参照ください。\nファイルが読み込まれるとそのファイルに含まれるコードは、 include()もしくはrequire()が実行された 行の変数スコープを継承します。 呼び出し側の行で利用可能である全ての変数は、読み込まれたファイル内で利用可能です。 しかし、読み込まれたファイル内で定義されている関数やクラスはすべて グローバルスコープとなります。
array inclued_get_data ( void )\ninclued データを取得します。
string inet_ntop ( string $in_addr )\nこの関数は 32 ビット IPv4 形式あるいは 128 ビット IPv6 形式 (PHP が IPv6 サポートを有効にしてビルドされている場合) のアドレスを文字列表現のアドレスに変換します。
string inet_pton ( string $address )\nこの関数は、人間が読める形式の IPv4 あるいは IPv6 (PHP が IPv6 サポートを有効にしてビルドされている場合) のアドレスを 32 ビットあるいは 128 ビットのバイナリ形式に変換します。
bool ingres_autocommit_state ( resource $link )\ningres_autocommit_state() をコールして、 現在のリンクで autocommit が有効になっているかどうかを調べます。
bool ingres_autocommit ( resource $link )\ningres_autocommit() は、サーバの autocommit モードをオンまたはオフに切替えるために、トランザクションをオープンする前 (最初に ingres_query() をコールする前、または ingres_rollback() あるいは ingres_commit() をコールした直後) にコールされます (スクリプトの実行開始には、autocommit モードはオフです)。\nautocommit モードがオンの場合、各クエリはサーバにより自動的にコミットされます。 これは、ingres_query() をコールした後に常に ingres_commit() をコールすることと等価です。 autocommit が有効かどうかを調べるには ingres_autocommit_state() を使用します。\nデフォルトで、Ingres will はリクエストの終了時に未コミットのトランザクションをロールバックします。 この関数あるいは ingres_commit() を使うことで、データを確実にデータベースにコミットすることができます。
string ingres_charset ( resource $link )\ningres_charset() is called to determine the character set being used by the Ingres client, from II_CHARSETxx (where xx is the installation code).
bool ingres_close ( resource $link )\ningres_close() は、指定したリンクが指す Ingres サーバへの接続をクローズします。パラメータ\n持続的接続をクローズすることはできず、 持続的でない接続はスクリプトの終了時に自動的にクローズされるため、 ingres_close() は通常は不要です。
bool ingres_commit ( resource $link )\ningres_commit() は、 現在オープンしているトランザクションをコミットし、 全ての変更をデータベースに保存します。\nこの関数はトランザクションをクローズします。 ingres_query() によりクエリを送信することで、 新規のトランザクションをオープンすることが可能です。\nトランザクションをオープンする前に ingres_autocommit() をコールすることにより、 各クエリの後に自動的にサーバ側でコミットを行うことも可能です。\nデフォルトで、Ingres will はリクエストの終了時に未コミットのトランザクションをロールバックします。 この関数あるいは ingres_autocommit() を使うことで、データを確実にデータベースにコミットすることができます。
resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )\ningres_connect() は、指定した Ingres database との接続をオープンします。\nこの接続は、スクリプトの実行終了時または、このリンクについて ingres_close() がコールされた場合に クローズされます。
string ingres_cursor ( resource $result )\nアクティブなカーソルの名前を文字列で返します。 アクティブなカーソルがない場合は NULL を返します。
int ingres_errno ([ resource $link ] )\n直近のエラー番号を整数値で返します。エラーが発生していない場合は 0 を返します。\nlink リソースが ingres_errno() に渡された場合、そのリンクに記録された直近のエラーを返します。 リンクが渡されなかった場合、ingres_errno() はデフォルトのリンクを使用して直近のエラーを返します。\nこの関数 ingres_errno() は、 データベースクエリを実行した直後にコールしなければなりません。 ingres_errno() の前に他の関数がコールされると、 直近の Ingres 関数のコールで発生したエラーコードが書き換えられてしまいます。
string ingres_error ([ resource $link ] )\n直近のエラーの内容を文字列で返します。エラーが発生していない場合は NULL を返します。\nlink リソースが ingres_error() に渡された場合、そのリンクに記録された直近のエラーを返します。 リンクが渡されなかった場合、ingres_error() はデフォルトのリンクを使用して直近のエラーを返します。\nこの関数 ingres_error() は、 データベースクエリを実行した直後にコールしなければなりません。 ingres_error() の前に他の関数がコールされると、 直近の Ingres 関数のコールで発生したエラーメッセージが書き換えられてしまいます。
string ingres_errsqlstate ([ resource $link ] )\n直近の SQLSTATE を文字列で返します。エラーが発生していない場合は NULL を返します。\nlink リソースが ingres_errsqlstate() に渡された場合、そのリンクに記録された直近のエラーを返します。 リンクが渡されなかった場合、ingres_errsqlstate() はデフォルトのリンクを使用して直近のエラーを返します。\nこの関数 ingres_errsqlstate() は、 データベースクエリを実行した直後にコールしなければなりません。 ingres_errsqlstate() の前に他の関数がコールされると、 直近の Ingres 関数のコールで発生したエラーメッセージが書き換えられてしまいます。
string ingres_escape_string ( resource $link , string $source_string )\ningres_escape_string() is used to escape certain characters within a string before it is sent to the database server.
boolean ingres_execute ( resource $result [, array $params [, string $types ]] )\nExecute a query prepared using ingres_prepare().
array ingres_fetch_array ( resource $result [, int $result_type ] )\nこの関数は、ingres_fetch_row() の拡張版です。 結果として返される配列の数値添字にデータを保存するだけでなく、 フィールド名をキーとして連想配列にもデータが保存されます。\n結果において複数のカラムが同じフィールド名を有している場合、後の カラムが優先されます。同名の他のカラムにアクセスするには、カラムの 添字番号を使用するか、カラムのエイリアスを作成する必要があります。\n<?php$result&nbsp;=&nbsp;ingres_query($link,&nbsp;"select&nbsp;ap_place&nbsp;as&nbsp;city,&nbsp;ap_ccode&nbsp;as&nbsp;country&nbsp;from&nbsp;airport&nbsp;where&nbsp;ap_iatacode&nbsp;=&nbsp;'VLL'");&nbsp;$result&nbsp;=&nbsp;ingres_fetch_array($result);$foo&nbsp;=&nbsp;$result["city"];$bar&nbsp;=&nbsp;$result["country"];?>\n速度面では、この関数は ingres_fetch_object() と同じで、ingres_fetch_row() とほぼ同等です (差は僅かです)。\nデフォルトでは、ingres_fetch_array() が作成する配列のインデックスは 1 から始まります。これは、 他の DBMS の拡張モジュールが 0 から始めるのと異なっています。 他と同様に 0 から始めるようにするには、設定パラメータ ingres.array_index_start を使用します。
object ingres_fetch_object ( resource $result [, int $result_type ] )\nこの関数は ingres_fetch_array() に似ていますが、 配列の代わりにオブジェクトが返されるという違いが一つあります。 間接的なアクセス、つまり、オフセットではなくフィールド名によりデータを アクセスすることのみが可能です(数値はプロパティ名としては使用 できません)。\n速度の面では、この関数は ingres_fetch_array() と等価であり、ingres_fetch_row() とほぼ同等です (違いは僅かです)。
int ingres_fetch_proc_return ( resource $result )\nThis function is used to retrieve the return value following the execution of an Ingres database procedure (stored procedure).
array ingres_fetch_row ( resource $result )\ningres_fetch_row() は取得したレコード(行)を有 する配列を返します。レコードがもうない場合は FALSE を返します。各 カラムは、オフセット1から始まる配列オフセットに保存されます。\ningres_fetch_row() を連続的にコールした場合、 結果集合の中の次のレコードが返され、もうレコードがない場合はFALSE を返します。\nデフォルトでは、ingres_fetch_row() が作成する配列のインデックスは 1 から始まります。これは、 他の DBMS の拡張モジュールが 0 から始めるのと異なっています。 他と同様に 0 から始めるようにするには、設定パラメータ ingres.array_index_start を使用します。
int ingres_field_length ( resource $result , int $index )\ningres_field_length() はフィールド長を返します。 フィールド長は、フィールドをサーバに保存する際に使用されるバイト数です。 詳細な情報については、Ingres OpenAPI User Guide の Appendix &quot;Data Types&quot; を参照ください。
string ingres_field_name ( resource $result , int $index )\ningres_field_name() は、クエリ結果のフィールド名を返します。
bool ingres_field_nullable ( resource $result , int $index )\nフィールドに null を設定可能かどうかを調べます。
int ingres_field_precision ( resource $result , int $index )\ningres_field_precision() はフィールドの精度を返します。 この値は、decimal、float、SQLデータ money 型でのみ使用されます。 詳細な情報については、Ingres OpenAPI User Guide の Appendix &quot;Data Types&quot; を参照ください。
int ingres_field_scale ( resource $result , int $index )\ningres_field_scale() はフィールドのスケールを返します。 この値は、SQLデータ decimal 型でのみ使用されます。 詳細な情報については、Ingres OpenAPI User Guide の Appendix &quot;Data Types&quot; を参照ください。
string ingres_field_type ( resource $result , int $index )\nクエリ結果においてフィールドの型を取得します。
bool ingres_free_result ( resource $result )
bool ingres_next_error ([ resource $link ] )\nGet the next Ingres error for the last executed query. Each call to ingres_next_error() can be followed by a call to ingres_errno(), ingres_error() or ingres_errsqlstate() to get the respective error number, error text, or SQL STATE. While ingres_next_error() returns TRUE, there are more errors to fetch.
int ingres_num_fields ( resource $result )\ningres_num_fields() は、 ingres_query() をコールした後で、Ingres サーバにより返された結果のフィールド数を返します。
int ingres_num_rows ( resource $result )\nこの関数は、主にデータベースで修正されたレコードの数を得る際に有用です。 しかし、SELECT 分で取得した行の数を取得するために使うこともできます。
resource ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] )\nIngres データベースへの持続的接続をオープンします。\nこの関数と ingres_connect() の違いは次の 2 つだけです。 まず、接続時にこの関数は、まず同じパラメータ既にオープンされている (持続的な)リンクを探すことです。第2に、Ingres サーバへの接続は スクリプトの実行終了時にもクローズされないところです。代わりに、 リンクは、後で使用するためにオープンされたままとなります (ingres_close() は、 ingres_pconnect() により確立されたリンクを クローズしません)。このため、この型のリンクは「持続的(persistent)」 であると呼ばれます。
mixed ingres_prepare ( resource $link , string $query )\nPrepares a query for execution by ingres_execute().\nThe query becomes part of the currently open transaction. If there is no open transaction, ingres_query() opens a new transaction. To close the transaction, you can call either ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes. When the script ends, any open transaction is rolled back (by calling ingres_rollback()). You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediately committed.
mixed ingres_query ( resource $link , string $query [, array $params [, string $types ]] )\ningres_query() は、指定した query を Ingres サーバに送信します。\nクエリは、現在オープンされているトランザクションの一部となります。 オープンされているトランザクションがない場合、 ingres_query() は新規のトランザクションをオープンします。 トランザクションをクローズするには、データベースへの変更をコミットする場合に ingres_commit() を、 これらの変更をキャンセルする場合に ingres_rollback() のどちらかを使用することが可能です。 スクリプト終了時に、全てのオープンされたトランザクションは (ingres_rollback() をコールすることにより) ロールバックされます。新規トランザクションをオープンする前に ingres_autocommit() を使用することも可能です。 この場合、各 SQL クエリは直ちにコミットされます。
boolean ingres_result_seek ( resource $result , integer $position )\nThis function is used to position the cursor associated with the result resource before issuing a fetch. If ingres.array_index_start is set to 0 then the first row is 0 else it is 1. ingres_result_seek() can be used only with queries that make use of scrollable cursors. It cannot be used with ingres_unbuffered_query().
bool ingres_rollback ( resource $link )\ningres_rollback() は現在オープンされているトランザクションをロールバックし、 トランザクションの間にデータベースに行われた全ての変更をキャンセルします。\nこの関数は、トランザクションをクローズします。 ingres_query() によりクエリを送信することによって、 新規のトランザクションをオープンすることが可能です。
bool ingres_set_environment ( resource $link , array $options )\ningres_set_environment() is called to set environmental options that affect the output of certain values from Ingres, such as the timezone, date format, decimal character separator, and float precision.
mixed ingres_unbuffered_query ( resource $link , string $query [, array $params [, string $types ]] )\ningres_unbuffered_query() sends the given query to the Ingres server.\nThe query becomes part of the currently open transaction. If there is no open transaction, ingres_unbuffered_query() opens a new transaction. To close the transaction, you can call either ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes. When the script ends, any open transaction is rolled back (by calling ingres_rollback()). You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediately committed. Ingres allows only a single unbuffered statement to be active at any one time. The extension will close any active unbuffered statements before executing any SQL. In addition you cannot use ingres_result_seek() to position the row before fetching.
string ini_set ( string $varname , string $newvalue )\n指定した設定オプションの値を設定します。 設定オプションは、スクリプトの実行中は新しい値を保持し、 スクリプト終了時に元の値へ戻されます。
array ini_get_all ([ string $extension [, bool $details = true ]] )\nすべての登録済み設定オプションを返します。
string ini_get ( string $varname )\n成功時に、設定オプションの値を返します。
void ini_restore ( string $varname )\n指定した設定オプションを元の値に戻します。
string ini_set ( string $varname , string $newvalue )\n指定した設定オプションの値を設定します。 設定オプションは、スクリプトの実行中は新しい値を保持し、 スクリプト終了時に元の値へ戻されます。
int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )\ninotify_add_watch() は、pathname で指定したファイルあるいはディレクトリへの監視を追加あるいは変更します。\n既存の監視対象に対して inotify_add_watch() を使用すると、 監視内容を上書きします。定数 IN_MASK_ADD を使用すると、 既存の監視対象を上書きせずにイベントを追加します。
resource inotify_init ( void )\ninotify_add_watch() で使用するための inotify インスタンスを初期化します。
int inotify_queue_len ( resource $inotify_instance )\nこの関数で、inotify_read() がブロックされるかどうかを知ることができます。 ゼロより大きい数が返された場合は待機中のイベントがあることを意味し、 この場合 inotify_read() はブロックされません。
array inotify_read ( resource $inotify_instance )\ninotify イベントを inotify インスタンスから読み込みます。
bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )\ninotify_rm_watch() は、 watch_descriptor がさす監視を inotify インスタンス inotify_instance から削除します。
bool interface_exists ( string $interface_name [, bool $autoload = true ] )\n指定したインターフェイスが定義されているかどうかを調べます。
string intl_error_name ( int $error_code )\nICU のエラーコード名を返します。
int intl_get_error_code ( void )\n静的メソッドを実行した場合など、 エラーコードを取得するオブジェクトが存在しない場合のエラー処理に便利です。
string intl_get_error_message ( void )\n直近の国際化関数のコールによるエラーメッセージを取得します。
bool intl_is_failure ( int $error_code )
int intval ( mixed $var [, int $base = 10 ] )\n指定された値 base を基数（デフォルトは 10）とする、 var の integer としての値を返します。
int ip2long ( string $ip_address )\n関数 ip2long() は、インターネット標準形式 (ドット表記の文字列) 表現から IPv4 インターネットネットアドレスを生成します。\nip2long() は不完全な形式の IP アドレスに対しても動作します。詳しい情報は &raquo; http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm を参照ください。
mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )\nバイナリ IPTC データを JPEG イメージに埋めこみます。
array iptcparse ( string $iptcblock )\n&raquo; IPTC ブロックをパースします。
bool is_a ( object $object , string $class_name )\n指定した object がこのクラスのものであるか、 あるいはこのクラスをその親クラスのひとつとしているかどうかを調べます。
bool is_array ( mixed $var )\n与えられた変数が配列かどうかを検査します。
bool is_binary ( mixed $var )\n指定した変数が、ネイティブのバイナリ文字列かどうかを調べます。
bool is_bool ( mixed $var )\n指定した変数が boolean であるかどうかを調べます。
bool is_buffer ( mixed $var )\n指定した変数が、ネイティブの unicode あるいはバイナリ文字列かどうかを調べます。
bool is_callable ( callback $name [, bool $syntax_only = false [, string &$callable_name ]] )\n引数の内容が、関数としてコール可能かどうかを調べます。 変数が有効な関数名かどうかを調べたり、配列の中に適切に エンコードされたオブジェクトと関数名が格納されているかどうかを 調べたりすることが可能です。
bool is_dir ( string $filename )\n指定したファイルがディレクトリかどうかを調べます。
bool is_float ( mixed $var )\n与えられた変数の型が float かどうかを調べます。
bool is_executable ( string $filename )\nファイルが実行可能かどうかを調べます。
bool is_file ( string $filename )\n指定したファイルが通常のファイルかどうかを調べます。
bool is_finite ( float $val )\nval が このプラットフォーム上で有効な有限値であるかどうかを調べます。
bool is_float ( mixed $var )\n与えられた変数の型が float かどうかを調べます。
bool is_infinite ( float $val )\nval が（正または負の）無限大である場合に TRUE を返します。たとえば log(0) の結果、 あるいはこのプラットフォーム上で扱える float の範囲を超えた数などが あてはまります。
bool is_int ( mixed $var )\n与えられた変数の型が整数型かどうかを検査します。
bool is_int ( mixed $var )\n与えられた変数の型が整数型かどうかを検査します。
bool is_link ( string $filename )\n指定したファイルがシンボリックリンクかどうかを調べます。
bool is_int ( mixed $var )\n与えられた変数の型が整数型かどうかを検査します。
bool is_nan ( float $val )\nval が &#039;非数値 (not a number)&#039; であるかどうかを調べます。たとえば acos(1.01) の結果などがこれにあたります。
bool is_null ( mixed $var )\n指定した変数が NULL かどうかを調べます。
bool is_numeric ( mixed $var )\n指定した変数が数値であるかどうかを調べます。数値形式の文字列は以下の要素から なります。（オプションの）符号、任意の数の数字、（オプションの）小数部、 そして（オプションの）指数部。つまり、+0123.45e6 は数値として有効な値です。16 進表記（0xFF）も 認められますが、この場合は符号や小数部、指数部を含めることはできません。
bool is_object ( mixed $var )\n与えられた変数がオブジェクトかどうかを調べます。
bool is_readable ( string $filename )\nファイルが読み込み可能かどうかを調べます。
bool is_float ( mixed $var )\n与えられた変数の型が float かどうかを調べます。
bool is_resource ( mixed $var )\n指定した変数がリソースかどうかを調べます。
bool is_scalar ( mixed $var )\n指定した変数がスカラかどうかを調べます。\nスカラ変数には integer、float、string あるいは boolean が含まれます。 array、object および resource はスカラではありません。
bool is_soap_fault ( mixed $object )\nこの関数は、SOAP コールが失敗したかどうかを調べたいが、例外を使用したくない 場合に有用です。 この関数を使用するには、オプション exceptions に ゼロまたは FALSE を指定して SoapClient オブジェクトを作成する必要があります。 この場合、SOAP メソッドは、特別な SoapFault オブジェクトを返します。 このオブジェクトには、フォルトの詳細 (faultcode, faultstring, faultactor および faultdetails) が含まれています。\nexceptions が設定されていない場合、 SOAPコールは、エラー時に例外を投げます。 is_soap_fault() は指定したパラメータ SoapFault オブジェクトであるかどうかを調べます。
bool is_string ( mixed $var )\n指定した変数の型が文字列かどうかを調べます。
bool is_subclass_of ( mixed $object , string $class_name )\n指定した object が、その親のひとつに class_name を持つかどうかを調べます。
bool is_unicode ( mixed $var )\n指定した変数が、unicode 文字列かどうかを調べます。
bool is_uploaded_file ( string $filename )\nfilename という名前のファイルが HTTP POST によりアップロードされたものである場合に TRUE を返します。 悪意のあるユーザがスクリプトをだまして、 本来見られてはいけないはずのファイル (/etc/passwd など) にアクセスすることを防止したい場合に、この関数は有用です。\nこの種の確認は、アップロードされたファイルに関して何でもできる場合には、 その内容をユーザ、または同じシステム上の他のユーザにさえ 暴かれる可能性があるため、特に重要です。\n適切に動作させるため、関数 is_uploaded_file() は $_FILES['userfile']['tmp_name'] のような引数を必要とします。 アップロードされたファイルのクライアントマシン上での名前 $_FILES['userfile']['name'] では動作しません。
bool is_writable ( string $filename )\nfilename が存在して、かつそれが書き込み可能であれば TRUEを返します。引数filenameはディレクトリ名とすることができ、 ディレクトリが書き込み可能であることを調べることが可能です。\nPHP は、Web サーバが実行されているユーザ ID(&#039;nobody&#039; が多い) でファイルにアクセスすることを覚えておいてください。 セーフモードの制限は働きません。
bool is_writable ( string $filename )\nfilename が存在して、かつそれが書き込み可能であれば TRUEを返します。引数filenameはディレクトリ名とすることができ、 ディレクトリが書き込み可能であることを調べることが可能です。\nPHP は、Web サーバが実行されているユーザ ID(&#039;nobody&#039; が多い) でファイルにアクセスすることを覚えておいてください。 セーフモードの制限は働きません。
bool isset ( mixed $var [, mixed $var [,  $... ]] )\n変数がセットされており、それが NULL でないことを調べます。\n変数が、unset() により割当を解除された場合、 何も値が設定されていない状態になります。 NULLに設定されている変数を調べた場合、 isset() はFALSEを返します。 NULLバイト(&quot;\\0&quot;)はPHPの定数 NULLと等価ではないことにも注意してください。\n複数のパラメータを渡した場合は、isset() はそれらすべてがセットされている場合にのみ TRUE を返します。 左から順に評価を行い、セットされていない変数があった時点で処理を終了します。
int iterator_apply ( Traversable $iterator , callback $function [, array $args ] )\nイテレータ内のすべての要素に対して関数をコールします。
int iterator_count ( Traversable $iterator )\nイテレータにある要素をカウントします。
array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )\nイテレータの要素を配列にコピーします。
void java_last_exception_clear ( void )\n直近の Java の例外をクリアします。
object java_last_exception_get ( void )\n直近の Java の例外を取得します。
mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )\n曜日を返します。 モードに依存した文字あるいは整数を返す事が出来ます。
string jdmonthname ( int $julianday , int $mode )\n月の名前を含んだ文字列を返します。 mode はユリウス積算日をどの暦に変換するか、 どんなタイプの月名を返すかを関数に伝えます。  暦モード   モード 意味 値     0 グレゴリウス暦 - 省略形 Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec   1 グレゴリウス暦 January, February, March, April, May, June, July, August, September, October, November, December   2 ユリウス暦 - 省略形 Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec   3 ユリウス暦 January, February, March, April, May, June, July, August, September, October, November, December   4 ユダヤ暦 Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul   5 フランス革命暦 Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra
string jdtofrench ( int $juliandaycount )\nユリウス積算日をフランス革命暦に変換します。
string jdtogregorian ( int $julianday )\nユリウス積算日を &quot;月/日/年&quot; の形式でグレゴリウス日を含む文字列に変換します。
string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )\nユリウス積算日をユダヤ暦に変換します。
string jdtojulian ( int $julianday )\nユリウス積算日を &quot;月/日/年&quot; の形式でユリウス暦を含む文字列に変換します。
int jdtounix ( int $jday )\nこの関数は、jday で指定したユリウス歴に 対応する Unix タイムスタンプを返します。 jday が Unix 歴 (グレゴリウス歴で 1970 年と 2037 年の間 または 2440588 <= jday <= 2465342) の範囲外の場合は FALSE を返します。返される時刻は地方時間です (GMT ではありません)。
int jewishtojd ( int $month , int $day , int $year )\nこの関数では1年(紀元前3761年)に遡って全ての日々を扱うこと が出来ますが、この様な使い方は特に意味があるわけではありません。 ユダヤ暦は数千年に渡って使われていますが、当初は月の 始まりが決められていませんでいた。新しい月は新月が最初に観測 された日に始まりました。
string implode ( string $glue , array $pieces )\nstring implode ( array $pieces )\n配列の要素を glue 文字列で連結します。
bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )\nJPEG ファイルを WBMP ファイルに変換します。
mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 ]] )\nJSON エンコードされた文字列を受け取り、それを PHP の変数に変換します。
string json_encode ( mixed $value [, int $options = 0 ] )\nvalue を JSON 形式にした文字列を返します。
int json_last_error ( void )\n直近の JSON パース処理中に発生したエラー (もし存在すれば) を返します。
int juliantojd ( int $month , int $day , int $year )\nユリウス暦は紀元前 4713 年から紀元 9999 年の範囲で使えます。\nこの関数は日付けを全て紀元前 4713 年にさかのぼって扱うことが 出来ますが,この様な使い方はあまり意味があるわけではありません。 このカレンダーは紀元前 46 年に作られました、しかし細部は紀元 8 年になるまで、おそらくは 4 世紀になるまで安定しませんでした。 また、年の始まりを一つの文化のものから別の文化のものに変更すること、 つまり、January を最初の月とすることは全く受け入れられませんでした。\n警告\n覚えておいてほしいのは、現在世界中で使用されているカレンダーは グレゴリウス暦であるということです。この日付をユリウス日に 変換するには、gregoriantojd() が使用可能です。
bool kadm5_chpass_principal ( resource $handle , string $principal , string $password )\nkadm5_chpass_principal() は、 principal の新しいパスワードを password に設定します。
bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] )\n指定した password で principal を作成します。
bool kadm5_delete_principal ( resource $handle , string $principal )\nKerberos データベースから principal を削除します。
bool kadm5_destroy ( resource $handle )\n管理サーバへの接続を閉じ、関連するすべてのリソースを開放します。
bool kadm5_flush ( resource $handle )\nKerberos データベースに対するすべての変更を取り消し、 Kerberos 管理サーバとの接続はオープンしたままにします。
array kadm5_get_policies ( resource $handle )\nポリシー名を含む配列を取得します。
array kadm5_get_principal ( resource $handle , string $principal )\nKerberos データベースから、プリンシパルのエントリを取得します。
array kadm5_get_principals ( resource $handle )\nkadm5_get_principals() は、プリンシパルの名前を含む 配列を返します。
resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password )\nprincipal および指定した password を使用して KADM5 ライブラリとの接続をオープンし、 admin_server から証明書を取得します。
bool kadm5_modify_principal ( resource $handle , string $principal , array $options )\n指定した options に基づいて principal を変更します。
mixed key ( array &$array )\nkey() は、 現在の配列位置における連想配列要素のキーを返します。
bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\n配列をキーにより逆順にソートします。キーとデータとの関係は維持されます。 この関数は主に連想配列の場合に有用です。
bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\nキーとデータの関係を維持しつつ、配列をキーでソートします。 この関数は、主として連想配列において有用です。
string lcfirst ( string $str )\nstr の最初の文字がアルファベットであれば、 それを小文字にします。\n「アルファベット」かどうかというのは現在のロケールにより決定されます。 たとえば、デフォルトの &quot;C&quot; ロケールでは、a ウムラウト (a) は変換されません。
float lcg_value ( void )\nlcg_value() は、(0, 1)の範囲の疑似乱数を返します。 この関数は、周期が 2^31 - 85 および 2^31 - 249 の 2 つの CG を組み合わせます。 この関数の周期はこれら 2 つの素数の積と等価です。
bool lchgrp ( string $filename , mixed $group )\nシンボリックリンク filename のグループを group に変更しようと試みます。\nスーバーユーザは、 シンボリックリンクのグループを任意のものに変更できます。 その他のユーザは、自分自身がメンバーの一員となっているグループにのみ変更できます。
bool lchown ( string $filename , mixed $user )\nシンボリックリンク filename の所有者を user に変更しようと試みます。\nシンボリックリンクの所有者を変更できるのは、スーパーユーザのみです。
string ldap_8859_to_t61 ( string $value )\nISO-8859 文字を t61 文字に変換します。\nこの関数は、 LDAPv2 サーバとやり取りしなければならない場合に有用です。
bool ldap_add ( resource $link_identifier , string $dn , array $entry )\nエントリを LDAP ディレクトリに追加します。
bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )\n指定した RDN およびパスワードを用いて LDAP ディレクトリにバインドします。
bool ldap_unbind ( resource $link_identifier )\nLDAP ディレクトリへのバインドを解除します。
mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )\n属性 attribute の値 value を、指定した LDAP ディレクトリエントリの同じ属性の値と比較します。
resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )\n指定した hostname および port 上の LDAP サーバとの接続を確立します。
int ldap_count_entries ( resource $link_identifier , resource $result_identifier )\n直前の検索結果として保存されたエントリの数を返します。
bool ldap_delete ( resource $link_identifier , string $dn )\n指定したエントリを LDAP ディレクトリから削除します。
string ldap_dn2ufn ( string $dn )\n指定した dn をよりユーザにわかりやすい形式にするため、 型名を取り除きます。
string ldap_err2str ( int $errno )\nこの関数は、エラー番号 errno が意味する エラーメッセージ文字列を返します。LDAP errno 番号は標準化されていますが、 異なったライブラリでは、異なる（あるいはローカライズされた）エラーメッセージ が返されます。エラーメッセージの内容をチェックするのではなく、 必ずエラー番号をチェックするようにしてください。
int ldap_errno ( resource $link_identifier )\n直近の LDAP コマンドにより返された、標準化されたエラー番号を返します。 この番号は、ldap_err2str() を用いてエラーメッセージ 文字列に変換することができます。
string ldap_error ( resource $link_identifier )\n指定した link_identifier に関して、 直近の LDAP コマンドにより生成されたエラーを表すエラーメッセージ文字列を返します。 LDAP errno 番号は標準化されていますが、ライブラリによって異なる （あるいはローカライズされた）エラーメッセージを返します。 エラーメッセージの内容をチェックするのではなく、 必ずエラー番号をチェックするようにしてください。\nphp.ini で警告レベルを十分に下げるか、 警告出力を抑制するために LDAP コマンドの前に @ 文字をつけない限り、発生したエラーは HTML 出力にも表示されます。
array ldap_explode_dn ( string $dn , int $with_attrib )\nldap_get_dn() により返された DN を分割し、 複数の要素に分けます。各部分は、相対区分名 (Relative Distinguished Name または RDN) と呼ばれます。
string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )\n指定したエントリの最初の属性を取得します。残りの属性は、 ldap_next_attribute() を逐次コールして取得します。\nエントリの読み込みと同様、 エントリからの属性の読み込みもひとつづつ行われます。
resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )\n結果内の最初のエントリのエントリ ID を返します。このエントリ ID を ldap_next_entry() に渡し、 結果からそれ以降のエントリを取得します。\nLDAP 結果におけるエントリは、ldap_first_entry() および ldap_next_entry() 関数を用いて連続的に 読み込まれます。
resource ldap_first_reference ( resource $link , resource $result )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_free_result ( resource $result_identifier )\n内部での結果保持用に割り当てられていたメモリを開放します。 結果メモリは、スクリプトの終了時に自動的に開放されます。\n通常、LDAP の結果用に確保された全てのメモリはスクリプトの実行終了時 に開放されます。連続的な検索を行うスクリプトのように大きな 結果セットを返す場合、スクリプトにより使用される実行用メモリを 小さく保つために ldap_free_result() をコールすることが可能です。
array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )\n検索結果エントリから属性と値を読み込みます。\nディレクトリに特定のエントリを置いている場合、この関数をコールする ことにより、そのエントリに関して保持されている情報得ることができます。 ディレクトリエントリを &quot;ブラウズ&quot; するか、ディレクトリエントリの 構造が未知であるアプリケーションにおいてこの関数を使用します。 多くのアプリケーションにおいては、電子メールアドレスや姓のような 特定の属性を検索するため、保持されている他のデータにどんなものがあるか ということは問題にならないと思われます。\nreturn_value[&quot;count&quot;] = そのエントリの属性の数 return_value[0] = 最初の属性 return_value[n] = n 番目の属性 return_value[&quot;attribute&quot;][&quot;count&quot;] = その属性に関する値の数 return_value[&quot;attribute&quot;][0] = その属性に関する最初の値 return_value[&quot;attribute&quot;][i] = その属性に関する (i+1) 番目の値
string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )\n結果における、あるエントリの DN を見つけます。
array ldap_get_entries ( resource $link_identifier , resource $result_identifier )\n指定した結果から複数のエントリを読み込み、 その属性および複数の値を読み込みます。
bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )\nretval を、指定したオプションの値として設定します。
array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )\n結果のエントリから、属性のすべての値を読み込みます。\nこの関数は、文字列データではなくバイナリデータを処理すること以外は、 ldap_get_values() と全く同じです。
array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )\n結果内のエントリ属性の、すべての値を読み込みます。\nこの関数のコールは、result_entry_identifier を必要とします。このため、事前に LDAP の検索用関数のコールと個々の エントリ取得用関数のコールを行っておく必要があります。\nアプリケーションでは、(&quot;surname&quot; または &quot;mail&quot; のような)特定の属性 を探すためにその属性をコードに埋め込んで置くか、さもなくば、指定した エントリに関して存在する属性を調べるために ldap_get_attributes() をコールする必要があります。
resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\n指定したフィルタ filter を使用し、スコープ LDAP_SCOPE_ONELEVEL でディレクトリを検索します。\nLDAP_SCOPE_ONELEVEL は、コール時に指定した base_dn の直下の階層から検索した結果のみを返すことを表します (&quot;ls&quot; と入力して、現在の作業ディレクトリのファイル/フォルダ 一覧を取得するのと同じようなものです)。
bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )\n指定した dn に属性を追加します。 この関数は、オブジェクトレベルではなく属性レベルで修正を行います。 オブジェクトレベルの追加は、ldap_add() 関数により行います。
bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )\nひとつあるいは複数の属性を、指定した dn から削除します。 この関数は、オブジェクトレベルではなく属性レベルで修正を行います。 オブジェクトレベルの削除は、ldap_delete() 関数により行います。
bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )\n指定した dn でひとつあるいは複数の属性の置換を行います。 この関数は、オブジェクトレベルではなく属性レベルで修正を行います。 オブジェクトレベルの修正は、ldap_modify() 関数により行います。
bool ldap_modify ( resource $link_identifier , string $dn , array $entry )\nLDAP ディレクトリ内のエントリを修正します。エントリの構造は ldap_add() と同じです。
string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )\nエントリ内の属性を取得します。 最初に ldap_next_attribute() をコールした際には ldap_first_attribute() から返される result_entry_identifier を使用します。
resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )\n結果に保持されたエントリを取得します。 連続的に ldap_next_entry() をコールした場合、 エントリがなくなるまでエントリを一つずつ返します。 ldap_next_entry() への最初のコールは、 ldap_first_entry() に result_entry_identifier を指定してコールした後に、その結果を用いて行います。
resource ldap_next_reference ( resource $link , resource $entry )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\n指定したフィルタ filter を使用し、スコープ LDAP_SCOPE_BASE でディレクトリを検索します。これは、 ディレクトリからエントリを読み込むことと同じ意味です。
bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )\ndn で指定したエントリについて、 名前の変更または移動を行います。
bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )\n指定したフィルタを使用し、 スコープ LDAP_SCOPE_SUBTREE でディレクトリを検索します。これは、ディレクトリ全体を検索するのと同じ意味です。\n4.0.5 以降、並列検索も可能となっています。並列検索を行うには、単一の ID を使うのではなく、リンク ID の配列を使用します。 同じベース DN を使用したくない場合や全ての検索について同じフィルタを 使用したくない場合、ベース DN の配列またはフィルタの配列を使用する ことが可能です。これらの配列は、リンク ID の配列と同じ大きさである 必要があります。これは、その配列の最初が一回の検索で使用され、2 番目の エントリが他の検索で使用されるといったようになるからです。並列検索を 実行する際、エラーの場合を除き、検索結果 ID の配列が返されます。 エラーの場合は対応する検索のエントリは FALSE となります。これは 通常返される値とよく似ていますが、検索が行われた際に結果 ID が常に 返されます。まれに、並列検索は ID を返すにもかかわらず通常の検索は FALSE を返すということがあります。
bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )\n指定したオプションの値を newval に設定します。
bool ldap_set_rebind_proc ( resource $link , callback $callback )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_sort ( resource $link , resource $result , string $sortfilter )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_start_tls ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string ldap_t61_to_8859 ( string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ldap_unbind ( resource $link_identifier )\nLDAP ディレクトリへのバインドを解除します。
int levenshtein ( string $str1 , string $str2 )\nint levenshtein ( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del )\nレーベンシュタイン距離は、str1 を str2 に変換するために置換、挿入、削除 しなければならない最小の文字数として定義されます。アルゴリズムの複雑さは、 O(m*n) です。 ここで、n および m はそれぞれ str1 および str2 の長さです (O(max(n,m)**3) となる similar_text() よりは良いですが、 まだかなりの計算量です)。\n上記の最も簡単な形式では、この関数はパラメータとして引数を二つだけとり、 str1 から str2 に変換する際に必要な 挿入、置換、削除演算の数のみを計算します。\n2 番目の形式では、挿入、置換、削除演算のコストを定義する 3 番目のパラメータが追加されます。この形式は 1 番目の形式より一般的で 汎用性が高いですが、効率的ではありません。
void libxml_clear_errors ( void )\nlibxml_clear_errors()は、libxmlエラーバッファをクリアします。
ReturnType libxml_disable_entity_loader ([ bool $disable  = TRUE ] )\n外部エンティティ読み込み機能の有効/無効を切り替えます。
array libxml_get_errors ( void )\nエラー配列を取得します。
LibXMLError libxml_get_last_error ( void )\nlibxmlから直近のエラーを取得します。
void libxml_set_streams_context ( resource $streams_context )\n次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定します。
bool libxml_use_internal_errors ([ bool $use_errors = false ] )\nlibxml_use_internal_errors() により、 標準のlibxmlエラーを無効にし、ユーザによるエラー処理を有効にすることができます。
bool link ( string $to_path , string $from_path )\nlink() はハードリンクを作成します。
int linkinfo ( string $path )\nリンクに関する情報を取得します。\nこの関数を使用して (path が指している) リンクが実際に存在するかどうかを、 (stat.h で定義されている S_ISLNK マクロと同じ方法で) チェックします。
void list ( mixed $varname [, mixed $... ] )\narray() と同様に、 この関数は実際には関数ではなく言語の構成要素です。 list() は、 単一の操作で一連の変数に値を代入するために使われます。
string locale_get_default ( void )\nこの関数は、デフォルトのロケールを返します。これは、 PHP が何らかの機能をローカライズする際に使用します。 このロケールは、setlocale() やシステム設定の影響を受けないことに注意しましょう。
bool locale_set_default ( string $name )\nPHP プログラムのデフォルトのロケールを設定します。 この関数は、setlocale() やシステムロケールには何の影響も及ぼさないことに注意しましょう。
array localeconv ( void )\nローカルな数値および通貨フォーマット情報を有する連想配列を返します。
array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )\nlocaltime() 関数は、C 言語の 同名の関数コールにより返される構造体と同じ内容の配列を返します。
float log ( float $arg [, float $base = M_E ] )\nオプションの base パラメータを指定した場合は log() は logbase arg を返します。それ以外の場合は log() は arg の自然対数を返します。
float log10 ( float $arg )\n底を 10 とする arg の対数を返します。
float log1p ( float $number )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nlog1p() は、 log(1 + number ) の値を返します。 number がゼロに近い場合でも正確な値が 計算できる方法を使用します。 log() は、このような場合には 精度の問題で log(1) の値を返してしまいます。
string long2ip ( string $proper_address )\n関数long2ip() は、適切なアドレス表現からドット表記 (例:aaa.bbb.ccc.ddd)のインターネットアドレスを生成します。
array lstat ( string $filename )\nfilename という名前のファイル、 またはシンボリックリンクの情報を得ます。
string ltrim ( string $str [, string $charlist ] )\n文字列の最初から空白 (もしくはその他の文字) を取り除きます。
string lzf_compress ( string $data )\nlzf_compress() は、指定された arg を LZF 符号化方式で圧縮します。
string lzf_decompress ( string $data )\nlzf_decompress() は、lzf で符号化された文字列を含む data を伸長します。
int lzf_optimized_for ( void )\nLZF 拡張モジュールが圧縮時に使用した最適化指定を取得します。
int m_checkstatus ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_completeauthorizations ( resource $conn , int &$array )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_connect ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_connectionerror ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool m_deletetrans ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool m_destroyconn ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void m_destroyengine ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_getcell ( resource $conn , int $identifier , string $column , int $row )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_getcommadelimited ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_getheader ( resource $conn , int $identifier , int $column_num )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource m_initconn ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_initengine ( string $location )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_iscommadelimited ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool m_maxconntimeout ( resource $conn , int $secs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_monitor ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_numcolumns ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_numrows ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_parsecommadelimited ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array m_responsekeys ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_responseparam ( resource $conn , int $identifier , string $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_returnstatus ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setblocking ( resource $conn , int $tf )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setdropfile ( resource $conn , string $directory )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setip ( resource $conn , string $host , int $port )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setssl_cafile ( resource $conn , string $cafile )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_setssl ( resource $conn , string $host , int $port )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_settimeout ( resource $conn , int $seconds )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string m_sslcert_gen_hash ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_transactionssent ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_transinqueue ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_transkeyval ( resource $conn , int $identifier , string $key , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_transnew ( resource $conn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_transsend ( resource $conn , int $identifier )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_uwait ( int $microsecs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int m_validateidentifier ( resource $conn , int $tf )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool m_verifyconnection ( resource $conn , int $tf )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool m_verifysslcert ( resource $conn , int $tf )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool set_magic_quotes_runtime ( bool $new_setting )\nmagic_quotes_runtime の現在アクティブな設定をセットします。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )\nメールを送信します。
string mailparse_determine_best_xfer_encoding ( resource $fp )\nファイルポインタから内容を読み込む際に最も適したエンコーディングを調べます。
resource mailparse_msg_create ( void )\nMIME メールリソースを作成します。
string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callback $callbackfunc ] )\n指定したファイル名のメッセージセクションを展開/デコードします。\nセクションの内容は、transfer encoding に応じて適切にデコードされます。 base64、quoted-printable および uuencode 形式をサポートしています。
void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callback $callbackfunc ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callback $callbackfunc ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool mailparse_msg_free ( resource $mimemail )\nMIME リソースを解放します。
array mailparse_msg_get_part_data ( resource $mimemail )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array mailparse_msg_get_structure ( resource $mimemail )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource mailparse_msg_parse_file ( string $filename )\nファイルをパースします。 ディスク上にあるメールファイルをパースするための最良の方法です。
bool mailparse_msg_parse ( resource $mimemail , string $data )\nデータを順にパースし、指定した mime メールリソースに格納します。\nこの関数により、ファイル全体を読み込んでからパースするのではなく 読み込んだ部分から順に処理していくことができます。
array mailparse_rfc822_parse_addresses ( string $addresses )\n&raquo; RFC 822 準拠の受信者リスト、 たとえば To: ヘッダの内容などをパースします。
bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )\nソースファイルポインタからストリームデータを取得し、 encoding を適用して それを出力ファイルポインタに書き込みます。
array mailparse_uudecode_all ( resource $fp )\n指定したファイルポインタからのデータを読み込み、 uuencode されたファイルを一時ファイルに展開します。
PHP のソースを除き、main() という名前の関数は 存在しません。PHP 4.3.0 では、PHP ソースにおいて新しいタイプの エラー処理(php_error_docref)が追加されました。そのひとつの機能として、 html_errors (デフォルトでオン)と docref_root (PHP 4.3.2 まではデフォルトでオン)のディレクティブがセットされている 場合に、PHP のエラーメッセージ上に PHP のマニュアルへのリンクが 表示されるようになりました。\nときおり、エラーメッセージは main() 関数の マニュアルを指すことがあります。それがこのページが存在する理由です。 もしそんな参照を発見したら、ぜひ &raquo; バグ報告をお願いします。 エラー時のリンク先が main() となっている PHP の関数を指摘してくだされば、それを修正して適切なドキュメントを指すようにします。\n現在判明している、main() を指すエラー   関数名 このバージョン以降、ここを指すことはありません     include() 5.1.0   include_once() 5.1.0   require() 5.1.0   require_once() 5.1.0
mixed max ( array $values )\nmixed max ( mixed $value1 , mixed $value2 [, mixed $value3... ] )\nパラメータとして配列をひとつだけ渡した場合は、max() は配列の中で最も大きい数値を返します。 ふたつ以上のパラメータを指定した場合は、max() はそれらの中で最も大きいものを返します。
手続き型\nint maxdb_affected_rows ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $affected_rows;\nmaxdb_affected_rows() は、与えられた link パラメータに関連した直近の INSERT、UPDATE あるいは DELETE クエリによって変更された行の数を返します。 この数が決定できない場合には、-1 を返します。
手続き型\nbool maxdb_autocommit ( resource $link , bool $mode )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool auto_commit ( bool $mode )\nmaxdb_autocommit() は、link リソースが表すデータベース接続上のクエリについて、 自動コミットモードを有効または無効にするために使用されます。
手続き型\nbool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )\nオブジェクト指向型 (メソッド)\nstmt\nbool bind_param ( string $types , mixed &$var1 [, mixed &$... ] )\n手続き型 (拡張構文)\nbool maxdb_stmt_bind_param ( resource $stmt , string $types , array &$var )\nオブジェクト指向型 (メソッド) (拡張構文)\nstmt\nbool bind_param ( string $types , array &$var )\nmaxdb_stmt_bind_param() は、 maxdb_prepare() に渡された SQL 文のパラメータマーカに、 変数をバインドするために使用されます。 文字列 types にはひとつあるいは複数の文字が含まれ、 これによって対応するバインド変数の型を指定します。\nmaxdb_stmt_bind_param() の拡張構文では、 パラメータを、PHP の変数リストではなくひとつの配列として渡せるようになります。 maxdb_stmt_bind_param() のコール前に配列変数が使用されていない場合は、空の配列として初期化されます。 maxdb_stmt_bind_param() の拡張構文の使用法については、 例を参照ください。\nSELECT INTO SQL 文の変数は、maxdb_stmt_bind_param() でバインドすることも可能です。データベースプロシージャのパラメータについては maxdb_stmt_bind_param() を使用してバインドできます。 このような場合の maxdb_stmt_bind_param() の使用法については、例を参照ください。\nSQL 文の INTO 変数にバインドする変数が事前に使用されていた場合は、 その変数の内容は SELECT INTO 文のデータで上書きされます。 maxdb_stmt_bind_param() をコールした後は、 この変数への参照は無効になります。\nデータベースプロシージャの INOUT パラメータの場合、 バインドされた INOUT 変数の内容は、データベースプロシージャの出力で 上書きされます。 maxdb_stmt_bind_param() をコールした後は、 この変数への参照は無効になります。\n型指定文字   文字 説明     i 対応する変数は integer 型です   d 対応する変数は double 型です   s 対応する変数は string 型です   b 対応する変数は blob で、一括して送信されます
手続き型\nbool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )\nオブジェクト指向型 (メソッド)\nstmt\nbool bind_result ( mixed &$var1 [, mixed &$... ] )\nmaxdb_stmt_bind_result() は、 結果セット内のカラムを変数に関連付ける (バインドする) ために使用されます。 データを取得するために maxdb_stmt_fetch() をコールすると、MaxDB クライアント/サーバプロトコルが、 バインドされたカラムのデータを指定した変数 var1, ... に保存します。
手続き型\nbool maxdb_change_user ( resource $link , string $user , string $password , string $database )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool change_user ( string $user , string $password , string $database )\nmaxdb_change_user() は、パラメータ link で指定したデータベース接続のユーザを変更し、現在のデータベースを database で指定したものに変更するために使用します。\nユーザの変更を行うには、username および password に有効な値が指定されていること、 そして指定したデータベースに対する適切なアクセス権がユーザに与えられていることが必要です。 何らかの理由で認証に失敗すると、現在のユーザ認証のままの状態となります。
手続き型\nstring maxdb_character_set_name ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nstring character_set_name ( void )\nlink パラメータで指定したデータベース接続の、 現在の文字セットを返します。
手続き型\nstring maxdb_character_set_name ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nstring character_set_name ( void )\nlink パラメータで指定したデータベース接続の、 現在の文字セットを返します。
手続き型\nbool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )\nオブジェクト指向型 (メソッド)\nmaxdb_stmt\nbool maxdb_stmt->close_long_data ( void )\nこの関数は、maxdb_execute() で開始した後、 maxdb_stmt_send_long_data() のシーケンスの後にコールする必要があります。\nparam_nr は、 データの最後にどのパラメータを関連付けるかを示します。 パラメータは、0 番から順に番号がつけられます。
手続き型\nbool maxdb_close ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool close ( void )\nmaxdb_close() 関数は、link パラメータで指定したデータベース接続 (事前にオープンされたもの) を閉じます。
手続き型\nbool maxdb_commit ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool commit ( void )\nlink パラメータで指定したデータベース接続について、 現在のトランザクションをコミットします。
int maxdb_connect_errno ( void )\nmaxdb_connect_errno() 関数は、 直近の maxdb_connect() のコールのエラーコードを返します。 エラーが発生しなかった場合は、この関数はゼロを返します。
string maxdb_connect_error ( void )\nmaxdb_connect_error() 関数は、対応する maxdb_connect_errno() 関数とほぼ同じですが、 直近の maxdb_connect() call で発生したエラーについて、 エラーコードの代わりに文字列を返します。エラーが発生しなかった場合は、 この関数は空の文字列を返します。
手続き型\nresource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )\nオブジェクト指向型 (コンストラクタ)\nmaxdb\n__construct ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )\nmaxdb_connect() 関数は、host で稼動している MaxDB サーバへの接続をオープンしようと試みます。 host にはホスト名あるいは IP アドレスが指定可能です。 &quot;localhost&quot; を渡すと、ローカルホストが使用されます。接続に成功すると、 maxdb_connect() はデータベースへの接続を表すリソースを返します。 失敗した場合は FALSE を返します。\nusername および password で、MaxDB サーバに接続する際のユーザ名およびパスワードを指定します。 パスワードが指定されなかった場合 (NULL が渡された場合) は、php.ini の maxdb.default_pw を使用して MaxDB サーバへの接続を試みます。\ndbname では、 クエリを実行する際のデフォルトのデータベースを指定します。 指定されなかった場合は、php.ini の maxdb.default_db エントリの内容が使用されます。\nport および socket は、MaxDB サーバでは無視されます。
手続き型\nbool maxdb_data_seek ( resource $result , int $offset )\nオブジェクト指向型 (メソッド)\nresult\nbool data_seek ( int $offset )\nmaxdb_data_seek() 関数は、result が表す結果セットの offset で指定した任意の位置に、 結果ポインタを移動します。offset は、 ゼロから全行数マイナス 1 の間 (0..maxdb_num_rows() - 1) でなければなりません。
void maxdb_debug ( string $debug )\nmaxdb_debug() は、SQLDBC 通信をトレースするために使用されます。以下の文字列が、 maxdb_debug() に対するパラメータとして使用可能です。   TRACE SHORT ON|OFF - メソッドコールのトレースを有効/無効にします。 TRACE LONG ON|OFF - メソッドの引数および詳細なデバッグトレースを有効/無効にします。 TRACE PACKET ON|OFF|<size> - パケットのトレースを有効/無効にし、 トレースされるオブジェクトのバイト数の制限を指定します。 サイズが指定されなかった場合は 1000 バイトとなります。 TRACE SQL ON|OFF - 高レベルの API トレースを有効/無効にします。 TRACE TIMESTAMP ON|OFF - トレースされた各行へのプレフィックスとして、 タイムスタンプの付加を有効/無効にします。 TRACE SIZE <size> - トレースファイルのサイズを最大 <size> バイトに制限します。少なくとも 8192 バイトが必要です。
手続き型\nbool maxdb_disable_reads_from_master ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nvoid disable_reads_from_master ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_disable_rpl_parse ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_dump_debug_info ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource maxdb_embedded_connect ([ string $dbname ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_enable_reads_from_master ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_enable_rpl_parse ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
手続き型\nint maxdb_errno ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $errno;\nmaxdb_errno() 関数は、link で指定したデータベースリンクに関して、直近の MaxDB 関数コールのエラーコードを返します。 エラーが発生しなかった場合は、この関数はゼロを返します。
手続き型\nstring maxdb_error ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $error;\nmaxdb_error() 関数は、対応する maxdb_errno() 関数とあらゆる点で同じです。 ただ maxdb_error() は、 整数のエラーコードは返しません。代わりに、 link で表されるデータベース接続で、 直近に発生したエラーを説明する文字列を返します。 エラーが発生しなかった場合は、この関数は空の文字列を返します。
手続き型\nstring maxdb_real_escape_string ( resource $link , string $escapestr )\nオブジェクト指向型 (メソッド)\nmaxdb\nstring real_escape_sring ( string $escapestr )\nこの関数は、SQL 文で使用するために、SQL で使用可能な文字列を作成するために使用します。 文字列 escapestr が、エスケープされた SQL 文字列にエンコードされます。その際、接続の現在の文字セットを考慮します。\nエンコードされる文字は &#039;, &quot; です。
手続き型\nbool maxdb_stmt_execute ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nbool execute ( void )\nmaxdb_stmt_execute() 関数は、 stmt で表される、事前に maxdb_prepare() で準備したクエリを実行します。実行の際には、 すべてのパラメータマーカが適切な値に置き換えられます。\nUPDATE、DELETE あるいは INSERT 文の場合は、 maxdb_stmt_affected_rows() 関数を使用すると 変更された行の総数が取得できます。同じく、 結果セットを返すクエリの場合は maxdb_fetch() 関数を使用して結果を取得できます。
手続き型\nmixed maxdb_fetch_array ( resource $result [, int $resulttype ] )\nオブジェクト指向型 (メソッド)\nresult\nmixed fetch_array ([ int $resulttype ] )\n取得した行に対応する配列を返します。 result が表す結果セットに行がもう存在しない場合には NULL を返します。\nmaxdb_fetch_array() は maxdb_fetch_row() 関数を拡張したものです。 データを数値添字の配列に保存することに加え、 maxdb_fetch_array() 関数は結果を連想配列でも保存します。 その際は、結果セットのフィールド名をキーとして使用します。
手続き型\narray maxdb_fetch_assoc ( resource $result )\nオブジェクト指向型 (メソッド)\nresult\narray fetch_assoc ( void )\n取得した行に対応する連想配列を返します。行がもう存在しない場合には NULL を返します。\nmaxdb_fetch_assoc() 関数は、result が表す結果の結果セット内の次の行を表す連想配列を返すために使用されます。 連想配列の各キーは、結果セットのカラム名を表します。\n結果の中に同名のカラムが複数存在する場合は、最後のカラムが優先されます。 同名の他のカラムにアクセスするには、 maxdb_fetch_row() を使用して数値添字の配列を使用するか、 あるいはカラム名のエイリアスを使用します。
手続き型\nmixed maxdb_fetch_field_direct ( resource $result , int $fieldnr )\nオブジェクト指向型 (メソッド)\nresult\nmixed fetch_field_direct ( int $fieldnr )\nmaxdb_fetch_field_direct() は、 指定した結果セットのフィールド定義情報を含むリソースを返します。 fieldnr の値は、0 から フィールド数 - 1 の間でなければなりません。
手続き型\nmixed maxdb_fetch_field ( resource $result )\nオブジェクト指向型 (メソッド)\nresult\nmixed fetch_field ( void )\nmaxdb_fetch_field() は、結果セットのカラムの定義を リソースとして返します。この関数を繰り返しコールすると、 結果セットのすべてのカラムの情報を取得できます。 maxdb_fetch_field() は、フィールドがもう残っていない場合に FALSE を返します。
手続き型\nmixed maxdb_fetch_fields ( resource $result )\nオブジェクト指向型 (メソッド)\nresult\nmixed fetch_fields ( void )\nこの関数は、maxdb_fetch_field() と同じ目的で使用します。ただひとつの違いは、 各フィールドに対してひとつづつリソースを返すのではなく、 リソースの配列を返すという点です。
手続き型\narray maxdb_fetch_lengths ( resource $result )\nオブジェクト指向型 (プロパティ)\nresult\narray $lengths;\nmaxdb_fetch_lengths() 関数は、result が表す結果セット内の現在の行の、すべてのカラムの長さを配列で返します。 成功した場合はカラムの長さを含む数値添字の配列、 失敗した場合は FALSE を返します。
手続き型\nobject maxdb_fetch_object ( object $result )\nオブジェクト指向型 (メソッド)\nresult\nobject fetch_object ( void )\nmaxdb_fetch_object() は、結果セットの現在の行を オブジェクトとして返します。オブジェクトの属性が結果セットのフィールド名に対応します。 現在の結果セットに行がもう存在しない場合は NULL が返されます。
手続き型\nmixed maxdb_fetch_row ( resource $result )\nオブジェクト指向型 (メソッド)\nresult\nmixed fetch_row ( void )\n取得した行に対応する連想配列を返します。行がもう存在しない場合には NULL を返します。\nmaxdb_fetch_row() は、result で表される結果セットから行のデータを取得し、 それを数値添字の配列で返します。各カラムは、0 (ゼロ) から始まる添字で保存されます。これ以降の maxdb_fetch_row() 関数のコールでは、 結果セット内の次の行を返します。もう行が存在しない場合には FALSE を返します。
手続き型\nbool maxdb_stmt_fetch ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nbool fetch ( void )\nmaxdb_stmt_fetch() は、 maxdb_stmt_bind_result() でバインドした変数を使用して、 行のデータを返します。
手続き型\nint maxdb_field_count ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nint field_count ( void )\nlink で表される接続の、 直近のクエリのカラム数を返します。クエリの詳細を知らなくても そのクエリが結果を返すかどうかを知ることができるので、 この関数は maxdb_store_result() を使用する際に有用です。
手続き型\nbool maxdb_field_seek ( resource $result , int $fieldnr )\nオブジェクト指向型 (メソッド)\nresult\nbool field_seek ( int $fieldnr )\nフィールドカーソルを、指定したオフセットに移動します。 次に maxdb_fetch_field() をコールすると、 そのオフセットに関連付けられたカラムのフィールド定義が取得されます。
手続き型\nint maxdb_field_tell ( resource $result )\nオブジェクト指向型 (プロパティ)\nresult\nint $current_field ;\n直近の maxdb_fetch_field() コールで使用した フィールドカーソルの位置を返します。この値は、 maxdb_field_seek() の引数として使用されます。
手続き型\nvoid maxdb_free_result ( resource $result )\nオブジェクト指向型 (メソッド)\nresult\nvoid free ( void )\nmaxdb_free_result() 関数は、 result が表す結果に関連付けられたメモリを開放します。 このメモリは、maxdb_query()、 maxdb_store_result() あるいは maxdb_use_result() で割り当てられたものです。
string maxdb_get_client_info ( void )\nmaxdb_get_client_info() 関数は、 MaxDB 拡張モジュールで使用されている、 クライアントのバージョンを表す文字列を返すために使用されます。
int maxdb_get_client_version ( void )\nクライアントのバージョン番号を整数値で返します。
手続き型\nstring maxdb_get_host_info ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $host_info;\nmaxdb_get_host_info() 関数は、 link で表される接続を表す文字列を返します。
手続き型\nresource maxdb_stmt_result_metadata ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nresource result_metadata ( void )\nmaxdb_prepare() に渡されたステートメントが 結果セットを作成するものであった場合に、 maxdb_stmt_result_metadata() は結果リソースを返します。 これを使用することで、フィールドの総数や各フィールドの情報といったメタ情報を 処理することができます。
手続き型\nint maxdb_get_proto_info ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $protocol_version;\nlink で表される接続で使用している MaxDB プロトコルのバージョンを表す整数値を返します。
手続き型\nstring maxdb_get_server_info ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $server_info;\nMaxDB 拡張モジュールが接続している (link パラメータで表される) MaxDB サーバのバージョンを表す文字列を返します。
手続き型\nint maxdb_get_server_version ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $server_version;\nmaxdb_get_server_version() 関数は、 MaxDB 拡張モジュールが接続している (link パラメータで表される) MaxDB サーバのバージョンを表す整数値を返します。\nバージョン番号のフォーマットは main_version * 10000 + minor_version * 100 + sub_version (つまり、バージョン 7.5.0 は 70500) となります。
手続き型\nstring maxdb_info ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $info;\nmaxdb_info() は、最後に実行されたクエリについての情報を 文字列で返します。文字列の内容は、以下のようになります。\nmaxdb_info の返す値   クエリの型 返される文字列の例     INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0   INSERT INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0 Warnings: 0   LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0   ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0   UPDATE ... Rows matched: 40 Changed: 40 Warnings: 0
resource maxdb_init ( void )\nmaxdb_options() および maxdb_real_connect() で使用する MaxDB リソースを確保、あるいは初期化します。
手続き型\nmixed maxdb_insert_id ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nmixed $insert_id;\nmaxdb_insert_id() 関数は、DEFAULT SERIAL 属性をもつカラムが存在するテーブルに対するクエリが生成した ID を返します。 直近のクエリが INSERT や UPDATE でなかった場合、 あるいは対象のテーブルに DEFAULT SERIAL 属性をもつカラムが存在しなかった場合は、 この関数はゼロを返します。
手続き型\nbool maxdb_kill ( resource $link , int $processid )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool kill ( int $processid )\nこの関数は、processid で指定した MaxDB サーバから切断するために使用されます。
bool maxdb_master_query ( resource $link , string $query )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_more_results ( resource $link )\nmaxdb_more_results() は、事前の maxdb_multi_query() のコールによって取得した結果に まだ結果セットが含まれているかどうかを示します。
手続き型\nbool maxdb_multi_query ( resource $link , string $query )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool multi_query ( string $query )\nmaxdb_multi_query() は、 maxdb_query() と同様の動作をします。 複数クエリは、まだサポートされていません。
bool maxdb_next_result ( resource $link )\n複数クエリはまだサポートされていないので、maxdb_next_result() は常に FALSE を返します。
手続き型\nint maxdb_num_fields ( resource $result )\nオブジェクト指向型 (プロパティ)\nresult\nint $field_count;\nmaxdb_num_fields() は、 指定した結果セットのフィールド数を返します。
手続き型\nint maxdb_num_rows ( resource $result )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $num_rows;\n結果セットの行数を返します。\n使用している結果セットがバッファ化されているかどうかによって、 maxdb_num_rows() の使用法は変わります。 バッファ化されていない結果セットの場合、 結果セットのすべての行を取得するまでは maxdb_num_rows() は正しい結果を返しません。
手続き型\nbool maxdb_options ( resource $link , int $option , mixed $value )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool options ( int $option , mixed $value )\nmaxdb_options() は、 接続時の追加のオプションを設定し、接続の振る舞いを変更するために使用されます。\nこの関数は、いくつかのオプションを設定するために複数回コールすることが可能です。\nmaxdb_options() は、 maxdb_init() をコールした後、 maxdb_real_connect() がコールされるまでにコールしなければなりません。\nパラメータ option は設定したいオプションで、 value はオプションの値です。 オプションについての詳細な説明は、 &raquo; http://maxdb.sap.com/documentation/ を参照ください。 パラメータ option は、以下のいずれかの値となります。  使用可能なオプション   名前 説明     MAXDB_COMPNAME SQLDBC 実行環境の初期化に使用するコンポーネントの名前。   MAXDB_APPLICATION データベースに接続するアプリケーション。   MAXDB_APPVERSION アプリケーションのバージョン。   MAXDB_SQLMODE  SQL モード。    MAXDB_UNICODE  unicode (UCS2) クライアントからの接続の場合に TRUE、そうでない場合に FALSE。    MAXDB_TIMEOUT  データベースへの接続がシステムによって閉じられるまでの、 無通信時間の最大値。    MAXDB_ISOLATIONLEVEL  共有ロックおよび排他ロックのどちらがどのように要求/開放されるかを指定します。    MAXDB_PACKETCOUNT  接続に使用される、要求パケットの数。    MAXDB_STATEMENTCACHESIZE  再利用のために接続にキャッシュされるプリペアドステートメントの数。    MAXDB_CURSORPREFIX  自動的に命名された結果テーブルに使用するプレフィックス。
手続き型\nint maxdb_stmt_param_count ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nint $param_count;\nmaxdb_stmt_param_count() は、 プリペアドステートメント内に存在するパラメータマーカの数を返します。
手続き型\nbool maxdb_ping ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool ping ( void )\nサーバとの接続が正常に動作しているかどうかを調べます。 もし接続が確立できていない場合、グローバルオプション maxdb.reconnect が有効になっていれば、 自動的に再接続が試みられます。\nこの関数は、クライアント側で長時間アイドル状態が続いた場合などに、 サーバが接続を閉じてしまったかどうかを調べ、 必要なら再度接続するために使用されます。
手続き型\nresource maxdb_prepare ( resource $link , string $query )\nオブジェクト指向型 (メソッド)\nstmt\nresource prepare ( string $query )\nmaxdb_prepare() は、 後で実行するための SQLクエリをヌル終端の文字列で準備し、 今後のステートメントに対する操作に使用するためのハンドルを返します。 クエリは、単一の SQL 文である必要があります。
手続き型\nmixed maxdb_query ( resource $link , string $query [, int $resultmode ] )\nオブジェクト指向型 (メソッド)\nmaxdb\nmixed query ( string $query )\nmaxdb_query() 関数は、link が表すデータベースに対するクエリの実行を単純化するために使用されます。
手続き型\nbool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool real_connect ([ string $hostname [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )\nmaxdb_real_connect() は、 hostname で稼動中の MaxDB データベースエンジンに対して、 接続の確立を試みます。\nこの関数は、maxdb_connect() とは以下の点で違います。\nmaxdb_real_connect() には、 maxdb_init() で作成した有効なリソースが必要です。\nmaxdb_options() 関数により、 接続の際のさまざまなオプションを設定することが可能です。
手続き型\nstring maxdb_real_escape_string ( resource $link , string $escapestr )\nオブジェクト指向型 (メソッド)\nmaxdb\nstring real_escape_sring ( string $escapestr )\nこの関数は、SQL 文で使用するために、SQL で使用可能な文字列を作成するために使用します。 文字列 escapestr が、エスケープされた SQL 文字列にエンコードされます。その際、接続の現在の文字セットを考慮します。\nエンコードされる文字は &#039;, &quot; です。
手続き型\nbool maxdb_real_query ( resource $link , string $query )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool real_query ( string $query )\nmaxdb_real_query() は、機能的に maxdb_query() とまったく同じです。
bool maxdb_report ( int $flags )
bool maxdb_rollback ( resource $link )\nmaxdb\nbool rollback ( void )\nlink パラメータで指定したデータベース接続について、 現在のトランザクションをロールバックします。
int maxdb_rpl_parse_enabled ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_rpl_probe ( resource $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int maxdb_rpl_query_type ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nint rpl_query_type ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_select_db ( resource $link , string $dbname )\nmaxdb_select_db() 関数は、 link が表すデータベース接続に対して クエリを実行する際に使用するデフォルトのデータベースを (dbname で指定したものに) 選択します。
手続き型\nbool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )\nオブジェクト指向型 (メソッド)\nstmt\nbool stmt_send_long_data ( int $param_nr , string $data )\nパラメータのデータを、いくつかに分割してサーバに送信できるようにします。 この関数は、文字データやバイナリデータをカラムに送信するために 複数回コールすることができます。このカラムは TEXT 型あるいは BLOB 型でなければなりません。\nparam_nr は、データに関連付けるパラメータを指定します。 パラメータは 0 から数え始めます。 data は、送信するデータを含む文字列です。
bool maxdb_send_query ( resource $link , string $query )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool send_query ( string $query )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void maxdb_server_end ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool maxdb_server_init ([ array $server [, array $groups ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
手続き型\nbool maxdb_options ( resource $link , int $option , mixed $value )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool options ( int $option , mixed $value )\nmaxdb_options() は、 接続時の追加のオプションを設定し、接続の振る舞いを変更するために使用されます。\nこの関数は、いくつかのオプションを設定するために複数回コールすることが可能です。\nmaxdb_options() は、 maxdb_init() をコールした後、 maxdb_real_connect() がコールされるまでにコールしなければなりません。\nパラメータ option は設定したいオプションで、 value はオプションの値です。 オプションについての詳細な説明は、 &raquo; http://maxdb.sap.com/documentation/ を参照ください。 パラメータ option は、以下のいずれかの値となります。  使用可能なオプション   名前 説明     MAXDB_COMPNAME SQLDBC 実行環境の初期化に使用するコンポーネントの名前。   MAXDB_APPLICATION データベースに接続するアプリケーション。   MAXDB_APPVERSION アプリケーションのバージョン。   MAXDB_SQLMODE  SQL モード。    MAXDB_UNICODE  unicode (UCS2) クライアントからの接続の場合に TRUE、そうでない場合に FALSE。    MAXDB_TIMEOUT  データベースへの接続がシステムによって閉じられるまでの、 無通信時間の最大値。    MAXDB_ISOLATIONLEVEL  共有ロックおよび排他ロックのどちらがどのように要求/開放されるかを指定します。    MAXDB_PACKETCOUNT  接続に使用される、要求パケットの数。    MAXDB_STATEMENTCACHESIZE  再利用のために接続にキャッシュされるプリペアドステートメントの数。    MAXDB_CURSORPREFIX  自動的に命名された結果テーブルに使用するプレフィックス。
手続き型\nstring maxdb_sqlstate ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nstring $sqlstate;\n直近のエラーの SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。&#039;00000&#039; は、エラーが発生しなかったことを意味します。 コードの内容は ANSI SQL および ODBC で指定されています。
手続き型\nbool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher )\nオブジェクト指向型 (メソッド)\nmaxdb\nbool ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
手続き型\nstring maxdb_stat ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nstring maxdb->stat ( void )\nmaxdb_stat() は、稼動中の MaxDB サーバに関する情報を含む文字列を返します。
手続き型\nint maxdb_stmt_affected_rows ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nint $affected_rows;\nmaxdb_stmt_affected_rows() は、 INSERT、UPDATE あるいは DELETE クエリによって変更された行の数を返します。 直近のクエリが無効だった場合、あるいは行数が取得できなかった場合は、 この関数は -1 を返します。
手続き型\nbool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )\nオブジェクト指向型 (メソッド)\nstmt\nbool bind_param ( string $types , mixed &$var1 [, mixed &$... ] )\n手続き型 (拡張構文)\nbool maxdb_stmt_bind_param ( resource $stmt , string $types , array &$var )\nオブジェクト指向型 (メソッド) (拡張構文)\nstmt\nbool bind_param ( string $types , array &$var )\nmaxdb_stmt_bind_param() は、 maxdb_prepare() に渡された SQL 文のパラメータマーカに、 変数をバインドするために使用されます。 文字列 types にはひとつあるいは複数の文字が含まれ、 これによって対応するバインド変数の型を指定します。\nmaxdb_stmt_bind_param() の拡張構文では、 パラメータを、PHP の変数リストではなくひとつの配列として渡せるようになります。 maxdb_stmt_bind_param() のコール前に配列変数が使用されていない場合は、空の配列として初期化されます。 maxdb_stmt_bind_param() の拡張構文の使用法については、 例を参照ください。\nSELECT INTO SQL 文の変数は、maxdb_stmt_bind_param() でバインドすることも可能です。データベースプロシージャのパラメータについては maxdb_stmt_bind_param() を使用してバインドできます。 このような場合の maxdb_stmt_bind_param() の使用法については、例を参照ください。\nSQL 文の INTO 変数にバインドする変数が事前に使用されていた場合は、 その変数の内容は SELECT INTO 文のデータで上書きされます。 maxdb_stmt_bind_param() をコールした後は、 この変数への参照は無効になります。\nデータベースプロシージャの INOUT パラメータの場合、 バインドされた INOUT 変数の内容は、データベースプロシージャの出力で 上書きされます。 maxdb_stmt_bind_param() をコールした後は、 この変数への参照は無効になります。\n型指定文字   文字 説明     i 対応する変数は integer 型です   d 対応する変数は double 型です   s 対応する変数は string 型です   b 対応する変数は blob で、一括して送信されます
手続き型\nbool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )\nオブジェクト指向型 (メソッド)\nstmt\nbool bind_result ( mixed &$var1 [, mixed &$... ] )\nmaxdb_stmt_bind_result() は、 結果セット内のカラムを変数に関連付ける (バインドする) ために使用されます。 データを取得するために maxdb_stmt_fetch() をコールすると、MaxDB クライアント/サーバプロトコルが、 バインドされたカラムのデータを指定した変数 var1, ... に保存します。
手続き型\nbool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )\nオブジェクト指向型 (メソッド)\nmaxdb_stmt\nbool maxdb_stmt->close_long_data ( void )\nこの関数は、maxdb_execute() で開始した後、 maxdb_stmt_send_long_data() のシーケンスの後にコールする必要があります。\nparam_nr は、 データの最後にどのパラメータを関連付けるかを示します。 パラメータは、0 番から順に番号がつけられます。
手続き型\nbool maxdb_stmt_close ( resource $stmt )\nオブジェクト指向型 (メソッド)\nmaxdb_stmt\nbool maxdb_stmt->close ( void )\nプリペアドステートメントを閉じます。 maxdb_stmt_close() は、 stmt が指すステートメントハンドルを開放します。 現在のステートメントに処理中あるいはまだ読み込まれていない結果がある場合、 この関数はそれらをキャンセルし、次のクエリを実行できるようにします。
手続き型\nbool maxdb_stmt_data_seek ( resource $statement , int $offset )\nオブジェクト指向型 (メソッド)\nstmt\nbool data_seek ( int $offset )\nmaxdb_stmt_data_seek() 関数は、statement が表すステートメント結果セットの中の offset で指定した任意のオフセットに結果ポインタを移動します。 offset は、ゼロから全行数マイナス 1 までの間 (0..maxdb_stmt_num_rows() - 1) である必要があります。
手続き型\nint maxdb_stmt_errno ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nint $errno;\nstmt で指定したステートメントについて、 maxdb_stmt_errno() は 直近に実行されたステートメントのエラーコードを返します。
手続き型\nstring maxdb_stmt_error ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nstring $error;\nstmt で指定したステートメントについて、 maxdb_stmt_error() は 直近に実行されたステートメントのエラーメッセージを返します。
手続き型\nbool maxdb_stmt_execute ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nbool execute ( void )\nmaxdb_stmt_execute() 関数は、 stmt で表される、事前に maxdb_prepare() で準備したクエリを実行します。実行の際には、 すべてのパラメータマーカが適切な値に置き換えられます。\nUPDATE、DELETE あるいは INSERT 文の場合は、 maxdb_stmt_affected_rows() 関数を使用すると 変更された行の総数が取得できます。同じく、 結果セットを返すクエリの場合は maxdb_fetch() 関数を使用して結果を取得できます。
手続き型\nbool maxdb_stmt_fetch ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nbool fetch ( void )\nmaxdb_stmt_fetch() は、 maxdb_stmt_bind_result() でバインドした変数を使用して、 行のデータを返します。
手続き型\nvoid maxdb_stmt_free_result ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nvoid free_result ( void )\nmaxdb_stmt_free_result() 関数は、 stmt パラメータで指定した結果メモリ (これは maxdb_stmt_store_result() によって確保されたものです) を開放します。
手続き型\nresource maxdb_stmt_init ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nobject stmt_init ( void )\nmaxdb_stmt_prepare() で使用するステートメントリソースを 確保して初期化します。
手続き型\nint maxdb_stmt_num_rows ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nint $num_rows;\n結果セット内の行の数を返します。
手続き型\nint maxdb_stmt_param_count ( resource $stmt )\nオブジェクト指向型 (プロパティ)\nstmt\nint $param_count;\nmaxdb_stmt_param_count() は、 プリペアドステートメント内に存在するパラメータマーカの数を返します。
手続き型\nbool maxdb_stmt_prepare ( resource $stmt , string $query )\nオブジェクト指向型 (メソッド)\nstmt\nmixed prepare ( string $query )\nmaxdb_stmt_prepare() は、 後で実行するための SQLクエリをヌル終端の文字列で準備します。 ステートメントのリソースは、maxdb_stmt_init() で確保しなければなりません。 クエリは、単一の SQL 文である必要があります。
手続き型\nbool maxdb_stmt_reset ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nbool reset ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
手続き型\nresource maxdb_stmt_result_metadata ( resource $stmt )\nオブジェクト指向型 (メソッド)\nstmt\nresource result_metadata ( void )\nmaxdb_prepare() に渡されたステートメントが 結果セットを作成するものであった場合に、 maxdb_stmt_result_metadata() は結果リソースを返します。 これを使用することで、フィールドの総数や各フィールドの情報といったメタ情報を 処理することができます。
手続き型\nbool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )\nオブジェクト指向型 (メソッド)\nstmt\nbool stmt_send_long_data ( int $param_nr , string $data )\nパラメータのデータを、いくつかに分割してサーバに送信できるようにします。 この関数は、文字データやバイナリデータをカラムに送信するために 複数回コールすることができます。このカラムは TEXT 型あるいは BLOB 型でなければなりません。\nparam_nr は、データに関連付けるパラメータを指定します。 パラメータは 0 から数え始めます。 data は、送信するデータを含む文字列です。
string maxdb_stmt_sqlstate ( resource $stmt )\n直近に起動したプリペアドステートメントについての SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。&#039;00000&#039; は、エラーが発生しなかったことを意味します。 コードの内容は ANSI SQL および ODBC で指定されています。
手続き型\nbool maxdb_stmt_store_result ( resource $stmt )\nオブジェクト指向型 (メソッド)\nmaxdb\nobject store_result ( void )\nmaxdb_stmt_store_result() は、何の動作もしません。 MaxDB サーバからデータを取得するために使用すべきではありません。
手続き型\nresource maxdb_store_result ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nobject store_result ( void )\nこの関数は、何の機能も持ちません。
手続き型\nint maxdb_thread_id ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $thread_id;\nmaxdb_thread_id() 関数は、現在の接続のスレッド ID を返します。maxdb_kill() 関数を使用することで、 この接続を殺すことが可能です。接続を見失ったあとで maxdb_ping() を使用して再接続した場合には、 スレッド ID は別の値になります。そのため、スレッド ID は、必要になった時点でのみ取得すべきです。
手続き型\nbool maxdb_thread_safe ( void )\nmaxdb_thread_safe() は、 クライアントライブラリがスレッドセーフにコンパイルされているかどうかを示します。
手続き型\nresource maxdb_use_result ( resource $link )\nオブジェクト指向型 (メソッド)\nmaxdb\nresource use_result ( void )\nmaxdb_use_result() は何の動作もしません。
手続き型\nint maxdb_warning_count ( resource $link )\nオブジェクト指向型 (プロパティ)\nmaxdb\nint $warning_count;\nmaxdb_warning_count() は、 link で表される接続の、 直近のクエリから返される警告の数を返します。
bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )\nそのバイトストリームが指定したエンコーディングで有効なものかどうかを調べます。 これは、いわゆる「不正なエンコーディングによる攻撃」を防ぐのに役立ちます。
string mb_convert_case ( string $str , int $mode = MB_CASE_UPPER [, string $encoding = mb_internal_encoding() ] )\nmode で指定された方法で string に対してケースフォルディングを行います。
string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding ] )\n文字列 str の文字エンコーディングを、 オプションで指定した from_encoding から to_encoding に変換します。
string mb_convert_kana ( string $str [, string $option [, string $encoding ]] )\n文字列 str に関して「半角」-「全角」変換を行います。 この関数は、日本語のみで使用可能です。
string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )\nエンコーディング from_encoding の変数 vars をエンコーディング to_encoding に変換します。\nmb_convert_variables() は、エンコーディング検出のために Array または Object の文字列を結合します。これは、 エンコーディング検出は短い文字列では失敗する傾向があるためです。このため、 1 つの配列またはオブジェクトで異なるエンコーディングを混ぜることはできません。
string mb_decode_mimeheader ( string $str )\nエンコードされた MIME ヘッダの文字列 str をデコードします。
string mb_decode_numericentity ( string $str , array $convmap , string $encoding )\n文字列 str において指定した文字領域にある数値エンティティを変換し、 変換後の文字列を返します。
string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )\n文字列 str の文字エンコーディングを検出します。
mixed mb_detect_order ([ mixed $encoding_list ] )\n自動文字エンコーディング検出の順番を encoding_list に設定します。
string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed [, int $indent ]]]] )\nMIME ヘッダエンコーディング方式によって文字列 str をエンコードします。
string mb_encode_numericentity ( string $str , array $convmap , string $encoding )\nstr の中で指定した文字コードを HTML 数値エンティティから文字コードに変換します。
bool mb_ereg_match ( string $pattern , string $string [, string $option = &quot;msr&quot; ] )\nマルチバイト文字列に対する正規表現マッチングを行います。
string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = &quot;msr&quot; ] )\nstring から pattern にマッチする文字列を探し、 見つかった文字列を replacement で置換します。
int mb_ereg_search_getpos ( void )\n次の正規表現マッチングを開始する位置を返します。
array mb_ereg_search_getregs ( void )\n直近のマルチバイト正規表現マッチングの結果を取得します。
bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = &quot;msr&quot; ]] )\nmb_ereg_search_init() は、マルチバイト対応の正規 表現検索において検索対象の文字列 string および正規表現 pattern を設定します。 この設定は、mb_ereg_search(), mb_ereg_search_pos(), mb_ereg_search_regs() で使用されます。
array mb_ereg_search_pos ([ string $pattern [, string $option = &quot;ms&quot; ]] )\nマルチバイト文字列の中で正規表現に一致した部分の位置と長さを配列で返します。\n検索対象の文字列は、mb_ereg_search_init() により設定します。省略した場合は、前回のものが利用されます。
array mb_ereg_search_regs ([ string $pattern [, string $option = &quot;ms&quot; ]] )\nマルチバイト正規表現にマッチした部分を返します。
bool mb_ereg_search_setpos ( int $position )\nmb_ereg_search_setpos() は、 mb_ereg_search() で検索を開始する位置を設定します。
bool mb_ereg_search ([ string $pattern [, string $option = &quot;ms&quot; ]] )\n指定したマルチバイト文字列に対するマルチバイト正規表現マッチングを行います。
int mb_ereg ( string $pattern , string $string [, array $regs ] )\nマルチバイト対応の正規表現マッチングを行います。
string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = &quot;msri&quot; ] )\nstring において、 正規表現 pattern にマッチする文字列を replacement に置換します。
int mb_eregi ( string $pattern , string $string [, array $regs ] )\nマルチバイト対応の大文字小文字を区別しない正規表現マッチングを行います。
mixed mb_get_info ([ string $type = &quot;all&quot; ] )\nmb_get_info() は、mbstring の内部設定パラメータを返します。
mixed mb_http_input ([ string $type = &quot;&quot; ] )\nHTTP 入力文字エンコーディングを検出します。
mixed mb_http_output ([ string $encoding ] )\nHTTP 出力文字エンコーディングを設定あるいは取得します。 この関数を実行した後、 出力は encoding に変換されます。
mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )\n内部文字エンコーディングを設定あるいは取得します。
mixed mb_language ([ string $language ] )\n現在の言語を設定あるいは取得します。
array mb_list_encodings ( void )\nサポートするすべてのエンコーディングの配列を返します。
string mb_output_handler ( string $contents , int $status )\nmb_output_handler() は、 ob_start() のコールバック関数です。 mb_output_handler() は、出力バッファの文字を 内部文字エンコーディングから HTTP 出力文字エンコーディングに変換します。
bool mb_parse_str ( string $encoded_string [, array &$result ] )\nGET/POST/COOKIE データをパースし、 グローバル変数を設定します。PHPは、生の POST/COOKIE を提供しないため、 現状では GET データでのみ使用可能です。この関数は、URL エンコードされたデータをパース、エンコーディングを検出、 内部エンコーディングへ変換し、配列result またはグローバル配列に設定します。
string mb_preferred_mime_name ( string $encoding )\n指定したエンコーディングの MIME charset 文字列を取得します。
mixed mb_regex_encoding ([ string $encoding ] )\n現在のマルチバイト正規表現用のエンコーディングを文字列として返す
string mb_regex_set_options ([ string $options = &quot;msr&quot; ] )\noptions で表されるオプションを、 マルチバイト対応の正規表現関数のデフォルトに設定します。
bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )\nemail を送信します。ヘッダと本文は mb_language() の設定に基づき変換、エンコードされます。 これは mail() のラッパー関数です。詳細は、 mail() を参照ください。
array mb_split ( string $pattern , string $string [, int $limit = -1 ] )\nマルチバイト文字列 string において、正規表現 pattern により文字列を分割し、 結果を配列として返します。
string mb_strcut ( string $str , int $start [, int $length [, string $encoding ]] )\nmb_strcut() は、mb_substr() と同じ処理を異なった方法で行います。位置 start がマルチバイト文字の 2 バイト目以降で ある場合、マルチバイト文字の最初のバイトから開始されます。\nこの関数は、length より短く、 かつマルチバイト文字列の一部でないかシフトシーケンスの中にない文字を 取りだします。
string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker [, string $encoding ]] )\n文字列 str を指定した幅 width で丸めます。
int mb_stripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\nmb_stripos() は、 needle が haystack の中で最初に現れる位置を返します。 mb_strpos() とは異なり、 mb_stripos() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
string mb_stristr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\nmb_stristr() は、 haystack の中で最初に needle が現れる場所を探し、 haystack の部分文字列を返します。 mb_strstr() とは異なり、 mb_stristr() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
int mb_strlen ( string $str [, string $encoding ] )\n文字列の長さを取得します。
int mb_strpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\nある文字列の中で別の文字列が最初に現れる位置を見つけます。\nマルチバイト文字列に正しくマッチするように strpos() を拡張したもので、 最初の 1 文字目の位置が 0 、2 文字目の文字が 1 というようになります。
string mb_strrchr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\nmb_strrchr() は、 haystack の中で最後に needle が現れる場所を探し、 haystack の部分文字列を返します。 needle が見つからなかった場合は FALSE を返します。
string mb_strrichr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\nmb_strrichr() は、 haystack の中で最後に needle が現れる場所を探し、 haystack の部分文字列を返します。 mb_strrchr() とは異なり、 mb_strrichr() は大文字小文字を区別しません。 needle が見つからなかった場合は FALSE を返します。
int mb_strripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\nmb_strripos() は、マルチバイト対応の strripos() 操作を、文字数に基づいて行います。 needle の位置を haystack の先頭から順に数えていきます。 最初の文字の位置は 0、二番目の文字の位置は 1 という具合です。 mb_strrpos() とは異なり、 mb_strripos() は大文字小文字を区別しません。
int mb_strrpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )\nmb_strrpos() は、マルチバイト対応の strrpos() 操作を、文字数に基づいて行います。 needle の位置を haystack の先頭から順に数えていきます。 最初の文字の位置は 0、二番目の文字の位置は 1 という具合です。
string mb_strstr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )\nmb_strstr() は、 haystack の中で最初に needle が現れる場所を探し、 haystack の部分文字列を返します。 needle が見つからなかった場合は FALSE を返します。
string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )\nstr のすべてのアルファベットを小文字にして返します。
string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )\nstr のすべてのアルファベットを大文字にして返します。
int mb_strwidth ( string $str [, string $encoding ] )\n文字列 str の幅を返します。\nマルチバイト文字は、通常はシングルバイト文字の倍の幅となります。\n文字の幅   文字 幅     U+0000 - U+0019 0   U+0020 - U+1FFF 1   U+2000 - U+FF60 2   U+FF61 - U+FF9F 1   U+FFA0 -  2
mixed mb_substitute_character ([ mixed $substrchar ] )\n入力文字エンコーディングが無効、 または出力文字エンコーディングに文字コードが存在しない場合の代替文字を指定します。 無効な文字は、NULL (出力しない)、文字列または整数値 (Unicode 文字コード値) に置換することが可能です。\nこの設定は、mb_convert_encoding()、 mb_convert_variables()、 mb_output_handler()、 および mb_send_mail() に影響します。
int mb_substr_count ( string $haystack , string $needle [, string $encoding ] )\n文字列 haystack の中での部分文字列 needle の出現回数を数えます。
string mb_substr ( string $str , int $start [, int $length [, string $encoding ]] )\n文字数に基づきマルチバイト対応の substr() 処理を行います。位置は、 str の始めから数えられます。 最初の文字の位置は 0、2 番目の文字の位置は 1、といったようになります。
string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )\nstring mcrypt_cbc ( string $cipher , string $key , string $data , int $mode [, string $iv ] )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は、 libmcrypt 2.4.x とリンクした場合のものです。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。\nこの関数は使用すべきではありません。代替となる関数については mcrypt_generic() および mdecrypt_generic() を参照ください。
string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )\nstring mcrypt_cfb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は、 libmcrypt 2.4.x とリンクした場合のものです。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。\nこの関数は使用すべきではありません。代替となる関数については mcrypt_generic() および mdecrypt_generic() を参照ください。
string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )\n初期化ベクトルを、ランダムなソースから作成します。\nIV は、単に暗号化ルーチンに異なる初期値を与えるためだけのものです。 この IV は、たとえ要求されていたとしても秘密にしておく必要はありません。 暗号化したデータとともに IV を送信したとしても、セキュリティを損ねる ことはありません。
string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )\ndata を復号し、復号されたデータを返します。
string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )\nstring mcrypt_ecb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は libmcrypt 2.4.x とリンクした場合です。 mode は MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかとなります。\nこの関数は非推奨であり、使用すべきではありません。代替機能については mcrypt_generic() および mdecrypt_generic() を参照ください。
string mcrypt_enc_get_algorithms_name ( resource $td )\nこの関数はアルゴリズム名を返します。
int mcrypt_enc_get_block_size ( resource $td )\nオープンされたアルゴリズムのブロックサイズを取得します。
int mcrypt_enc_get_iv_size ( resource $td )\nこの関数は、暗号化記述子で指定したアルゴリズムの iv の大きさを バイト単位で返します。IV は、cbc、cfb、ofbモード およびストリームモードのいくつかのアルゴリズムで使用されます。
int mcrypt_enc_get_key_size ( resource $td )\nそのアルゴリズムでサポートされる最大キー長をバイト単位で返します。
string mcrypt_enc_get_modes_name ( resource $td )\nこの関数はモード名を返します。
array mcrypt_enc_get_supported_key_sizes ( resource $td )\nオープンしたアルゴリズムでサポートするキーの長さを取得します。
bool mcrypt_enc_is_block_algorithm_mode ( resource $td )\nオープンされているモードがブロックモードで動作するかどうかを調べます (たとえば素簿リームでは FALSE、cbc や cfb、ofb では TRUE)。
bool mcrypt_enc_is_block_algorithm ( resource $td )\nオープンされたモードの暗号がブロックアルゴリズムであるかどうかを調べます。
bool mcrypt_enc_is_block_mode ( resource $td )\nオープンされたモードがブロック出力を行うかどうかを調べます (例: cbc と ecb の場合に TRUE、cfb と stream の場合に FALSE)。
int mcrypt_enc_self_test ( resource $td )\nこの関数は、記述子 td で指定したアルゴリズムの セルフテストを実行します。
string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )\nデータを暗号化して、それを返します。
bool mcrypt_generic_deinit ( resource $td )\nこの関数は、暗号化記述子(td )で指定した 暗号化を終了します。すべてのバッファを消去しますが、モジュールは 閉じません。mcrypt_module_close() をコールする 必要があります(しかし、スクリプトの終了時に PHP が自動でこれを 行います)。
bool mcrypt_generic_end ( resource $td )\n警告\nこの関数は非推奨です。かわりに mcrypt_generic_deinit() を使用してください。 mcrypt_module_close() とともに使用すると、 複数バッファの開放によりクラッシュを引き起こすことがあります。\nこの関数は、暗号化記述子(td) で指定した暗号化処理を終了します。 この関数は全てのバッファをクリアし、使用した全てのモジュールを クローズします。エラーの場合に FALSE、成功時に TRUE を返します。
int mcrypt_generic_init ( resource $td , string $key , string $iv )\nmcrypt_generic() または mdecrypt_generic() をコールする前に、 常にこの関数をコールする必要があります。
string mcrypt_generic ( resource $td , string $data )\nこの関数は、データを暗号化します。データ長を n * blocksize とする ために、データは &quot;\\0&quot; で埋められます。 この関数は、暗号化されたデータを返します。 データのパディングが行われるため、返される文字列の長さは 入力よりも長いことがあることに注意してください。\n暗号化したデータをデータベースに格納する場合は、mcrypt_generic が返す文字列全てを格納することを忘れないでください。さもないと、 文字列を適切に復号できなくなります。もとの文字列が 10 文字で ブロックサイズが 8 (ブロックサイズを調べるには mcrypt_enc_get_block_size() を使用します) だった場合、データベースのフィールドには少なくとも 16 文字が 必要です。mdecrypt_generic() が返す文字列も 16 文字となることに注意しましょう。埋められた文字を取り除くには... rtrim($str, &quot;\\0&quot;) を使用します。\nもし MySQL データベースにデータを格納する場合は、 varchar フィールドに値を挿入する際に末尾のスペースが取り除かれることを 覚えておきましょう。暗号化されたデータの最後にスペース(ASCII 32)が 含まれていた場合、この処理によってデータが破壊されてしまいます。 かわりに tinyblob/tinytext (あるいはより大きな) フィールドを 使用してください。
int mcrypt_get_block_size ( int $cipher )\nint mcrypt_get_block_size ( string $cipher , string $module )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合であり、2 番目 のものは libmcrypt 2.4.x あるいは 2.5.x とリンクした場合です。\nmcrypt_get_block_size()は、指定した cipher のブロック長を返します (暗号化モードと組み合わせます)。\nmcrypt_enc_get_block_size() 関数のほうがより有用です。というのもこちらの関数は mcrypt_module_open() が返すリソースを使用するからです。
string mcrypt_get_cipher_name ( int $cipher )\nstring mcrypt_get_cipher_name ( string $cipher )\nmcrypt_get_cipher_name() は、指定した暗号(cipher) の名前を得るために使用されます。\nmcrypt_get_cipher_name() は、暗号の番号 (libmcrypt 2.2.x)または暗号名(libmcrypt 2.4.x 以降)を引数とし、 暗号名を返します。指定した暗号が存在しない場合は FALSE を返します。
int mcrypt_get_iv_size ( string $cipher , string $mode )\n指定した cipher /mode の組み合わせにおける IV の大きさを取得します。\nmcrypt_enc_get_iv_size() 関数を使用するほうが より有用です。これは mcrypt_module_open() が返すリソースを使用します。
int mcrypt_get_key_size ( int $cipher )\nint mcrypt_get_key_size ( string $cipher , string $module )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合であり、2 番目の ものは libmcrypt 2.4.x あるいは 2.5.x とリンクした場合です。\nmcrypt_get_key_size() は、 cipher で(暗号化モードとあわせて)指定した キーの長さを得るために使用されます。\nこの例では、libmcrypt 2.4.x および 2.5.x とリンクした場合の この関数の使用法を示します。 mcrypt_enc_get_key_size() 関数を使用するほうが より有用です。これは mcrypt_module_open() が返すリソースを使用します。
array mcrypt_list_algorithms ([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;) ] )\nlib_dir パラメータにあるサポートするすべてのアルゴリズムの一覧を取得します。
array mcrypt_list_modes ([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;) ] )\nlib_dir にあるすべてのサポートするモードの一覧を取得します。
bool mcrypt_module_close ( resource $td )\n指定した暗号化ハンドルを閉じます。
int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )\n指定したアルゴリズムのブロック長を取得します。
int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )\nオープンされたモードでサポートされる最大キー長を取得します。
array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )\n指定したアルゴリズムでサポートされるキーのサイズを配列で返します。 この関数が空の配列を返した場合、1 から mcrypt_module_get_algo_key_size() の返り値の間のすべてのサイズのキーがアルゴリズムでサポートされます。
bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )\nこの関数は、mode がブロックアルゴリズムを使用する場合に TRUE、 その他の場合に FALSE を返します。(例: stream の場合に FALSE、 cbc、cfb、ofb の場合に TRUE)
bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )\nこの関数は、指定したアルゴリズムがブロックアルゴリズムの場合に TRUE、ストリームアルゴリズムの場合に FALSE を返します。
bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )\nこの関数は、ブロック出力を行うモードの場合に TRUE、バイトのみを 出力する場合に FALSE を返します(例: cbc と ecb の場合に TRUE、 cfb と streamの場合に FALSE)。
resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )\nこの関数は、使用するアルゴリズムおよびモードのモジュールをオープン します。アルゴリズム名は、たとえば &quot;twofish&quot; のように名前で指定するか定数 MCRYPT_暗号名 のいずれかを使用して指定します。 ライブラリは mcrypt_module_close() をコールする ことによりクローズされます。
bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )\nこの関数は、指定したアルゴリズムのセルフテストを実行します。
string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )\nstring mcrypt_ofb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )\n最初のプロトタイプは libmcrypt 2.2.x とリンクした場合、2 番目は libmcrypt 2.4.x 以降とリンクした場合です。 mode は、 MCRYPT_ENCRYPT あるいは MCRYPT_DECRYPT のいずれかです。\nこの関数はもはや使用すべきではありません。代替関数として mcrypt_generic() および mdecrypt_generic() を参照ください。
string md5_file ( string $filename [, bool $raw_output = false ] )\n&raquo; RSA Data Security, Inc. MD5 メッセージダイジェストアルゴリズムを用いて filename パラメータで指定したファイルの MD5ハッシュを計算し、そのハッシュを返します。 ハッシュは、32 文字の 16 進数です。
string md5 ( string $str [, bool $raw_output = false ] )\n&raquo; RSA Data Security, Inc. の MD5メッセージダイジェストアルゴリズム を用いて str の MD5 ハッシュ値を計算し、 そのハッシュを返します。
string mdecrypt_generic ( resource $td , string $data )\nこの関数は、データを復号します。データのパディングが行われるため、 返される文字列の長さは暗号化前の文字列よりも長くなる可能性があることに 注意してください。
bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )\nMemcache::add() は、サーバに同名のキーが存在しない 場合に限り、key というキーで 値 var を格納します。 memcache_add() 関数を使用することも可能です。
bool Memcache::addServer ( string $host [, int $port [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback [, int $timeoutms ]]]]]]]] )\nMemcache::addServer() は、コネクションプールに サーバを追加します。 実際の接続は、最初に使用する際に確立されます。 Memcache::addServer() を使用してオープンされた 接続は、スクリプトの実行終了時に自動的に閉じられます。 Memcache::close() を使用して閉じることも可能です。 memcache_add_server() 関数を使用することも可能です。\n(Memcache::connect() および Memcache::pconnect() ではなく) このメソッドを使用すると、ネットワーク接続は それが実際に必要となるときまで確立されません。 つまり、大量のサーバをプールに追加した場合に、 それらすべてが使用されることはないとしてもオーバーヘッドが発生しないということです。\n他のサーバが使用可能である場合、あらゆるメソッドのあらゆる段階について ユーザが意識しないままにフェイルオーバー処理が行われます。 ソケットあるいは Memcaches サーバレベルで発生したあらゆるエラー (ただし out-of-memory は除く) に対してフェイルオーバーが動作します。 既存のキーを追加しようとしたなどの通常のクライアントエラーの場合は、 フェイルオーバー処理は起動しません。
bool Memcache::close ( void )\nMemcache::close() は、memcached サーバとの接続を閉じます。 この関数は、持続的な接続については閉じません。持続的な接続が 閉じられるのは、Web サーバのシャットダウン/再起動のときだけです。 memcache_close() 関数を使用することも可能です。
bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )\nMemcache::connect() は、memcached サーバへの接続を 確立します。 Memcache::connect() を使用してオープンされた接続は、 スクリプトの実行終了時に自動的に閉じられます。 Memcache::close() を使用して閉じることも可能です。 memcache_connect() 関数を使用することも可能です。
bool memcache_debug ( bool $on_off )\nmemcache_debug() は、パラメータ on_off が TRUE の場合にデバッグ出力を有効にし、 FALSE の場合には無効にします。
int Memcache::decrement ( string $key [, int $value ] )\nMemcache::decrement() は、項目の値を value だけ減らします。 Memcache::increment() と同様、項目の現在の値が まず数値に変換されてから value を引きます。
bool Memcache::delete ( string $key [, int $timeout ] )\nMemcache::delete() は、 key に対応する項目を削除します。 パラメータ timeout が指定されている場合は、 その項目は timeout 秒が経過した後に 期限切れとなります。 memcache_delete() 関数を使用することも可能です。
bool Memcache::flush ( void )\nMemcache::flush() は、すべての既存項目を直ちに 無効にします。Memcache::flush() は 実際にリソースを開放するわけではなく、単にすべての項目に 有効期限切れのマークをつけるだけです。それらの項目が使用していた メモリは、新しい項目で上書きされるようになります。 memcache_flush() 関数を使用することも可能です。
string Memcache::get ( string $key [, int &$flags ] )\narray Memcache::get ( array $keys [, array &$flags ] )\nMemcache::get() は、その時点でサーバ上に key というキーのデータが存在する場合に、 格納されているデータを返します。\nMemcache::get() にキーの配列を渡すことにより、 値の配列を取得することができます。この配列には、サーバ上で見つかった キーと値のペアのみが含まれます。
array Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit ]]] )\nMemcache::getExtendedStats() は、サーバの 統計情報を含む二次元の配列を返します。配列のキーが各サーバの host:port に対応し、その値として個々のサーバの統計情報を保持します。 取得に失敗したサーバは、値に FALSE が設定されます。 memcache_get_extended_stats() 関数を使用することも可能です。
int Memcache::getServerStatus ( string $host [, int $port ] )\nMemcache::getServerStatus() は、サーバがオンライン/オフラインのどちらであるかを返します。 memcache_get_server_status() 関数を使用することも可能です。
array Memcache::getStats ([ string $type [, int $slabid [, int $limit ]]] )\nMemcache::getStats() は、サーバの統計情報を含む 連想配列を返します。配列のキーが統計情報パラメータの名前、そして 配列の値がパラメータの値に対応します。 memcache_get_stats() 関数を使用することも可能です。
string Memcache::getVersion ( void )\nMemcache::getVersion() は、サーバのバージョン番号を 文字列で返します。 memcache_get_version() 関数を使用することも可能です。
int Memcache::increment ( string $key [, int $value ] )\nMemcache::increment() は、項目の値を value だけ増やします。 もし key に対応する値が数値ではなく、かつ 数値に変換できなかった場合は、その新しい値は value となります。 Memcache::increment() は、指定した項目が 存在しない場合に項目を作成することは ありません。
bool Memcache::pconnect ( string $host [, int $port [, int $timeout ]] )\nMemcache::pconnect() は Memcache::connect() とほぼ同じですが、 確立する接続が持続的なものであるという点が違います。 この接続はスクリプトの実行が終了しても閉じられることはなく、 Memcache::close() 関数を使用することで閉じられます。 memcache_pconnect() 関数を使用することも可能です。
bool Memcache::replace ( string $key , mixed $var [, int $flag [, int $expire ]] )\nMemcache::replace() は、key に対応する既存項目の値を置換するために使用します。 指定したキーに対応する項目がない場合は、 Memcache::replace() は FALSE を返します。 それ以外の点では、Memcache::replace() の振る舞いは Memcache::set() と同じです。 memcache_replace() 関数を使用することも可能です。
bool Memcache::set ( string $key , mixed $var [, int $flag [, int $expire ]] )\nMemcache::set() は、キー key に var という値を 関連付け、memcached サーバに格納します。パラメータ expire は、データの有効期限を秒単位で指定します。もし 0 を指定した場合は その項目が期限切れになることはありません (これは、その項目のデータが memcached サーバ上にずっと残り続けることを保証するものではありません。 他の項目をキャッシュするための場所を確保するためにサーバから 削除されてしまうこともあります)。 (zlib を使用して) その場でのデータの圧縮を行いたい場合は、 flag の値として、定数 MEMCACHE_COMPRESSED を指定します。
bool Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] )\nMemcache::setCompressThreshold() は、 大きな値に対して自動圧縮処理を有効にします。 memcache_set_compress_threshold() 関数を使用することも可能です。
bool Memcache::setServerParams ( string $host [, int $port [, int $timeout [, int $retry_interval [, bool $status [, callback $failure_callback ]]]]] )\nMemcache::setServerParams() は、 サーバのパラメータを実行時に変更します。 memcache_set_server_params() 関数を使用することも可能です。
int memory_get_peak_usage ([ bool $real_usage = false ] )\nPHP スクリプトに割り当てられたメモリの最大値を、バイト単位で返します。
int memory_get_usage ([ bool $real_usage = false ] )\n現在の PHP スクリプトに割り当てられたメモリの量をバイト単位で返します。
string metaphone ( string $str [, int $phones = 0 ] )\nstr の metaphone キーを計算します。\nsoundex() と同様に metaphone は、 発音が似た単語について同じキーを作成します。metaphone は、 英語の発音の基本的ルールを知っているので、 soundex() よりも正確です。 metaphone が生成するキーは可変長です。\nmetaphone は、Lawrence Philips <lphilips at verity dot com> により 開発されました。[&quot;Practical Algorithms for Programmers&quot;, Binstock & Rex, Addison Wesley, 1995] で解説されています。
bool method_exists ( mixed $object , string $method_name )\n指定した object にクラスメソッドが存在するかどうかを調べます。
int mhash_count ( void )\n利用可能なハッシュ ID の最大値を取得します。
int mhash_get_block_size ( int $hash )\n指定した hash のブロックサイズを取得します。
string mhash_get_hash_name ( int $hash )\n指定した hash の名前を取得します。
string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )\nhash にユーザが指定した password を用いてキーを生成します。\nOpenPGP のドキュメント (&raquo; RFC 2440) で規定されている、Salted S2k アルゴリズムを使用します。\nユーザが指定したパスワードは、暗号化アルゴリズムのキーとしては 適切ではないということを覚えておきましょう。ユーザが選択するのは、 通常はキーボードから入力可能なキーだからです。 これらのパスワードは、文字当たり 6 から 7 ビットのみ(もしくはそれ以下) しか使用していません。ユーザの指定したキーに対して、 (この関数のような) ある種の変換を行うことを強く推奨します。
string mhash ( int $hash , string $data [, string $key ] )\nmhash() は、 hash で指定したハッシュ関数を data に適用します。
mixed microtime ([ bool $get_as_float ] )\nmicrotime() は、現在の Unix タイムスタンプをマイクロ秒単位で返します。 この関数は、gettimeofday() システムコールをサポートする オペレーティングシステムでのみ使用できます。
string mime_content_type ( string $filename )\nmagic.mime ファイルの情報を用いて、 ファイルの MIME content type を返します。
mixed min ( array $values )\nmixed min ( mixed $value1 , mixed $value2 [, mixed $value3... ] )\nパラメータとして配列をひとつだけ渡した場合は、 min() は配列の中で最も大きい数値を返します。 ふたつ以上のパラメータを指定した場合は、min() はそれらの中で最も小さいものを返します。
int ming_keypress ( string $char )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ming_setcubicthreshold ( int $threshold )\n三次ベジエ曲線を描画する際の閾値を設定します。
void ming_setscale ( float $scale )\n出力する SWF の倍率を設定します。 SWF ファイル内では、座標は PIXEL ではなく TWIPS で計算します。 1 ピクセルは 20 TWIPS にあたります。
void ming_setswfcompression ( int $level )\nSWF 出力の圧縮レベルを設定する。
void ming_useconstants ( int $use )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ming_useswfversion ( int $version )\nムービーで使用する SWF のバージョンを設定します。 これは Action Script の動作に影響します。
bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )\n指定したディレクトリを作成します。
int mktime ([ int $hour = date(&quot;H&quot;) [, int $minute = date(&quot;i&quot;) [, int $second = date(&quot;s&quot;) [, int $month = date(&quot;n&quot;) [, int $day = date(&quot;j&quot;) [, int $year = date(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]] )\n与えられた引数に従って UNIX のタイムスタンプを返します。 このタイムスタンプは、Unix epoch(1970年1月1日00:00:00 GMT)から 指定された時刻までの通算秒を表す長整数です。\n引数は右から順に省略することができます。省略された引数は、 ローカルの日付と時刻に従って、現在の値にセットされます。
string money_format ( string $format , float $number )\nmoney_format() は、number をフォーマットして返します。この関数は C のライブラリ関数 strfmon() をラップしたものですが、一度に 変換できる数値がひとつだけであるという点が異なります。
bool move_uploaded_file ( string $filename , string $destination )\nこの関数は、filename で指定されたファイルが (PHP の HTTP POST アップロード機構によりアップロードされたという意味で) 有効なアップロードファイルであるかどうかを確認します。 そのファイルが有効な場合、destination で指定したファイル名に移動されます。\nこの種の確認は、アップロードされたファイルに関して何でもできる場 合には、その内容をユーザ、または同じシステム上の他のユーザにさえ 暴かれる可能性があるため、特に重要です。
void mqseries_back ( resource $hconn , resource &$compCode , resource &$reason )\nmqseries_back() (MQBACK) は、キューマネージャに対して、 直近の同期ポイント以降に get あるいは put されたすべてのメッセージを戻すことを指示します。 作業ユニットの一部として put されたメッセージは削除されます。 作業ユニットの一部として取得したメッセージはキューに戻されます。\nmqseries_back() は、 mqseries_begin() と組み合わせた場合にのみ動作します。 また、mqclient インターフェイスを介さずに 直接キューマネージャに接続した場合にのみ動作します。
void mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason )\nmqseries_begin() (MQBEGIN) をコールすると、作業ユニットを開始します。 これはキューマネージャが扱うものですが、外部のリソースマネージャを使用することもあります。\nmqseries_begin() は作業ユニットを開始します。作業ユニットを終了させるには mqseries_back() あるいは mqseries_cmit() を使用します。
void mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason )\nmqseries_close() (MQCLOSE) をコールするとオブジェクトへのアクセスを破棄します。これは mqseries_open() (MQOPEN) コールの逆の意味です。
void mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason )\nmqseries_cmit() (MQCMIT) は、キューマネージャに対して、 アプリケーションが同期ポイントに達したことと 直近の同期ポイント以降に get あるいは put されたすべてのメッセージを確定させることを指示します。 作業ユニットの一部として put されたメッセージは他のアプリケーションでも使用できるようになります。 作業ユニットの一部として取得したメッセージは削除されます。
void mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason )\nThe mqseries_conn() (MQCONN) をコールすると、アプリケーションプログラムをキューマネージャに接続します。 これによって取得した接続ハンドルを、 アプリケーション側でそれ以降のメッセージキューコールの際に使用します。
void mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason )\nmqseries_connx() (MQCONNX) をコールすると、アプリケーションプログラムをキューマネージャに接続します。 これによって取得した接続ハンドルを、 アプリケーション側でそれ以降のメッセージキューコールの際に使用します。
void mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason )\nmqseries_disc() (MQDISC) をコールすると、キューマネージャとアプリケーションプログラムとの間の接続を切断します。 mqseries_conn() (MQCONN) や mqseries_connx() (MQCONNX) の逆の意味です。
void mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason )\nmqseries_get() (MQGET) は、 mqseries_open() (MQOPEN) を使用してオープンしたローカルキューからメッセージを取得します。
void mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason )\nmqseries_inq() (MQINQ) は、整数の配列と文字列を返します。 これはオブジェクトの属性を表します。
void mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason )\nmqseries_open() (MQOPEN) は、オブジェクトへのアクセスを確立します。
void mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason )\nThe mqseries_put() (MQPUT) は、メッセージをキューあるいは配送リストにおきます。 キューあるいは配送リストを事前にオープンしておく必要があります。
void mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason )\nmqseries_put1() (MQPUT1) は、ひとつのメッセージをキューに置きます。 キューがオープンされている必要はありません。
void mqseries_set ( resource $hconn , resource $hobj , int $selectorcount , array $selectors , int $intattrcount , array $intattrs , int $charattrlength , array $charattrs , resource &$compCode , resource &$reason )\nmqseries_set() (MQSET) は、ハンドルが指すオブジェクトの属性を変更します。 オブジェクトは、キューでなければなりません。
string mqseries_strerror ( int $reason )\nmqseries_strerror() は、結果コードに対応するメッセージを返します。
bool msession_connect ( string $host , string $port )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int msession_count ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool msession_create ( string $session [, string $classname [, string $data ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool msession_destroy ( string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void msession_disconnect ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array msession_find ( string $name , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array msession_get_array ( string $session )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_get_data ( string $session )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_get ( string $session , string $name , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_inc ( string $session , string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array msession_list ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array msession_listvar ( string $name )\n共通の属性を有するセッションを検索する際に使用します。
int msession_lock ( string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_plugin ( string $session , string $val [, string $param ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_randstr ( int $param )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void msession_set_array ( string $session , array $tuples )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool msession_set_data ( string $session , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool msession_set ( string $session , string $name , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int msession_timeout ( string $session [, int $param ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string msession_uniq ( int $param [, string $classname [, string $data ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int msession_unlock ( string $session , int $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource msg_get_queue ( int $key [, int $perms ] )\nmsg_get_queue() は、指定した key で System V メッセージキューにアクセスするために使用される ID を返します。 最初にコールされた際には、オプションの perms でメッセージキューを作成します。同じ key で 2 度目に msg_get_queue() がコールされると別の ID が返されますが、どちらの ID も同じメッセージキューを指します。
bool msg_queue_exists ( int $key )\nkey で指定したメッセージキューが存在するかどうかを調べます。
bool msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize [, int $flags [, int &$errorcode ]]] )\nmsg_receive() は、指定した queue から指定した desiredmsgtype の最初のメッセージを受信します。
bool msg_remove_queue ( resource $queue )\nmsg_remove_queue() は、queue で指定したメッセージキューを破棄します。この関数を使用するのは、 すべてのプロセスがメッセージキューの使用を終え、 キューが保持するシステムリソースを開放する必要が生じた場合のみです。
bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int &$errorcode ]]] )\nmsg_send() は、queue で指定したメッセージキューに対して msgtype で指定した型 (0 より大きい数値である必要があります) のメッセージ message を送信します。
bool msg_set_queue ( resource $queue , array $data )\nmsg_set_queue() により、メッセージキューデータ構造体の msg_perm.uid、msg_perm.gid、msg_perm.mode および msg_qbytes フィールドを 変更することが可能です。\nデータ構造体を変更するには、PHP の実行ユーザがキューの作成者あるいは (現在の msg_perm.xxx フィールドで指定されている)キューの所有者であるか、 あるいは root 権限を有している必要があります。msg_qbytes の値を システムで定義した制限をこえて設定するには、root 権限が必要です。
array msg_stat_queue ( resource $queue )\nmsg_stat_queue() は、queue で指定したメッセージキューのメタデータを返します。 これは、例えば受信したメッセージがどのプロセスから送信されたのかを調べる場合などに有用です。
int msql_affected_rows ( resource $result )\nresult に関連する直近の SELECT、UPDATE あるいは DELETE クエリにより変更された行の数を返します。
bool msql_close ([ resource $link_identifier ] )\nmsql_close() は、指定したリンク ID に関連付けられた mSQL サーバとの持続的でない接続を閉じます。\n通常は msql_close() を使用する必要はありません。 なぜなら、持続的でないリンクはスクリプトの実行終了時に自動的に 閉じられるからです。 リソースの開放 も参照ください。
resource msql_connect ([ string $hostname ] )\nmsql_connect() は mSQL サーバとの接続を確立します。\n同じ引数で msql_connect() が再度コールされた場合、 新しいリンクは作成されません。替わりに、既に開かれているリンクの ID が返されます。\nmsql_close() を明示的にコールしなければ、サーバとの リンクはスクリプトの実行終了直後に閉じられます。
bool msql_create_db ( string $database_name [, resource $link_identifier ] )\nmsql_create_db() は、mSQL サーバ上に データベースの作成を試みます。
bool msql_create_db ( string $database_name [, resource $link_identifier ] )\nmsql_create_db() は、mSQL サーバ上に データベースの作成を試みます。
bool msql_data_seek ( resource $result , int $row_number )\nmsql_data_seek() は、指定したクエリー ID (query_identfier)が指す mSQL の結果行への内部ポインタが指定した行番号 (row_number)を指すようにします。 次に msql_fetch_row() をコールした際には、 その行を返します。
resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )\nmsql_db_query() はデータベースを選択し、 そこに対してクエリを実行します。
string msql_result ( resource $result , int $row [, mixed $field ] )\nmsql_result() は、mSQL 結果セットの セルの内容を返します。\n大きな結果セットを処理する際には、（以下に指定した） 行全体を取り出す関数のどれかの使用を考慮するべきです。 これらの関数は 1 度のコールで複数セルの内容を返し、msql_result() よりもかなり高速に動作します。\n推奨される方法は以下のとおりです。 msql_fetch_row()、 msql_fetch_array()、および msql_fetch_object()
bool msql_drop_db ( string $database_name [, resource $link_identifier ] )\nmsql_drop_db() は、mSQL サーバから データベースを削除することを試みます。
string msql_error ( void )\nmsql_error() は、mSQL サーバで最後に発生したエラーを 返します。msql_error() でアクセス可能なのは 直近のエラーメッセージだけであることに注意しましょう。
array msql_fetch_array ( resource $result [, int $result_type ] )\nmsql_fetch_array() は、 msql_fetch_row() の拡張版です。 結果配列のデータを数値インデックスに格納することに加え、 フィールド名をキーとして連想配列にも格納します。\nmsql_fetch_array() の使用に際して注意すべきことは、 かなりの付加機能を提供するにもかかわらず、 msql_fetch_row() を使用する場合より そんなに遅くないということです。
object msql_fetch_field ( resource $result [, int $field_offset ] )\nmsql_fetch_field() はあるクエリ結果に含まれる フィールドの情報を取得する際に使用することができます。
object msql_fetch_object ( resource $result )\nmsql_fetch_object() は、 msql_fetch_array() に似ていますが、配列の代わりに オブジェクトを返すところだけが異なっています。遠まわしに言うと、 オフセット値によってではなくフィールド名によってのみデータを アクセスすることができることを意味しています （数字は、プロパティ名として使用できません）。\n速度面でこの関数は msql_fetch_array() と同等です。そして、ほぼ msql_fetch_row() と同等の速度を有しています（その差は無視できるほどです）。
array msql_fetch_row ( resource $result )\nmsql_fetch_row() は、指定したリンク ID が指す 結果から 1 行分のデータを得ます。行は、配列として返されます。 各結果のカラムは、0 から始まる配列オフセットに保存されます。\n連続して msql_fetch_row() をコールした場合、 次の行を結果として返します。もう行がない場合には FALSE を返します。
string msql_field_flags ( resource $result , int $field_offset )\nmsql_field_flags() は、指定したフィールドの フィールドフラグを返します。
int msql_field_len ( resource $result , int $field_offset )\nmsql_field_len() は指定したフィールドの長さを返します。
string msql_field_name ( resource $result , int $field_offset )\nmsql_field_name() は、指定したフィールドインデックスの 名前を取得します。
bool msql_field_seek ( resource $result , int $field_offset )\n指定されたフィールドオフセットに移動します。 この後で msql_fetch_field() を フィールドオフセットを指定せずにコールした場合は、 ここで指定したフィールドが返されます。
int msql_field_table ( resource $result , int $field_offset )\n指定したフィールドが含まれるテーブルの名前を返します。
string msql_field_type ( resource $result , int $field_offset )\nmsql_field_type() は、指定したフィールドインデックスの 型を取得します。
string msql_field_flags ( resource $result , int $field_offset )\nmsql_field_flags() は、指定したフィールドの フィールドフラグを返します。
int msql_field_len ( resource $result , int $field_offset )\nmsql_field_len() は指定したフィールドの長さを返します。
string msql_field_name ( resource $result , int $field_offset )\nmsql_field_name() は、指定したフィールドインデックスの 名前を取得します。
int msql_field_table ( resource $result , int $field_offset )\n指定したフィールドが含まれるテーブルの名前を返します。
string msql_field_type ( resource $result , int $field_offset )\nmsql_field_type() は、指定したフィールドインデックスの 型を取得します。
bool msql_free_result ( resource $result )\nmsql_free_result() は、 query_identifier が指すメモリを開放します。 リクエストの処理を完了した時、このメモリは自動的に開放されます。 よって、この関数を使用する必要があるのは、 スクリプトの実行時に大量のメモリを使用しないことを 確実にしたい場合のみです。
resource msql_list_dbs ([ resource $link_identifier ] )\nmsql_list_dbs() は、指定した link_identifier 上で使用可能なデータベースの 一覧を返します。
resource msql_list_fields ( string $database , string $tablename [, resource $link_identifier ] )\nmsql_list_fields() は、指定したテーブルに関する情報を返します。
resource msql_list_tables ( string $database [, resource $link_identifier ] )\nmsql_list_tables() は、指定した database 上のテーブルのリストを返します。
int msql_num_fields ( resource $result )\nmsql_num_fields()は、結果セットにおける フィールドの数を返します。
int msql_num_rows ( resource $query_identifier )\nmsql_num_rows() は、結果セットにおける 行の数を返します。
int msql_num_fields ( resource $result )\nmsql_num_fields()は、結果セットにおける フィールドの数を返します。
int msql_num_rows ( resource $query_identifier )\nmsql_num_rows() は、結果セットにおける 行の数を返します。
resource msql_pconnect ([ string $hostname ] )\nmsql_pconnect() は msql_connect() とほぼ同じ動作をしますが、 大きな違いがふたつあります。\nひとつめは、この関数は接続する際に同じホストにおいてすでに確立された （持続的な）リンクを探そうとすることです。そのようなリンクが見つかった 場合、新たな接続をオープンするかわりにそのリンクの ID が返されます。\nふたつめは、スクリプトの実行が終了しても SQL サーバへの接続が閉じられない ということです。そのかわりに、次に利用するときのために リンクが開かれたままとなります（msql_close() はこの関数によって確立されたリンクを閉じません）。
resource msql_query ( string $query [, resource $link_identifier ] )\nmsql_query() は、指定されたリンク ID に 関連付けられたサーバ上の現在アクティブなデータベースに クエリを送信します。
string sql_regcase ( string $string )\n大文字小文字を区別しないマッチングのための正規表現を作成します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string msql_result ( resource $result , int $row [, mixed $field ] )\nmsql_result() は、mSQL 結果セットの セルの内容を返します。\n大きな結果セットを処理する際には、（以下に指定した） 行全体を取り出す関数のどれかの使用を考慮するべきです。 これらの関数は 1 度のコールで複数セルの内容を返し、msql_result() よりもかなり高速に動作します。\n推奨される方法は以下のとおりです。 msql_fetch_row()、 msql_fetch_array()、および msql_fetch_object()
bool msql_select_db ( string $database_name [, resource $link_identifier ] )\nmsql_select_db() は、指定した link_identifier に関連付けられたサーバ上の アクティブなデータベースを設定します。\nこれ以降の msql_query() のコールは、アクティブな データベースに対して行われます。
string msql_result ( resource $result , int $row [, mixed $field ] )\nmsql_result() は、mSQL 結果セットの セルの内容を返します。\n大きな結果セットを処理する際には、（以下に指定した） 行全体を取り出す関数のどれかの使用を考慮するべきです。 これらの関数は 1 度のコールで複数セルの内容を返し、msql_result() よりもかなり高速に動作します。\n推奨される方法は以下のとおりです。 msql_fetch_row()、 msql_fetch_array()、および msql_fetch_object()
resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )\nmsql_db_query() はデータベースを選択し、 そこに対してクエリを実行します。
bool mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, bool $is_output = false [, bool $is_null = false [, int $maxlen = -1 ]]] )\nストアドプロシージャまたはリモートストアドプロシージャへパラメータをバインドします。
bool mssql_close ([ resource $link_identifier ] )\n指定したリンク ID が指す MS SQL Server データベースへのリンクを閉じます。 リンク ID が指定されない場合、最後にオープンされたリンクが指定されたと仮定します。\n持続的でないリンクはスクリプト実行終了時に自動的に閉じられるので この関数は通常は必要ではありません。
resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )\nmssql_connect() はMS SQL サーバへの接続を確立します。\nサーバへのリンクは、事前に mssql_close() により 明示的に閉じられていない限り、スクリプト終了後すぐに閉じられます。
bool mssql_data_seek ( resource $result_identifier , int $row_number )\nmssql_data_seek() は、指定した結果 ID が指す MS SQL 結果に関する内部行ポインタを指定した行番号に移動します。 最初の行は行番号 0 となります。 この後、mssql_fetch_row() をコールした場合、 その行を返します。
mixed mssql_execute ( resource $stmt [, bool $skip_results = false ] )\nMS SQL サーバデータベースでストアドプロシージャを実行します。
array mssql_fetch_array ( resource $result [, int $result_type = MSSQL_BOTH ] )\nmssql_fetch_array() は、 mssql_fetch_row() の拡張版です。 この関数は、結果の配列に数値インデックスにデータを保持するのに加えて、 フィールド名をキーとしてデータを連想配列にも保存します。\n機能がかなり増えているにもかかわらず、mssql_fetch_array() は mssql_fetch_row() よりもそれほど遅くはないということを強調しておきます。
array mssql_fetch_assoc ( resource $result_id )\n取得した行に対応する連想配列を返し、内部データポインタをひとつ進めます。 mssql_fetch_assoc() は、 mssql_fetch_array() の二番目のオプションパラメータに MSSQL_ASSOC を指定してコールするのと同等です。
int mssql_fetch_batch ( resource $result )\nレコードの次のバッチを返します。
object mssql_fetch_field ( resource $result [, int $field_offset = -1 ] )\nmssql_fetch_field() は、あるクエリー結果のフィールドに関して情報を得るために使用します。
object mssql_fetch_object ( resource $result )\nmssql_fetch_object() は mssql_fetch_array() に似ていますが、配列の代わりに オブジェクトが返されるという違いがあります。 間接的にこのことは、データをフィールド名でのみアクセスすることが 可能であり、そのオフセットではアクセスできないことを意味します (番号はプロパティ名としては使用できません)。\n速度面でこの関数は mssql_fetch_array() と同等であり、 mssql_fetch_row() とほとんど同じです (違いは僅かです)。
array mssql_fetch_row ( resource $result )\nmssql_fetch_row() は指定した結果 ID に関連する結果から 1 行分のデータを取得します。行は配列として返されます。 配列オフセットに保存された各結果カラムは、オブセット 0 から始まります。\nmssql_fetch_rows() を続けてコールした場合、 結果セットの次の行が返され、行がもうない場合は FALSE が返されます。
int mssql_field_length ( resource $result [, int $offset = -1 ] )\n結果 result のフィールド番号 offset のフィールド長を返します。
string mssql_field_name ( resource $result [, int $offset = -1 ] )\nresult のフィールド番号 offset の名前を返します。
bool mssql_field_seek ( resource $result , int $field_offset )\n指定したフィールドオフセットを探します。この後、フィールドオフセット を指定せずに mssql_fetch_field() をコールした 場合、このフィールドが返されます。
string mssql_field_type ( resource $result [, int $offset = -1 ] )\nresult のフィールド番号 offset の型を返します。
bool mssql_free_result ( resource $result )\nスクリプト実行時のメモリ使用量が過大であると懸念される場合のみ mssql_free_result() はコールするべきです。 全ての結果保持用メモリはスクリプト実行終了時に自動的に解放されます。 引数に結果 ID を指定して mssql_free_result() を コールすることが可能です。 この場合、関連する結果保持用メモリが解放されます。
bool mssql_free_statement ( resource $stmt )\nmssql_free_statement() をコールする必要があるのは、 スクリプトの実行中に大量のメモリを使用することが気になる場合のみです。 すべてのステートメントメモリはスクリプトが終了する際に自動的に開放 されます。ステートメント ID を引数に指定して mssql_free_statement() をコールすることで、 関連付けられたステートメントのメモリが開放されます。
string mssql_get_last_message ( void )\nMS-SQL サーバからの直近のメッセージを取得します。
string mssql_guid_string ( string $binary [, bool $short_format = false ] )\n16 バイトのバイナリ GUID を文字列に変換します。
resource mssql_init ( string $sp_name [, resource $link_identifier ] )\nストアドプロシージャまたはリモートのストアドプロシージャを初期化します。
void mssql_min_error_severity ( int $severity )\n最小のエラー深刻度を設定します。
void mssql_min_message_severity ( int $severity )\n最小のメッセージ深刻度を設定します。
bool mssql_next_result ( resource $result_id )\nサーバへ複数の SQL 命令を送信するか複数の結果を有するストアドプロシージャを 実行する場合、この関数はサーバが複数の結果集合を返すようにします。 この関数は、サーバから追加の結果が存在するかどうかを調べます。 追加の結果集合が存在する場合、既存の結果集合を解放し、新しい 結果集合から行を取得するための準備を行います。
int mssql_num_fields ( resource $result )\nmssql_num_fields() は結果のフィールド数を返します。
int mssql_num_rows ( resource $result )\nmssql_num_rows() は結果の行数を返します。
resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )\nmssql_pconnect() は mssql_connect() とほとんど同じく動作しますが、違う点が 2 つあります。\n第 1 に、この関数は接続時に同じホスト、ユーザ名、パスワードで既に オープンされている(持続的)リンクを探そうとします。 もし見つかった場合、新規の接続をオープンせずにその ID を返します。\n第 2 に、SQL サーバはスクリプトの実行終了時に接続を閉じません。 代わりに、リンクは後に使用されるためにオープンされたままとします (mssql_close() は mssql_pconnect() により確立されたリンクを閉じません)。\nこの型のリンクはこのため &#039;持続的である&#039; と呼ばれます。
mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] )\nmssql_query() は指定したリンク ID が指すサーバ上の現在アクティブなデータベースにクエリを送信します。
string mssql_result ( resource $result , int $row , mixed $field )\nmssql_result()は、MS SQL 結果行からセルの内容を返します。
int mssql_rows_affected ( resource $link_identifier )\n直近の書き込みクエリによって変更されたレコード数を返します。
bool mssql_select_db ( string $database_name [, resource $link_identifier ] )\nmssql_select_db() は、指定したリンク ID が指すサーバの 現在アクティブなデータベースを設定します。\n以降の mssql_query() のコールは アクティブなデータベースに対して行われます。
int mt_getrandmax ( void )\nmt_rand() のコールにより返される最大の値を返します。
int mt_rand ( void )\nint mt_rand ( int $min , int $max )\n古い libc の多くの乱数発生器は、怪しげであるか特性が不明であったりし、 また低速でした。デフォルトでは、PHP は rand() において libc の乱数発生器を使用します。 mt_rand() 関数は、その代替品となるものです。 この関数は、その特性が既知の乱数生成器 &raquo; Mersenne Twister を使用し、 平均的な libc の rand()よりも 4 倍以上高速に乱数を生成します。\nオプションの引数 min ,max を付けずに コールした場合、mt_rand() は 0 から mt_getrandmax() の間の擬似乱数値を返します。 例えば、5 から 15 まで(端点を含む)の間の乱数値を得たい場合には mt_rand(5, 15) としてください。
void mt_srand ([ int $seed ] )\nseed により乱数生成器にシードを指定します。 seed を指定しなかった場合は、 ランダムな値を設定します。
int mysql_affected_rows ([ resource $link_identifier ] )\nlink_identifier と関連付けられた直近の INSERT、UPDATE、REPLACE、DELETE クエリによって変更された行の数を取得します。
int mysql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )\nmysql_change_user() は、現在アクティブな接続 またはオプションのパラメータ link_identifier が指定された場合にはその接続にログイン中のユーザーを変更します。 database が指定された場合、ユーザーが変更された後 このデータベースがカレントのデータベースとなります。 新規の user/password の組み合わせの認証に失敗した場合、 現在接続中のユーザーがアクティブなままとなります。\nこの関数は廃止されており、もはや PHP には存在しません。
string mysql_client_encoding ([ resource $link_identifier ] )\nMySQL の character_set 変数の値を取得します。
bool mysql_close ([ resource $link_identifier ] )\nmysql_close() は、指定した link_identifier が指す MySQL データベースへの非持続的リンクを閉じます。 link_identifier が指定されない場合、最後に オープンされたリンクが使用されます。\n持続的でないリンクはスクリプトの実行終了時に自動的に閉じられるの で、通常は mysql_close() を使用する必要はありません。 リソースの解放  を参照ください。
resource mysql_connect ([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, bool $new_link = false [, int $client_flags = 0 ]]]]] )\nMySQL サーバへの接続をオープンあるいは再利用します。
bool mysql_create_db ( string $database_name [, resource $link_identifier ] )\nmysql_create_db() は、指定したリンク ID が指す サーバ上に新規のデータベースを作成します。
bool mysql_data_seek ( resource $result , int $row_number )\nmysql_data_seek() は、指定した結果 ID （result_identifier）が指す MySQL 結果の内部ポインタが指定した行番号 （row_number）を指すように移動します。 この後、たとえば mysql_fetch_assoc() のような MySQL のフェッチ関数をコールした場合には、 ここで指定した行の内容が返されます。\nrow_number は 0 から始まります。 row_number は 0 から mysql_num_rows() - 1 までの範囲にあるべきです。 しかし、もし結果セットが空（mysql_num_rows() == 0） の場合、0 へのシークは E_WARNING を発生して失敗し、mysql_data_seek() は FALSE を返します。
string mysql_db_name ( resource $result , int $row [, mixed $field ] )\nmysql_list_dbs() をコールした結果からデータベース名を取得します。
resource mysql_db_query ( string $database , string $query [, resource $link_identifier ] )\nmysql_db_query() はデータベースを選択し、 そこでクエリーを実行します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
bool mysql_drop_db ( string $database_name [, resource $link_identifier ] )\nmysql_drop_db() は、指定した link_identifier が指す データベース全体をサーバから破棄(削除)しようとします。 この関数は非推奨です。かわりに、 mysql_query() を用いて DROP DATABASE 文を発行する方法が推奨されます。
int mysql_errno ([ resource $link_identifier ] )\n直近の MySQL 関数で発生したエラーの番号を返します。\nMySQL データベースバックエンドから返ってくるエラーは、 警告を発生しません。代わりに mysql_errno() を用いて エラー番号を取得してください。この関数が返すのは、直近に実行された MySQL 関数（mysql_error() と mysql_errno() は除く）のエラーコードだけであることに 注意しましょう。この関数を利用するなら、別の MySQL 関数をコールする前に 値を調べることを忘れないようにしましょう。
string mysql_error ([ resource $link_identifier ] )\n直近の MySQL 関数からのエラー文字列を返します。 MySQL データベースバックエンドから返ってくるエラーは、 警告を発生しません。代わりに mysql_error() を用いて エラー文字列を取得してください。この関数が返すのは、直近に実行された MySQL 関数（mysql_error() と mysql_errno() は除く）のエラー文字列だけであることに 注意しましょう。この関数を利用するなら、別の MySQL 関数をコールする前に 値を調べることを忘れないようにしましょう。
string mysql_escape_string ( string $unescaped_string )\nこの関数は、mysql_query() で指定可能なように unescaped_string をエスケープします。 この関数は非推奨です。\nこの関数は mysql_real_escape_string() とほぼ同じです。ただ mysql_real_escape_string() はコネクションハンドラを用い、 カレントの文字セットを考慮したエスケープを行うという点が違います。 mysql_escape_string() はコネクションに関する引数を 持たず、カレントの文字セット設定を考慮しません。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] )\n取得した行に対応する配列を返し、内部のデータポインタを前に進めます。
array mysql_fetch_assoc ( resource $result )\n取得した行に対応する連想配列を返し、内部のデータポインタを前に進めます。 mysql_fetch_assoc() は、 mysql_fetch_array() の 2 番目のパラメータを MYSQL_ASSOC に指定してコールするのと同じ働きをします。つまり、 連想配列のみを返します。
object mysql_fetch_field ( resource $result [, int $field_offset = 0 ] )\nフィールド情報を含むオブジェクトを返します。特定のクエリー結果の中の フィールドに関する情報を得るために使用可能です。
array mysql_fetch_lengths ( resource $result )\nMySQL により一番最近に取得された行における各フィールドの長さを 格納した配列を返します。\nmysql_fetch_lengths()は、 mysql_fetch_row(), mysql_fetch_assoc(), mysql_fetch_array(), そして mysql_fetch_object() により一番最近に返された 各結果カラムの長さを格納した配列を返します。この配列のオフセットは 0 から始まります。
object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )\n取得された行を表すプロパティを有するオブジェクトを返し、 内部のデータポインタを前に進めます。
array mysql_fetch_row ( resource $result )\n取得された行に対応する配列を返し、内部のデータポインタを前に進めます。
string mysql_field_flags ( resource $result , int $field_offset )\nmysql_field_flags()は、指定したフィールドの フィールドフラグを返します。個々のフラグは、空白一つで区切られた 形式で返されます。このため、返された値を explode() で分割することができます。
int mysql_field_len ( resource $result , int $field_offset )\nmysql_field_len()は指定したフィールドの長さを 返します。
string mysql_field_name ( resource $result , int $field_offset )\nmysql_field_name()は、指定したフィールドの 名前を返します。
bool mysql_field_seek ( resource $result , int $field_offset )\n指定したフィールドオフセットに移動します。 mysql_field_seek() をコールした後、 mysql_fetch_field() をフィールドオフセットを付けずに コールした場合、このフィールドが返されます。
string mysql_field_table ( resource $result , int $field_offset )\n指定したフィールドが含まれるテーブルの名前を返します。
string mysql_field_type ( resource $result , int $field_offset )\nmysql_field_type() は、 mysql_field_name() 関数に似ています。 引数は同じですが、この関数ではフィールドの型が返されます。
bool mysql_free_result ( resource $result )\nmysql_free_result() は、結果 ID result に関するすべてのメモリを開放します。\nmysql_free_result() は、 スクリプト実行のメモリの使用量が多すぎると懸念される場合にのみ 必要になります。指定した結果 ID に関する全ての結果保持用メモリは、 スクリプトの実行後に自動的に開放されます。
string mysql_get_client_info ( void )\nmysql_get_client_info() は、 クライアントライブラリのバージョンを表す文字列を返します。
string mysql_get_host_info ([ resource $link_identifier ] )\n使用されている接続の型を返します。その中にはサーバのホスト名も含まれます。
int mysql_get_proto_info ([ resource $link_identifier ] )\nMySQL プロトコルを取得します。
string mysql_get_server_info ([ resource $link_identifier ] )\nMySQL サーバのバージョンを取得します。
string mysql_info ([ resource $link_identifier ] )\n直近のクエリについての詳細な情報を返します。
int mysql_insert_id ([ resource $link_identifier ] )\n直近の INSERT クエリにより AUTO_INCREMENT カラム用に生成された ID を取得します。
resource mysql_list_dbs ([ resource $link_identifier ] )\nカレントの mysql デーモンから、利用可能なデータベースを含む 結果ポインタを返します。
resource mysql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )\n指定された名前のテーブルについての情報を取得します。\nこの関数は非推奨です。かわりに mysql_query() を利用して SHOW COLUMNS FROM table [LIKE &#039;name&#039;] 文を発行することを推奨します。
resource mysql_list_processes ([ resource $link_identifier ] )\nカレントの MySQL サーバのスレッドを取得します。
resource mysql_list_tables ( string $database [, resource $link_identifier ] )\nMySQL データベースから、テーブル名のリストを取得します。\nこの関数は廃止されました。かわりに mysql_query() を利用して SHOW TABLES [FROM db_name] [LIKE &#039;pattern&#039;] 文を発行することを推奨します。
int mysql_num_fields ( resource $result )\nクエリから、フィールドの数を取得します。
int mysql_num_rows ( resource $result )\n結果セットから行の数を取得します。このコマンドは、 SELECT や SHOW のような、実際に結果セットを返す文に対してのみ有効です。 INSERT、UPDATE、REPLACE、DELETE クエリで変更された行の数を得るには、 mysql_affected_rows() を使用してください。
resource mysql_pconnect ([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, int $client_flags ]]]] )\nMySQL サーバとの持続的な接続を確立します。\nmysql_pconnect()は、 mysql_connect()とよく似た動作をしますが、 2 つの大きな違いがあります。\n1 番目の違いとして、この関数は接続時にまず 同じホスト、ユーザ名、パスワードを有する(持続的)リンクが すでにオープンされていないかどうかを調べます。 それがみつかった場合、新規の接続をオープンする代わりに そのリンクの ID が返されます。\n2 番目の違いは、スクリプトの実行が終了しても SQL サーバとの接続が 閉じられないということです。そのかわりに、将来再利用されるために リンクがオープンされたままとなります（mysql_close() は、mysql_pconnect() によって確立されたリンクを 閉じません）。\nこのため、この型のリンクは、&#039;持続的(persistent)&#039;であると言われます。
bool mysql_ping ([ resource $link_identifier ] )\nサーバとの接続が有効かどうかを調べます。 もし接続が切れていた場合、自動的に再接続が試みられます。 この関数は、アイドル期間が長いスクリプトで利用し、 サーバが接続を切断したかどうかを確認するために用いられます。
resource mysql_query ( string $query [, resource $link_identifier ] )\nmysql_query() は、 ひとつのクエリを送信します (複数クエリの送信はサポートしません)。 送信先は、link_identifier で指定したサーバ上にある、現在アクティブなデータベースです。
string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier ] )\n現在の接続の文字セットで unescaped_string の特殊文字をエスケープし、 mysql_query() で安全に利用できる形式に変換します。バイナリデータを挿入しようとしている場合、 必ずこの関数を利用しなければなりません。\nmysql_real_escape_string() は、MySQL のライブラリ関数 mysql_real_escape_string をコールしています。 これは以下の文字について先頭にバックスラッシュを付加します。 \\x00, \\n, \\r, \\, &#039;, &quot; そして \\x1a.\nデータの安全性を確保するため、MySQL へクエリを送信する場合には （わずかな例外を除いて）常にこの関数を用いなければなりません。
string mysql_result ( resource $result , int $row [, mixed $field = 0 ] )\nMySQL の結果セットからひとつのセルの内容を取得します。\n大量の結果セットで作業を行う際は、行全体を取り込む関数のうちひとつを 使用することを検討するべきです（以下で説明します）。 これらの関数は一回の関数コールで複数のセルの内容を返すので、 mysql_result() よりもかなり高速です。 また、フィールド引数としてオフセット数値を指定する方が フィールド名やテーブル名.フィールド名のように指定するよりも かなり高速です。
bool mysql_select_db ( string $database_name [, resource $link_identifier ] )\n指定したリンク ID が指すサーバ上のデータベースを、アクティブな データベースに設定します。それ以降にコールされる mysql_query() は、すべてアクティブなデータベース上で 実行されます。
bool mysql_set_charset ( string $charset [, resource $link_identifier ] )\n現在の接続における、デフォルトの文字セットを設定します。
string mysql_stat ([ resource $link_identifier ] )\nmysql_stat() は現在のサーバの状態を返します。
string mysql_tablename ( resource $result , int $i )\nresult からテーブル名を取得します。\nこの関数は非推奨です。かわりに mysql_query() を利用して SHOW TABLES [FROM db_name] [LIKE &#039;pattern&#039;] 文を発行することを推奨します。
int mysql_thread_id ([ resource $link_identifier ] )\nカレントのスレッド ID を取得します。接続が一度切断され、 mysql_ping() によって再接続された場合には、 スレッド ID は変わります。つまり、スレッド ID は必要になったその時点で 取得すべきだということです。
resource mysql_unbuffered_query ( string $query [, resource $link_identifier ] )\nmysql_unbuffered_query() は SQL クエリ query を MySQL に送信します。その際、 mysql_query() が行っているような自動バッファリングを 行いません。一方、この挙動により SQL クエリが消費するメモリの量を おさえられます。また、最初の 1 行目が取得されたらすぐに処理を はじめることができます。SQL の処理が完全に終わるまで待つ必要がありません。 複数の DB 接続を利用する場合には、オプションのパラメータ link_identifier を指定する必要があります。
この関数は mysqli_stmt_bind_param() のエイリアスです。
この関数は mysqli_stmt_bind_result() のエイリアスです。
この関数は mysqli_character_set_name() のエイリアスです。
手続き型:\nbool mysqli_disable_reads_from_master ( mysqli $link )\nオブジェクト指向型（メソッド）:\nmysqli\nvoid disable_reads_from_master ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
bool mysqli_disable_rpl_parse ( mysqli $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
bool mysqli_enable_reads_from_master ( mysqli $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
bool mysqli_enable_rpl_parse ( mysqli $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
この関数は mysqli_real_escape_string() のエイリアスです。
この関数は mysqli_stmt_execute() のエイリアスです。
この関数は mysqli_stmt_fetch() のエイリアスです。
この関数は mysqli_stmt_result_metadata() のエイリアスです。
bool mysqli_master_query ( mysqli $link , string $query )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
この関数は mysqli_stmt_param_count() のエイリアスです。
bool mysqli_report ( int $flags )\nmysqli_report() は、開発やテストのフェーズにおいて クエリの機能を向上させる強力な関数です。フラグの設定により、この関数は インデックスを使用しない（あるいは間違ったインデックスを使用している） mysqli 関数コールやクエリに対してエラーを報告します。
int mysqli_rpl_parse_enabled ( mysqli $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
bool mysqli_rpl_probe ( mysqli $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
手続き型:\nint mysqli_rpl_query_type ( mysqli $link , string $query )\nオブジェクト指向型（メソッド）\nmysqli\nint rpl_query_type ( string $query )\nクエリの型により、 MYSQLI_RPL_MASTER、 MYSQLI_RPL_SLAVE あるいは MYSQLI_RPL_ADMIN のいずれかを返します。 INSERT・UPDATE およびそれに類する ものは master クエリで、SELECT は slave、そして FLUSH・ REPAIR およびそれに類するものは admin です。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
この関数は mysqli_stmt_send_long_data() のエイリアスです。
手続き型:\nbool mysqli_send_query ( mysqli $link , string $query )\nオブジェクト指向型（メソッド）\nmysqli\nbool send_query ( string $query )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
この関数は mysqli_options() のエイリアスです。
bool mysqli_slave_query ( mysqli $link , string $query )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n警告\nこの関数は 非推奨 であり、PHP 5.3.0 で 削除 されます。
bool natcasesort ( array &$array )\nnatcasesort() は、大文字小文字を区別しないバージョンの natsort() です。\nこの関数は、人間が行うような手法でアルファベットまたは数字の文字列の順番を キー/値の関係を保持したままソートします。 これは、&quot;自然順(natural ordering)&quot;と呼ばれているものです。
bool natsort ( array &$array )\nこの関数は、人間が行うような手法でアルファベットまたは数字の文字列の順番を キー/値の関係を保持したままソートします。 これは、&quot;自然順(natural ordering)&quot;と呼ばれているものです。 このアルゴリズムと (sort() を用いた) 通常のコンピュータ文字列ソートアルゴリズムの違いを示す例を以下に示します。
int ncurses_addch ( int $ch )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_addchnstr ( string $s , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_addchstr ( string $s )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_addnstr ( string $s , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_addstr ( string $text )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_assume_default_colors ( int $fg , int $bg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_attroff ( int $attributes )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_attron ( int $attributes )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_attrset ( int $attributes )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_baudrate ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_beep ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_beep() は、耳に聞こえる警告(ベル) を送信ます。送信できなかった場合は画面をフラッシュします。
int ncurses_bkgd ( int $attrchar )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ncurses_bkgdset ( int $attrchar )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定した線と角を、メインウィンドウの周りに描画します。\nサブウィンドウの周りに境界を描画するには ncurses_wborder() を使用してください!
int ncurses_bottom_panel ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_can_change_color ( void )\n端末が色を扱えるかどうか、そしてプログラマが ncurses_init_color() で色を変更できるかどうかを返します。 この関数をコールする前に、ncurses を ncurses_init() で初期化しておく必要があります。
bool ncurses_cbreak ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_cbreak() は、行のバッファリングと 文字の処理(文字が影響を受けない割り込みやフロー制御)を無効にし、 ユーザが入力した文字をすぐにプログラムに渡します。
bool ncurses_clear ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n空白を設定せず 完全に画面を消去します。\n注意: ncurses_clear() は空白を設定せずに 画面を消去します。つまり、現在の背景の状態が残されるということです。 空白文字で画面を消去するには ncurses_erase() を使用します。
bool ncurses_clrtobot ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_clrtobot() は、カーソル位置から 画面の最下部までのすべての行を消去し、空白で埋めます。 ncurses_clrtobot() で作成される空白には 現在の背景設定が使用されます。
bool ncurses_clrtoeol ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_clrtoeol() は、カーソル位置から 行末までを消去し、空白で埋めます。 ncurses_clrtoeol() で作成される空白には 現在の背景設定が使用されます。
int ncurses_color_content ( int $color , int &$r , int &$g , int &$b )\n指定した色定義から赤、緑、青の各コンポーネントを取得します。 この関数をコールする前に、端末の色機能を ncurses_start_color() で初期化しておく必要があります。
int ncurses_color_set ( int $pair )\nアクティブな前景色と背景色を設定します。 この関数のあとに書いたすべての文字は、指定した色となります。 この関数を使用するには、端末の色がサポートされていてかつ ncurses_start_color() で事前に初期化されている必要があります。\nncurses は、色ペアを使って前景色と背景色の両方を指定します。 色ペアを定義するには ncurses_init_pair() を使用します。
int ncurses_curs_set ( int $visibility )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_def_prog_mode ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_reset_prog_mode() で使用するために (curses 内の)プログラムの現在の端末モードを保存します。
bool ncurses_def_shell_mode ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_reset_shell_mode() で使用するために (curses 内でない)シェルの現在の端末モードを保存します。
int ncurses_define_key ( string $definition , int $keycode )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_del_panel ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_delay_output ( int $milliseconds )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_delch ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nカーソルがある位置の文字を削除します。 同じ行でカーソルの右側にある文字が左側にひとつづつ移動し、 その行の最後の文字があった場所は空白で埋められます。 カーソルの位置は変わりません。
bool ncurses_deleteln ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nカーソル位置の行を削除します。 現在の行より下の行は 1 行ずつ上に移動します。 ウィンドウの最下行はクリアされます。カーソルの位置は変わりません。
bool ncurses_delwin ( resource $window )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_doupdate ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n仮想スクリーンと物理スクリーンを比較し、 物理スクリーンを更新します。リフレッシュを何度もコールするよりも、 この方法のほうが効率的です。
bool ncurses_echo ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nエコーモードを有効にします。 ユーザがタイプした文字がすべて ncurses_getch() によってエコーされます。
int ncurses_echochar ( int $character )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_end ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_erase ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末の画面を空白で埋めます。\n作成された空白の背景処理は、ncurses_bkgd() で設定したものとなります。
string ncurses_erasechar ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在の erase 文字を返します。
void ncurses_filter ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_flash ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n画面をフラッシュします。 もしそれができなかった場合は、音声の警告(ベル)を送信します。
bool ncurses_flushinp ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nタイプされた内容のうち、 まだプログラムで読み込まれていないものををすべて捨てます。
int ncurses_getch ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ncurses_getmaxyx ( resource $window , int &$y , int &$x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定したウィンドウ window の水平方向・垂直方向の大きさを取得します。\n変数は参照渡しとする必要があり、 ユーザが端末の大きさを変更した際にこの変数が更新されます。
bool ncurses_getmouse ( array &$mevent )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_getmouse() は、 キューからマウスイベントを読み込みます。
void ncurses_getyx ( resource $window , int &$y , int &$x )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_halfdelay ( int $tenth )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_has_colors ( void )\n端末がカラー表示機能を持つかどうかを調べます。 この関数を使用すると、端末に依存しないプログラムを書くことができます。 この関数をコールする前に、 ncurses_init() で ncurses を初期化しておく必要があります。
bool ncurses_has_ic ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末が挿入/削除機能を持つかどうかを調べます。
bool ncurses_has_il ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末が行挿入/削除機能を持つかどうかを調べます。
int ncurses_has_key ( int $keycode )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_hide_panel ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_hline ( int $charattr , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string ncurses_inch ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在位置の文字を返します。
int ncurses_init_color ( int $color , int $r , int $g , int $b )\n指定した色を定義/再定義します。この関数がコールされると、 画面上に存在するその色の部分が即時に新しい定義に変わります。\n色機能が端末でサポートされており、かつこの関数をコールする前に ncurses_start_color() で初期化されている必要があります。 さらに、端末が色の変更機能を持っている必要があります。これを調べるには ncurses_can_change_color() を使用します。
int ncurses_init_pair ( int $pair , int $fg , int $bg )\n前景色と背景色の色ペアを定義/再定義します。 色ペアが事前に初期化されている場合は、 画面が再描画されて即時に新しい定義が反映されます。\nこの関数をコールする前に、 ncurses_start_color() で色機能を初期化しておく必要があります。 最初の色ペア (色ペア 0) はデフォルトで黒地に白となっていますが、 ncurses_assume_default_colors() で変更することも可能です。
void ncurses_init ( void )\nncurses インターフェイスを初期化します。 必ず、その他の ncurses 関数の前に使用する必要があります。\nプログラムを終了する前に、必ず ncurses_end() をコールしなければならないことに注意しましょう。 そうしないと、端末を適切な非ビジュアルモードに戻すことができません。
int ncurses_insch ( int $character )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_insdelln ( int $count )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_insertln ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在の行の上に新しい行を挿入します。いちばん下の行は失われます。
int ncurses_insstr ( string $text )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_instr ( string &$buffer )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在の位置から行末までを読み込み、その文字数を返します。
bool ncurses_isendwin ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses が endwin モードであるかどうかを調べます。
int ncurses_keyok ( int $keycode , bool $enable )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_keypad ( resource $window , bool $bf )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string ncurses_killchar ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在の行削除文字を返します。
string ncurses_longname ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末の詳細な説明を返します。
int ncurses_meta ( resource $window , bool $8bit )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mouseinterval ( int $milliseconds )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mousemask ( int $newmask , int &$oldmask )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n報告されるマウスイベントを設定します。デフォルトでは、 どのマウスイベントについても報告されません。\nマウスイベントは、ncurses_wgetch() 入力ストリーム内では NCURSES_KEY_MOUSE で表されます。 イベントデータを読み込んでキューからイベントを取り出すには、 ncurses_getmouse() をコールします。
int ncurses_move_panel ( resource $panel , int $startx , int $starty )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_move ( int $y , int $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvaddch ( int $y , int $x , int $c )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvaddchstr ( int $y , int $x , string $s )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvaddstr ( int $y , int $x , string $s )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvdelch ( int $y , int $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvgetch ( int $y , int $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvinch ( int $y , int $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_napms ( int $milliseconds )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ncurses_new_panel ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ncurses_newpad ( int $rows , int $cols )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n描画要素を入れるための新しいウィンドウを作成します。\n端末の大きさはそれぞれ異なりいろいろな値をとる可能性があるので、 ウィンドウを追加する際には ncurses_getmaxyx() を使用して使用可能な領域を調べることを忘れないようにしましょう。
bool ncurses_nl ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_nocbreak ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末を通常モード (cooked モード) に戻します。モードが継承されている場合、端末の 書記モードは cbreak モードであったりそうでなかったりするかもしれません。 そのため、プログラムでは ncurses_cbreak() および ncurses_nocbreak() を明示的にコールすべきです。
bool ncurses_noecho ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nユーザが入力した文字のエコーを無効にします。
bool ncurses_nonl ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ncurses_noqiflush ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_noraw ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末を raw モード以外に変更します。row モードは cbreak モードと似ており、 タイプされた文字はすぐにプログラムへ渡されます。違う点は、 raw モードの場合は 中断 (interrupt)、終了 (quit)、停止 (suspend) およびフロー制御文字もそのまま渡され、シグナルは発生しないということです。
int ncurses_pair_content ( int $pair , int &$f , int &$b )\n指定した色ペアの前景色と背景色を取得します。この関数をコールする前に、 ncurses_start_color() で端末の色機能を初期化しておく必要があります。
resource ncurses_panel_above ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ncurses_panel_below ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource ncurses_panel_window ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_putp ( string $text )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ncurses_qiflush ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_raw ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n端末を raw モードに変更します。row モードは cbreak モードと似ており、 タイプされた文字はすぐにプログラムへ渡されます。違う点は、raw モードの場合は 中断 (interrupt)、終了 (quit)、停止 (suspend) およびフロー制御文字もそのまま渡され、シグナルは発生しないということです。
int ncurses_refresh ( int $ch )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_replace_panel ( resource $panel , resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_reset_prog_mode ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_reset_shell_mode ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_resetty ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n事前に ncurses_savetty() をコールすることによって保存しておいた端末モードを復元します。
bool ncurses_savetty ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在の端末の状態を保存します。 保存された状態は、関数 ncurses_resetty() によって復元することが可能です。
int ncurses_scr_dump ( string $filename )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_scr_init ( string $filename )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_scr_restore ( string $filename )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_scr_set ( string $filename )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_scrl ( int $count )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_show_panel ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_slk_attr ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在のソフトラベルキー属性を返します。
int ncurses_slk_attroff ( int $intarg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_slk_attron ( int $intarg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_slk_attrset ( int $intarg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_slk_clear ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n関数 ncurses_slk_clear() は、 画面からソフトラベルキーを消去します。
int ncurses_slk_color ( int $intarg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_slk_init ( int $format )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nソフトラベルキー関数を初期化します。\nこの関数は、必ず ncurses_init() あるいは ncurses_newwin() がコールされる前にコールする必要があります。
bool ncurses_slk_noutrefresh ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_slk_refresh ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nソフトラベルキーを仮想画面から実際の画面にコピーします。
int ncurses_slk_restore ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nncurses_slk_clear() が実行された後に ソフトラベルキーを復元します。
bool ncurses_slk_set ( int $labelnr , string $label , int $format )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_slk_touch ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n次に ncurses_slk_noutrefresh() が実行された際に すべてのソフトラベルを強制的に出力するようにします。
int ncurses_standend ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_standout ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_start_color ( void )\nncurses の色機能を初期化します。この関数は、 ncurses_init() をコールした後で その他の色操作関数をコールする前に実行する必要があります。 ncurses_init() の直後に実行するのがよいでしょう。
bool ncurses_termattrs ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string ncurses_termname ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nReturns terminals shortname.
void ncurses_timeout ( int $millisec )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_top_panel ( resource $panel )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_typeahead ( int $fd )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_ungetch ( int $keycode )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_ungetmouse ( array $mevent )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nキューに KEY_MOUSE イベントをプッシュし、このイベントを、mevent で指定した状態・画面上の位置座標と関連付けます。
void ncurses_update_panels ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_use_default_colors ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void ncurses_use_env ( bool $flag )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_use_extended_names ( bool $flag )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_vidattr ( int $intarg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_vline ( int $charattr , int $n )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_waddch ( resource $window , int $ch )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_waddstr ( resource $window , string $str [, int $n ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wattroff ( resource $window , int $attrs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wattron ( resource $window , int $attrs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wattrset ( resource $window , int $attrs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nwindow で指定したウィンドウの周囲を指定した線と角で囲みます。\nメインウィンドウの周囲を囲むには、ncurses_border() を使用します。
int ncurses_wclear ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wcolor_set ( resource $window , int $color_pair )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_werase ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wgetch ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_whline ( resource $window , int $charattr , int $n )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wmove ( resource $window , int $y , int $x )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wnoutrefresh ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wrefresh ( resource $window )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wstandend ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wstandout ( resource $window )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int ncurses_wvline ( resource $window , int $charattr , int $n )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_bell ( void )\nこの関数は、端末にビープ音を送信します。
resource newt_button_bar ( array &$buttons )\nこの関数は、作成したボタンを含むグリッドを返します。
resource newt_button ( int $left , int $top , string $text )\n新しいボタンを作成します。
int newt_centered_window ( int $width , int $height [, string $title ] )\n画面の中央に、指定したサイズのウィンドウをオープンします。
string newt_checkbox_get_value ( resource $checkbox )\nこの関数は、シーケンス内の文字を返します。 これは、チェックボックスの現在の値を表します。
void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense )\nこの関数は、チェックボックスリソースのさまざまなフラグを設定します。
void newt_checkbox_set_value ( resource $checkbox , string $value )\nこの関数は、チェックボックスリソースの現在の値を設定します。
void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] )\nこの関数は、新しいアイテムをチェックボックスツリーに追加します。
array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data )\nデータを指定して、チェックボックスツリーのアイテムを探します。
mixed newt_checkbox_tree_get_current ( resource $checkboxtree )\nこのメソッドは、チェックボックスツリーの選択されているアイテムを返します。
string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array newt_checkbox_tree_get_selection ( resource $checkboxtree )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_clear_key_buffer ( void )\n追加の入力を待たずに、端末の入力バッファの内容をクリアします。
void newt_cls ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_compact_button ( int $left , int $top , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_component_takes_focus ( resource $component , bool $takes_focus )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_create_grid ( int $cols , int $rows )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_cursor_off ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_cursor_on ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_delay ( int $microseconds )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_draw_form ( resource $form )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_draw_root_text ( int $left , int $top , string $text )\n指定した位置に文字列を表示します。
string newt_entry_get_value ( resource $entry )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_entry_set_filter ( resource $entry , callback $filter , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_entry_set_flags ( resource $entry , int $flags , int $sense )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_finished ( void )\nnewt インターフェースを終了します。プログラムが終了する際にこの関数を コールします。
void newt_form_add_component ( resource $form , resource $component )\nform にコンポーネントを追加します。
void newt_form_add_components ( resource $form , array $components )\nform に複数のコンポーネントを追加します。
void newt_form_add_hot_key ( resource $form , int $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_destroy ( resource $form )\nこの関数は、フォームおよびそこに追加されたすべてのコンポーネント (サブフォーム上のコンポーネントも含みます)が使用しているメモリ リソースを開放します。いちどフォームが破壊されると、フォーム上の コンポーネントは使用できなくなります。
resource newt_form_get_current ( resource $form )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_run ( resource $form , array &$exit_struct )\nこの関数は、引数で渡したフォームを実行します。
void newt_form_set_background ( resource $from , int $background )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_set_height ( resource $form , int $height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_set_size ( resource $form )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_set_timer ( resource $form , int $milliseconds )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_set_width ( resource $form , int $width )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )\n新しいフォームを作成します。
void newt_get_screen_size ( int &$cols , int &$rows )\n参照で渡された引数に、現在の端末の大きさを格納します。
void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_free ( resource $grid , bool $recurse )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_get_size ( resouce $grid , int &$width , int &$height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_place ( resource $grid , int $left , int $top )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_grid_wrapped_window ( resource $grid , string $title )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_init ( void )\nnewt インターフェースを初期化します。この関数は、他の newt 関数の前に コールする必要があります。
void newt_label_set_text ( resource $label , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_label ( int $left , int $top , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_clear_selection ( resource $listbox )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_clear ( resource $listobx )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_delete_entry ( resource $listbox , mixed $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string newt_listbox_get_current ( resource $listbox )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array newt_listbox_get_selection ( resource $listbox )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_listbox_item_count ( resource $listbox )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_set_current_by_key ( resource $listbox , mixed $key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_set_current ( resource $listbox , int $num )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_set_data ( resource $listbox , int $num , mixed $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_set_entry ( resource $listbox , int $num , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listbox_set_width ( resource $listbox , int $width )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_listbox ( int $left , int $top , int $height [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed newt_listitem_get_data ( resource $item )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_listitem_set ( resource $item , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] )\n指定したサイズと位置でウィンドウをオープンします。
void newt_pop_help_line ( void )\n現在のヘルプ行を、スタックの内容で置き換えます。
void newt_pop_window ( void )\nトップウィンドウを画面から消去し、ウィンドウが覆っていた部分を 再描画します。
void newt_push_help_line ([ string $text ] )\n現在のヘルプ行をスタックに保存し、新しい行を表示します。
resource newt_radio_get_current ( resource $set_member )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_redraw_help_line ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_refresh ( void )\nパフォーマンスを向上させるため、newt は必要時にしか画面を更新しません。 それはプログラムが端末への書き込みを行った場合とは限りません。 変更した部分を即時に更新させるようにするために、この関数をコールします。
void newt_resize_screen ([ bool $redraw ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_resume ( void )\nnewt_suspend() をコールした後に newt インターフェースの使用を再開します。
resource newt_run_form ( resource $form )\nこの関数は、引数で渡したフォームを実行します。
void newt_scale_set ( resource $scale , int $amount )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_scale ( int $left , int $top , int $width , int $full_value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_scrollbar_set ( resource $scrollbar , int $where , int $total )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_set_help_callback ( mixed $function )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_set_suspend_callback ( callback $function , mixed $data )\nユーザがサスペンドキー（通常は ^Z）を押した際に起動するコールバック関数を 設定します。コールバックが登録されていない場合、サスペンドのキー入力は 無視されます。
void newt_suspend ( void )\n端末を元の状態に戻すよう、newt に通知します。いったん実行されると、 (自分自身に SIGTSTP を送信する・子プログラムをフォークするなどの方法で) アプリケーションが自分自身でサスペンドすることが可能となります。
int newt_textbox_get_num_lines ( resource $textbox )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_textbox_set_height ( resource $textbox , int $height )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_textbox_set_text ( resource $textbox , string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_wait_for_key ( void )\nこの関数は、キーが押されるまで結果を返しません。 キー入力は無視されます。もし端末のバッファにキー入力が格納されている場合は、 この関数はその内容を捨てて結果をすぐに返します。
int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void newt_win_messagev ( string $title , string $button_text , string $format , array $args )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed next ( array &$array )\nnext() は、ひとつの違いを除いて current() と同じです。 next() は要素を返す前に内部配列ポインタをひとつ先に進めます。 つまり、次の配列要素を返すとともに内部配列ポインタをひとつ進めるということです。
string ngettext ( string $msgid1 , string $msgid2 , int $n )\n複数形版の gettext() です。 言語によっては、数量に応じていくつかの複数形が存在することがあります。
string nl_langinfo ( int $item )\nnl_langinfo() はロケールカテゴリの独立した要素にアクセスするために使用されます。 localeconv() と異なり、全ての要素を返します。 nl_langinfo() はいかなる特定要素も取得可能です。
string nl2br ( string $string [, bool $is_xhtml = true ] )\nstring に含まれるすべての改行文字の前に &#039;<br />&#039; あるいは &#039;<br>&#039; を挿入して返します。
array notes_body ( string $server , string $mailbox , int $msg_number )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_copy_db ( string $from_database_name , string $to_database_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_create_db ( string $database_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_create_note ( string $database_name , string $form_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_drop_db ( string $database_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int notes_find_note ( string $database_name , string $name [, string $type ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
object notes_header_info ( string $server , string $mailbox , int $msg_number )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_list_msgs ( string $db )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_mark_read ( string $database_name , string $user_name , string $note_id )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_mark_unread ( string $database_name , string $user_name , string $note_id )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool notes_nav_create ( string $database_name , string $name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array notes_search ( string $database_name , string $keywords )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array notes_unread ( string $database_name , string $user_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float notes_version ( string $database_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array nsapi_request_headers ( void )\nnsapi_request_headers() は、カレントの リクエストの HTTP ヘッダを連想配列で返します。 この関数は、PHP を NSAPI モジュールとして 実行している場合にのみサポートされます。
array nsapi_response_headers ( void )\nGets all the NSAPI response headers.
bool nsapi_virtual ( string $uri )\nnsapi_virtual() は NSAPI 特有の関数です。 SSI (.shtml ファイル) における <!--#include virtual...--> と等価で、NSAPI サブリクエストを実行します。 CGI スクリプトや .shtmlファイル、 あるいはその他ウェブサーバ上でパースするものを include するのに有用でしょう。\nサブリクエストを実行するには、全てのバッファリングを中断し ブラウザにフラッシュする必要があります。 ペンディング状態のヘッダも送出する必要があります。\nこの関数を使って他の PHP スクリプトに再帰的なリクエストをすることはできません。 PHP スクリプトをインクルードしたい場合には、include() または require() を使用してください。
string nthmac ( string $clent , string $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string number_format ( float $number [, int $decimals ] )\nstring number_format ( float $number , int $decimals , string $dec_point , string $thousands_sep )\nこの関数は 1 つか 2 つもしくは 4 つのパラメータを受け取ります (3 つはありません) :\nパラメータが 1 つだけ渡された場合、 number は千位毎にカンマ (&quot;,&quot;) が追加され、 小数なしでフォーマットされます。\nパラメータが 2 つ渡された場合、number は decimals 桁の小数の前にドット (&quot;.&quot;) 、 千位毎にカンマ (&quot;,&quot;) が追加されてフォーマットされます。\nパラメータが 4 つ全て渡された場合、number はドット (&quot;.&quot;) の代わりに dec_point が decimals 桁の小数の前に、千位毎にカンマ (&quot;,&quot;) の代わりに thousands_sep が追加されてフォーマットされます。
string oauth_urlencode ( string $uri )\nURI を &raquo; RFC3686 形式でエンコードします。
string oauth_get_sbs ( string $http_method , string $uri , array $request_parameters )\npecl/oauth に関するSBSを生成します
void ob_clean ( void )\nこの関数は、出力バッファの内容を消去します。\nこの関数は、ob_end_clean() のように出力バッファを破棄するわけではありません。
string ob_deflatehandler ( string $data , int $mode )\nob_start() とともに使用します。
bool ob_end_clean ( void )\n出力用バッファの内容を消去し、出力のバッファリングをオフにします。 バッファの内容について更に何らかの処理を行いたい場合には、 バッファの内容は ob_end_clean() がコールされると 破棄されるため、ob_end_clean() の前に ob_get_contents() をコールしなければなりません。
bool ob_end_flush ( void )\nこの関数は、出力用バッファの内容を出力し、出力のバッファリングをオフにします。 出力用バッファの内容を更に処理したい場合には、 バッファの内容は ob_end_flush() がコールされた後に消去されるため、 ob_end_flush() の前に ob_get_contents() をコールする必要があります。
string ob_etaghandler ( string $data , int $mode )\nob_start() とともに使用します。\nこの出力バッファハンドラは、 INI 設定 http.etag.mode で指定したハッシュアルゴリズムを使用して、ETag を生成します。\nこの出力ハンドラは、 http_cache_etag() によって使用されます。
void ob_flush ( void )\nこの関数は、(ある場合に)出力バッファの内容を送信します。 更にバッファの内容を処理したい場合には、ob_flush() がコールされた後にバッファの内容が破棄されるので、 ob_flush() の前に ob_get_contents() をコールする必要があります。\nこの関数は、ob_end_flush() のように出力バッファを破棄しません。
string ob_get_clean ( void )\n現在のバッファの中身を取得し、出力バッファを削除します。\nob_get_clean() は、基本的に ob_get_contents() および ob_end_clean() を同時に実行するのと同じです。
string ob_get_contents ( void )\n出力用バッファの内容を取得します。バッファの内容はクリアしません。
string ob_get_flush ( void )\nob_get_flush() は、 出力バッファをフラッシュしてその内容を文字列として返した後、 出力バッファリングを終了します。
int ob_get_length ( void )\nこの関数は、出力バッファの内容の長さを返します。
int ob_get_level ( void )\n出力バッファリングハンドラのネストレベルを返します。
array ob_get_status ([ bool $full_status  = FALSE ] )\nob_get_status() は、トップレベルの出力バッファの ステータス情報を返します。full_status が TRUE に設定されている場合は、すべてのアクティブな出力バッファの ステータス情報を返します。
string ob_gzhandler ( string $buffer , int $mode )\nob_gzhandler() は ob_start() 用のコールバック関数として使用されることを意図したもので、 圧縮されたページをサポートしている web ブラウザに対して gz エンコードされたデータを送信することを容易にします。 ob_gzhandler() は 実際に圧縮されたデータを送信する前にブラウザがサポートする content encoding の種類(&quot;gzip&quot;、&quot;deflate&quot; またはなし)を調べ、それに基づいて 出力を返します。すべてのブラウザがサポートされています。 というのも、ブラウザは、 自分が圧縮されたページをサポートするかどうかを表す 適切なヘッダを送信することになっているからです。 圧縮されたページをブラウザがサポートしていない場合、 この関数は FALSE を返します。
string ob_iconv_handler ( string $contents , int $status )\ninternal_encoding でエンコードされた文字列を output_encoding に変換します。\ninternal_encoding および output_encoding は、 iconv_set_encoding() または設定ファイル php.ini で定義されている必要があります。
void ob_implicit_flush ([ int $flag ] )\nob_implicit_flush() は、 自動フラッシュをオンまたはオフに切替えます。 自動フラッシュにより、出力関数のコールが行われるたびに フラッシュ操作が行われるようになります。このため、flush() を明示的にコールする必要はなくなります。
string ob_inflatehandler ( string $data , int $mode )\nob_start() とともに使用します。\nob_deflatehandler() と同様の制限が当てはまります。
array ob_list_handlers ( void )\n使用中の出力ハンドラの一覧を返します。
bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )\nこの関数は出力のバッファリングをオンにします。 出力のバッファリングを有効にすると、 (ヘッダ以外の) スクリプトからの出力は実際には行われず、 代わりに内部バッファに保存されます。\nこの内部バッファの内容は、ob_get_contents() を用いて文字列変数にコピーされます。 内部バッファの内容を出力するには ob_end_flush() を使用します。 ob_end_clean() は、バッファの内容を出力せずに消去します。\n警告\nweb サーバによっては (例: Apache)、コールバック関数からコールされた際に、 スクリプトの実行ディレクトリを変更するものがあります。 コールバック関数の内部で chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;])) などと指定することで、これをもとに戻すことが可能です。\n出力バッファはスタッカブルであり、このため、他の ob_start() がアクティブの間に ob_start() をコールすることが可能です。この場合、 ob_end_flush() を適切な回数コールするようにしてください。 複数の出力コールバック関数がアクティブの場合、 ネストした順番で逐次連続的に出力がフィルタ処理されます。
string ob_tidyhandler ( string $input [, int $mode ] )\nバッファを修正するための ob_start() コールバック関数です。
bool oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] )\noci_bind_array_by_name() は、PHP の配列 var_array を Oracle のプレースホルダ name にバインドします。 このプレースホルダは Oracle PL/SQL の配列を指しています。 入力変数あるいは出力変数のどちらとして使用されるのかは、 実行時に決められます。
bool oci_bind_by_name ( resource $statement , string $ph_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] )\nocibindbyname() は、PHP 変数 variable を Oracle プレースホルダー ph_name にバインドします。実行時に入力用、 出力用に使用されるによらず、必要な記憶領域が確保されます。
bool oci_cancel ( resource $statement )\nカーソルを無効にして関連付けられた全てのリソースを開放し、 読み込みをキャンセルします。
bool oci_close ( resource $connection )\nOracle との接続 connection を閉じます。
OCI-Collection\nbool append ( mixed $value )\nコレクションの最後に要素を追加します。
OCI-Collection\nbool assign ( OCI-Collection $from )\n事前に生成された他のコレクションからコレクションの値を割り当てます。 両方のコレクションは、使用する前に oci_new_collection() を使って生成される必要があります。
OCI-Collection\nbool assignElem ( int $index , mixed $value )\nインデックス index の要素に値を割り当てます。
OCI-Collection\nmixed getElem ( int $index )\nインデックス index (1 から始まる) を持つ要素の値を返します。
OCI-Collection\nbool free ( void )\nコレクションオブジェクトに関連付けられたリソースを解放します。
OCI-Collection\nint max ( void )\nコレクション内の要素の最大数を返します。
OCI-Collection\nint size ( void )\nコレクションのサイズを返します。
OCI-Collection\nbool trim ( int $num )\nコレクションの最後から num 個の要素を切り取ります。
bool oci_commit ( resource $connection )\nOracle接続connection 上のアクティブなトランザクションに関する全ての未解決の文をコミットします。
resource oci_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\n他のほとんどの OCI コールで必要な接続 ID を返します。
bool oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] )\nSQL カラムカラムをフェッチするための PHP 変数を定義します。
array oci_error ([ resource $source ] )\n最後に見つかったエラーを返します。
bool oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] )\n事前にパースされた statement を実行します。
int oci_fetch_all ( resource $statement , array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = 0 ]]] )\n全ての行の結果をユーザー定義の配列に格納して取得します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
array oci_fetch_array ( resource $statement [, int $mode ] )\n次の結果行に相当する配列を返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。\nここで言っておくべき事は、oci_fetch_array() は oci_fetch_row() よりも 無意味に 遅い、ということですが、非常に使いやすい関数です。
array oci_fetch_assoc ( resource $statement )\n次の結果行を連想配列として返します\noci_fetch_assoc() をコールするのは、 oci_fetch_array() で OCI_ASSOC を指定してコールするのと同じです。\n続けて oci_fetch_assoc() をコールすると、 次の行を返します。行がない場合は FALSE を返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
object oci_fetch_object ( resource $statement )\n次の結果行をオブジェクトとして返します。\n続けて oci_fetch_object() をコールすると、 次の行を返します。行がない場合は FALSE を返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
array oci_fetch_row ( resource $statement )\n結果データの次の行を配列で返します。\noci_fetch_row() をコールすることは、 oci_fetch_array() で OCI_NUM を指定してコールすることと同じです。\n続けて oci_fetch_row() をコールすると、 次の行を返します。行がない場合は FALSE を返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
bool oci_fetch ( resource $statement )\n(SELECT文の) 次の行を内部結果バッファに取得します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
bool oci_field_is_null ( resource $statement , mixed $field )\nstatement の、 指定したフィールド field が NULL であるかどうかを調べます。
string oci_field_name ( resource $statement , int $field )\nfield の名前を返します。
int oci_field_precision ( resource $statement , int $field )\nfield の精度を返します。\nFLOAT 型カラムの精度は 0 でなく桁数は -127 となります。 もし精度が 0 の場合、カラムは NUMBER 型、そうでなければ NUMBER(精度, 桁数) となります。
int oci_field_scale ( resource $statement , int $field )\nfield に対応するカラムの桁数を返します。\nFLOAT 型カラムの精度は 0 でなく桁数は -127 となります。 もし精度が 0 の場合、カラムは NUMBER 型、そうでなければ NUMBER(精度, 桁数) となります。
int oci_field_size ( resource $statement , mixed $field )\nフィールド field のサイズを返します。
int oci_field_type_raw ( resource $statement , int $field )\nフィールド field の、Oracle における型を返します。\nしかしながら、フィールドの方を取得したい場合、 oci_field_type() の方が良いでしょう。
mixed oci_field_type ( resource $statement , int $field )\nフィールドのデータ型を返します。
bool oci_free_statement ( resource $statement )\noci_parse() の結果や Oracle から取得した、 Oracle のカーソルおよび文に関連付けられた全てのリソースを解放します。
void oci_internal_debug ( bool $onoff )\n内部デバッグ用出力を有効あるいは無効にします。
OCI-Lob\nbool append ( OCI-Lob $lob_from )\nラージオブジェクトのデータを他のラージオブジェクトに追加します。\n前もってバッファリングが有効になっている場合、 OCI-Lob->append() を使ったラージオブジェクトの書き込みは失敗するでしょう。 追加の前にバッファリングを無効にしなければなりません。 バッファリングを無効にする前に、 OCI-Lob->flush によってバッファをフラッシュする必要があるかも知れません。
OCI-Lob\nbool close ( void )\nOCI-Lob->close() は LOB あるいは FILE のディスクリプタを閉じます。この関数は OCI-Lob->writeTemporary を併用した場合のみ使用されるべきです。
bool oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ] )\nラージオブジェクトあるいはラージオブジェクトの一部を 他のラージオブジェクトにコピーします。 受け取り側の LOB の古いデータは上書きされます。\nもし LOB の特定部分を LOB の特定の位置にコピーする必要がある場合、 oci_lob_seek() を使用して LOB の内部ポインタを移動させることができます。
OCI-Lob\nbool eof ( void )\nラージオブジェクトの内部ポインタが LOB の最後にあるかどうかを調べます。
OCI-Lob\nint erase ([ int $offset [, int $length ]] )\n指定された offset から始まる内部 LOB データの特定の位置を消去します。 パラメータなしでコールすると、すべての LOB データを消去します。\nBLOB の場合、消去するということは存在する LOB の値が 0 バイトで上書きされる、ということを意味します。 CLOB の場合、存在する LOB の値はスペースで上書きされる、ということです。
OCI-Lob\nbool export ( string $filename [, int $start [, int $length ]] )\nLOB の内容をファイルに出力します。
OCI-Lob\nbool flush ([ int $flag ] )\nOCI-Lob->flush() は実際にサーバにデータを書き込みます。
OCI-Lob\nbool free ( void )\n事前に oci_new_descriptor() を使用して割り当てられた ディスクリプタに関連付けられたりソースを解放します。
OCI-Lob\nbool getBuffering ( void )\nラージオブジェクトに対するバッファリングが有効か無効かを調べます。
OCI-Lob\nbool import ( string $filename )\nfilename からのデータをラージオブジェクトの現在の位置に書き込みます。
bool oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 )\n2 つの LOB/FILE ロケータを比較します。
OCI-Lob\nstring load ( void )\nラージオブジェクトの内容を返します。 memory_limit に達した場合、 スクリプトの実行が終了されますので、 LOB がこの制限を超えないことを確認してください。 多くの場合、代わりに OCI-Lob->read を使用することが推奨されます。
OCI-Lob\nstring read ( int $length )\nLOB の内部ポインタの現在位置から length バイト読み込みます。\nlength バイトが読み込まれた、 あるいはラージオブジェクトの終わりに達したとき、読み込みを停止します。 ラージオブジェクトの内部ポインタは、 読み込まれたバイト数分だけシフトされます。
OCI-Lob\nbool rewind ( void )\n内部ポインタをラージオブジェクトの先頭にセットします。
OCI-Lob\nbool save ( string $data [, int $offset ] )\ndata をラージオブジェクトに保存します。
OCI-Lob\nbool import ( string $filename )\nfilename からのデータをラージオブジェクトの現在の位置に書き込みます。
OCI-Lob\nbool seek ( int $offset [, int $whence ] )\nラージオブジェクトの内部ポインタをセットします。
OCI-Lob\nbool setBuffering ( bool $on_off )\nラージオブジェクト用のバッファリングを on_off パラメータの値で設定します。\nこの関数を使用することで、LOB の細かな読み込みや書き込みがバッファリングされことにより ネットワークのラウンドトリップや LOB バージョニングの回数が低減され、 パフォーマンスが改善されます。 oci_lob_flush() はラージオブジェクトの処理が完了した際、 バッファをフラッシュするために使用します。
OCI-Lob\nint size ( void )\nラージオブジェクトのサイズを取得します。
OCI-Lob\nint tell ( void )\nLOB の内部ポインタの現在位置を取得します。
OCI-Lob\nbool truncate ([ int $length ] )\nLOB を切りつめます。
OCI-Lob\nint write ( string $data [, int $length ] )\nパラメータ data からのデータを LOB の内部ポインタの現在位置に書き込みます。
OCI-Lob\nbool writeTemporary ( string $data [, int $lob_type ] )\n一時的なラージオブジェクトを生成し、 data を書き込みます。\nオブジェクトの使用後、OCI-Lob->close を使用するべきです。
OCI-Lob\nbool export ( string $filename [, int $start [, int $length ]] )\nLOB の内容をファイルに出力します。
OCI-Collection oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] )\n新しいコレクションオブジェクトを割り当てます。
resource oci_new_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\nOracle サーバへの新規接続を確立し、ログオンします。\noci_connect() や oci_pconnect() と異なり、oci_new_connect() は接続をキャッシュしません。また、 常に新しくオープンされた接続ハンドルを返します。 これは、もしアプリケーションが 2 セットのクエリ間でトランザクション的な独立を必要とする場合に有効です。
resource oci_new_cursor ( resource $connection )\n指定された接続に新規カーソルを割り当てます。
OCI-Lob oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] )\nディスクリプタあるいは LOB ロケータを保持するリソースを確保します。
int oci_num_fields ( resource $statement )\n指定した文 statement におけるカラムの数を返します。
int oci_num_rows ( resource $statement )\n文の実行で作用された行数を取得します。
resource oci_parse ( resource $connection , string $query )\nconnection を使って query をパースし、ステートメント ID を返します。この ID は、oci_bind_by_name(), oci_execute() や他の関数で使用されます。
bool oci_password_change ( resource $connection , string $username , string $old_password , string $new_password )\nresource oci_password_change ( string $dbname , string $username , string $old_password , string $new_password )\nユーザ username のパスワードを変更します。
resource oci_pconnect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\nOracle サーバへの持続的接続を生成し、ログオンします。\n持続的接続はキャッシュされ、リクエスト間で再利用されることで、 各ページロードのオーバーヘッドを軽減します。 典型的な PHP アプリケーションでは、Apache の子プロセス (もしくは PHP FastCGI/CGI プロセス) ごとに Oracle サーバに対してオープンされた単一の持続的接続を有します。 より詳細な情報については、持続的データベース接続 のセクションを参照してください。
mixed oci_result ( resource $statement , mixed $field )\noci_fetch() によってフェッチされた現在の行のフィールド field からデータを返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
bool oci_rollback ( resource $connection )\nOracle 接続 connection に関する 全ての未解決の文をロールバックします。
string oci_server_version ( resource $connection )\nOracle サーバのバージョン情報を文字列で返します。 その際、指定した接続 connection を使用します。
bool oci_set_prefetch ( resource $statement , int $rows )\noci_execute() のコールが成功した後にプリフェッチする行数を設定します。
string oci_statement_type ( resource $statement )\nOCI ステートメント statement の種類を返します。
bool oci_bind_by_name ( resource $statement , string $ph_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] )\nocibindbyname() は、PHP 変数 variable を Oracle プレースホルダー ph_name にバインドします。実行時に入力用、 出力用に使用されるによらず、必要な記憶領域が確保されます。
bool oci_cancel ( resource $statement )\nカーソルを無効にして関連付けられた全てのリソースを開放し、 読み込みをキャンセルします。
OCI-Lob\nbool close ( void )\nOCI-Lob->close() は LOB あるいは FILE のディスクリプタを閉じます。この関数は OCI-Lob->writeTemporary を併用した場合のみ使用されるべきです。
OCI-Collection\nbool append ( mixed $value )\nコレクションの最後に要素を追加します。
OCI-Collection\nbool assign ( OCI-Collection $from )\n事前に生成された他のコレクションからコレクションの値を割り当てます。 両方のコレクションは、使用する前に oci_new_collection() を使って生成される必要があります。
OCI-Collection\nbool assignElem ( int $index , mixed $value )\nインデックス index の要素に値を割り当てます。
OCI-Collection\nmixed getElem ( int $index )\nインデックス index (1 から始まる) を持つ要素の値を返します。
OCI-Collection\nint max ( void )\nコレクション内の要素の最大数を返します。
OCI-Collection\nint size ( void )\nコレクションのサイズを返します。
OCI-Collection\nbool trim ( int $num )\nコレクションの最後から num 個の要素を切り取ります。
bool oci_field_is_null ( resource $statement , mixed $field )\nstatement の、 指定したフィールド field が NULL であるかどうかを調べます。
string oci_field_name ( resource $statement , int $field )\nfield の名前を返します。
int oci_field_precision ( resource $statement , int $field )\nfield の精度を返します。\nFLOAT 型カラムの精度は 0 でなく桁数は -127 となります。 もし精度が 0 の場合、カラムは NUMBER 型、そうでなければ NUMBER(精度, 桁数) となります。
int oci_field_scale ( resource $statement , int $field )\nfield に対応するカラムの桁数を返します。\nFLOAT 型カラムの精度は 0 でなく桁数は -127 となります。 もし精度が 0 の場合、カラムは NUMBER 型、そうでなければ NUMBER(精度, 桁数) となります。
int oci_field_size ( resource $statement , mixed $field )\nフィールド field のサイズを返します。
mixed oci_field_type ( resource $statement , int $field )\nフィールドのデータ型を返します。
int oci_field_type_raw ( resource $statement , int $field )\nフィールド field の、Oracle における型を返します。\nしかしながら、フィールドの方を取得したい場合、 oci_field_type() の方が良いでしょう。
bool oci_commit ( resource $connection )\nOracle接続connection 上のアクティブなトランザクションに関する全ての未解決の文をコミットします。
bool oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] )\nSQL カラムカラムをフェッチするための PHP 変数を定義します。
array oci_error ([ resource $source ] )\n最後に見つかったエラーを返します。
bool oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] )\n事前にパースされた statement を実行します。
bool oci_fetch ( resource $statement )\n(SELECT文の) 次の行を内部結果バッファに取得します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
int ocifetchinto ( resource $statement , array &$result [, int $mode ] )\nこの関数は推奨されません。代わりに推奨されるものは、 oci_fetch_array()、 oci_fetch_object()、 oci_fetch_assoc() および oci_fetch_row() です。
int oci_fetch_all ( resource $statement , array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = 0 ]]] )\n全ての行の結果をユーザー定義の配列に格納して取得します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
OCI-Collection\nbool free ( void )\nコレクションオブジェクトに関連付けられたリソースを解放します。
bool oci_free_statement ( resource $statement )\noci_parse() の結果や Oracle から取得した、 Oracle のカーソルおよび文に関連付けられた全てのリソースを解放します。
OCI-Lob\nbool free ( void )\n事前に oci_new_descriptor() を使用して割り当てられた ディスクリプタに関連付けられたりソースを解放します。
bool oci_free_statement ( resource $statement )\noci_parse() の結果や Oracle から取得した、 Oracle のカーソルおよび文に関連付けられた全てのリソースを解放します。
void oci_internal_debug ( bool $onoff )\n内部デバッグ用出力を有効あるいは無効にします。
OCI-Lob\nstring load ( void )\nラージオブジェクトの内容を返します。 memory_limit に達した場合、 スクリプトの実行が終了されますので、 LOB がこの制限を超えないことを確認してください。 多くの場合、代わりに OCI-Lob->read を使用することが推奨されます。
bool oci_close ( resource $connection )\nOracle との接続 connection を閉じます。
resource oci_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\n他のほとんどの OCI コールで必要な接続 ID を返します。
OCI-Collection oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] )\n新しいコレクションオブジェクトを割り当てます。
resource oci_new_cursor ( resource $connection )\n指定された接続に新規カーソルを割り当てます。
OCI-Lob oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] )\nディスクリプタあるいは LOB ロケータを保持するリソースを確保します。
resource oci_new_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\nOracle サーバへの新規接続を確立し、ログオンします。\noci_connect() や oci_pconnect() と異なり、oci_new_connect() は接続をキャッシュしません。また、 常に新しくオープンされた接続ハンドルを返します。 これは、もしアプリケーションが 2 セットのクエリ間でトランザクション的な独立を必要とする場合に有効です。
int oci_num_fields ( resource $statement )\n指定した文 statement におけるカラムの数を返します。
resource oci_parse ( resource $connection , string $query )\nconnection を使って query をパースし、ステートメント ID を返します。この ID は、oci_bind_by_name(), oci_execute() や他の関数で使用されます。
resource oci_pconnect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )\nOracle サーバへの持続的接続を生成し、ログオンします。\n持続的接続はキャッシュされ、リクエスト間で再利用されることで、 各ページロードのオーバーヘッドを軽減します。 典型的な PHP アプリケーションでは、Apache の子プロセス (もしくは PHP FastCGI/CGI プロセス) ごとに Oracle サーバに対してオープンされた単一の持続的接続を有します。 より詳細な情報については、持続的データベース接続 のセクションを参照してください。
mixed oci_result ( resource $statement , mixed $field )\noci_fetch() によってフェッチされた現在の行のフィールド field からデータを返します。\noci8 ドライバによるデータ型マッピングの 詳細については、ドライバが サポートするデータ型 を参照ください。
bool oci_rollback ( resource $connection )\nOracle 接続 connection に関する 全ての未解決の文をロールバックします。
int oci_num_rows ( resource $statement )\n文の実行で作用された行数を取得します。
OCI-Lob\nbool save ( string $data [, int $offset ] )\ndata をラージオブジェクトに保存します。
OCI-Lob\nbool import ( string $filename )\nfilename からのデータをラージオブジェクトの現在の位置に書き込みます。
string oci_server_version ( resource $connection )\nOracle サーバのバージョン情報を文字列で返します。 その際、指定した接続 connection を使用します。
bool oci_set_prefetch ( resource $statement , int $rows )\noci_execute() のコールが成功した後にプリフェッチする行数を設定します。
string oci_statement_type ( resource $statement )\nOCI ステートメント statement の種類を返します。
OCI-Lob\nbool export ( string $filename [, int $start [, int $length ]] )\nLOB の内容をファイルに出力します。
OCI-Lob\nbool writeTemporary ( string $data [, int $lob_type ] )\n一時的なラージオブジェクトを生成し、 data を書き込みます。\nオブジェクトの使用後、OCI-Lob->close を使用するべきです。
number octdec ( string $octal_string )\noctal_string により指定された 8 進数を 10 進数表現した数値を返します。
mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )\n自動コミットの挙動を切り替えます。\nデフォルトで接続の自動コミットはオンとなっています。自動コミットを 使用不可にするのは、トランザクションを開始することと等価です。
bool odbc_binmode ( resource $result_id , int $mode )\nバイナリカラムデータを処理できるようにします (関係するODBC SQL型: BINARY, VARBINARY, LONGVARBINARY)。\nバイナリ SQL データが文字データに変換される時、ソースデータの 各バイト (8 ビット) は、2 つのアスキー文字で表現されます。 これらの文字は、16 進表現で数値をアスキー文字で表現したものです。 例えば、2 進数 00000001 は &quot;01&quot; に変換され、 11111111 は &quot;FF&quot; に変換されます。  LONGVARBINARY 処理   binmode longreadlen 結果     ODBC_BINMODE_PASSTHRU 0 通過   ODBC_BINMODE_RETURN 0 通過   ODBC_BINMODE_CONVERT 0 通過   ODBC_BINMODE_PASSTHRU 0 通過   ODBC_BINMODE_PASSTHRU >0 通過   ODBC_BINMODE_RETURN >0 そのまま返す   ODBC_BINMODE_CONVERT >0 char として返す\nodbc_fetch_into() を使用した場合、 「通過」は空文字列が対応するカラムに返されることを意味します。
void odbc_close_all ( void )\nodbc_close_all()は、 データベースサーバへの全ての接続を閉じます。
void odbc_close ( resource $connection_id )\n指定された接続 ID が指すデータベースサーバへの接続を閉じます。
resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )\n指定したテーブルに関するカラムおよび付随する権限のリストを取得します。
resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )\n指定したテーブルにあるカラム名のリストを取得します。
bool odbc_commit ( resource $connection_id )\nその接続におけるすべての実行中のトランザクションをコミットします。
resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )\n他の ODBC 関数を使用するには、 この関数が返す接続 ID が必要となります。 異なる db や異なる権限を使用する限り、 複数の接続を同時にオープンすることができます。\nいくつかの ODBC ドライバでは、 複雑なストアド・プロシージャの実行時に次のようなエラーにより失敗する可能性があります。 &quot;Cannot open a cursor on a stored procedure that has anything other than a single select statement in it&quot; SQL_CUR_USE_ODBC を使用することにより、 このようなエラーを回避できる可能性があります。 また、いくつかのドライバは odbc_fetch_row() においてオプションの row_number パラメータをサポートしません。 この場合でも、SQL_CUR_USE_ODBC により解決できる可能性があります。
string odbc_cursor ( resource $result_id )\n指定された接続 ID に関するカーソル名を返します。 Gets the cursorname for the given result_id.
array odbc_data_source ( resource $connection_id , int $fetch_type )\nこの関数は、有効な DNS（複数回のコールの後）のリストを返します。
resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )\nSQL 命令を データベースサーバに送ります。
string odbc_error ([ resource $connection_id ] )\n6 桁の ODBC ステートを返します。エラーがない場合には、空の文字列を返します。
string odbc_errormsg ([ resource $connection_id ] )\n直近の ODBC エラーメッセージを含む文字列を返します。 エラーが発生していない場合は、空の文字列を返します。
resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )\nSQL 命令を データベースサーバに送ります。
bool odbc_execute ( resource $result_id [, array $parameters_array ] )\nodbc_prepare() で準備された命令を実行します。
array odbc_fetch_array ( resource $result [, int $rownumber ] )\nODBC クエリから、連想配列を取得します。この関数が使用可能なバージョンに ついては、以下の更新履歴を参照ください。
int odbc_fetch_into ( resource $result_id , array &$result_array [, int $rownumber ] )\n結果の行を array に取得します。
object odbc_fetch_object ( resource $result [, int $rownumber ] )\nODBC クエリから、オブジェクトを取得します。この関数が使用可能なバージョンに ついては、以下の更新履歴を参照ください。
bool odbc_fetch_row ( resource $result_id [, int $row_number ] )\nodbc_do() や odbc_exec() から返された行データを取得します。 odbc_fetch_row() がコールされた後、この行のフィールドは、 odbc_result() でアクセス可能となります。
int odbc_field_len ( resource $result_id , int $field_number )\n指定した ODBC 結果 ID の番号で参照されるフィールドの長さを取得します。
string odbc_field_name ( resource $result_id , int $field_number )\n指定された ODBC 結果 ID において指定されたカラム番号にあるフィールドの名前を取得します。
int odbc_field_num ( resource $result_id , string $field_name )\n指定したODBC 結果 ID におけるフィールド名に対応するカラムスロットの数を取得します。
int odbc_field_len ( resource $result_id , int $field_number )\n指定した ODBC 結果 ID の番号で参照されるフィールドの長さを取得します。
int odbc_field_scale ( resource $result_id , int $field_number )\n指定した ODBC 結果 ID の番号で指定したフィールドの精度を取得します。
string odbc_field_type ( resource $result_id , int $field_number )\n指定された ODBC 結果 ID において指定番号で参照されるフィールドの SQL 型を取得します。
resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )\n指定したテーブルの外部キーのリスト、 または指定したテーブルの主キーを参照する他のテーブルの外部キーのリストを取得します。
bool odbc_free_result ( resource $result_id )\n結果を保持するリソースを開放します。\nodbc_free_result()は、スクリプトのメモリ消費量が 多すぎることが懸念される場合にのみコールする必要があります。 全ての結果保持用メモリは、スクリプト実行が終了した際に自動的に開放されます。
resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )\nデータソースがサポートするデータ型についての情報を取得します。
bool odbc_longreadlen ( resource $result_id , int $length )\nLONG および LONGVARBINARY のカラムを処理できるようにします。
bool odbc_next_result ( resource $result_id )\nまだ結果セットが存在して odbc_fetch_array()、odbc_fetch_row()、 odbc_result() などで次の結果セットにアクセスできるかどうかを調べます。
int odbc_num_fields ( resource $result_id )\nODBC 結果におけるフィールド (カラム) の数を取得します。
int odbc_num_rows ( resource $result_id )\nODBC 結果における行の数を取得します。 INSERT、UPDATE および DELETE 命令に関しては、 odbc_num_rows() は、変更された行の数を返します。 SELECT 文の場合、この関数は利用可能な行の数を返します。
resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )\n持続的なデータベース接続を開きます。\nこの関数は odbc_connect() に非常に似ていますが、 スクリプトが終了した時に接続が閉じられないという点が異なります。 同じ dsn 、user 、 password の組み合わせ （odbc_connect() および odbc_pconnect() による）接続の場合は、 持続的な接続を再利用することが可能です。
resource odbc_prepare ( resource $connection_id , string $query_string )\n実行用に文を準備します。 結果 ID は、この後 odbc_execute() で命令を実行する際に使用することができます。\n(IBM DB2、MS SQL Server および Oracle のように) ストアドプロシージャが利用可能で、ODBC 仕様で定義されている IN、INOUT および OUT が利用できるものもあります。 しかし、Unified ODBC ドライバでは現在 IN 型のパラメータしかサポートしていません。
resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )\nテーブルの主キーを有するカラムの名前を取得する際に使用可能な結果 ID を返します。
resource odbc_procedurecolumns ( resource $connection_id )\nresource odbc_procedurecolumns ( resource $connection_id , string $qualifier , string $owner , string $proc , string $column )\nプロシージャへのパラメータに関する情報を取得します。
resource odbc_procedures ( resource $connection_id )\nresource odbc_procedures ( resource $connection_id , string $qualifier , string $owner , string $name )\n指定した範囲の全てのプロシージャのリストを取得します。
int odbc_result_all ( resource $result_id [, string $format ] )\nodbc_exec() により作成された結果 ID から全ての行を出力します。結果は、HTML テーブル形式で出力されます。
mixed odbc_result ( resource $result_id , mixed $field )\n結果データを取得します。
bool odbc_rollback ( resource $connection_id )\nこの接続における全ての未解決の命令をロールバックします。
bool odbc_setoption ( resource $id , int $function , int $option , int $param )\nこの関数により特定の接続またはクエリー結果に関する ODBC オプションを変更することが可能となります。この関数は、気まぐれな ODBC ドライバの問題に対処する際の道具として作成されたものです。自分が ODBC プログラマであり、様々なオプションが有する効果を理解している場合にのみこの関数を使用するべきでしょう。 使用可能な全てのオプションおよび値を理解するためには、良い ODBC リファレンスが必要です。ドライバーのバージョンが違うと、 サポートされるオプションも異なります。\nこの関数の効果は ODBC ドライバに依存する可能性があるので、 一般に公開するスクリプトでは、この関数の使用は避けましょう。 また、いくつかの ODBC オプションはこの関数では利用できません。 それは、これらを接続の確立またはクエリの準備の前に設定する必要があるからです。 しかし、特定の業務において自分の上司が商用製品の使用を指示しなかったために PHP を使用する場合、このことは実際的な問題となります。
resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable )\nテーブルのレコードを特定する最適なカラムの組合せ、 またはレコードの値がトランザクションにより更新される際に自動的に更新されるカラムを取得します。
resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )\nテーブルおよびインデックスに関する統計情報を取得します。
resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )\n指定した範囲にあるテーブルおよび各テーブルに関連する権限のリストを取得します。
resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )\n指定した範囲の全てのテーブルリストを得ます。\n限定子、所有者、テーブル名を数えるために、 qualifier 、owner 、 name 、table_type について以下のような特別な記号が使用可能です。    qualifier がパーセント記号 (%) のみで、 owner および name が空文字列であった場合、結果にはそのデータソースに関する 有効な限定子のリスト (NULL を有する TABLE_QUALIFIER カラム以外の 全てのカラム)が含まれます。     owner がパーセント記号 (%) のみで、 qualifier および name が空文字列の場合、結果にはその データソースに関する有効な所有者のリスト (NULL を有する TABLE_OWNER カラム以外の全てのカラム) が含まれます。     table_type がパーセント記号 (%) のみで、 qualifier 、owner 、 name が空文字列の場合、結果にはそのデータソースに 関する有効なテーブル型のリスト (NULL を有する TABLE_TYPE カラム以外の全てのカラム) が含まれます。
resource openal_buffer_create ( void )
bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq )
bool openal_buffer_destroy ( resource $buffer )
int openal_buffer_get ( resource $buffer , int $property )
bool openal_buffer_loadwav ( resource $buffer , string $wavfile )
resource openal_context_create ( resource $device )
bool openal_context_current ( resource $context )
bool openal_context_destroy ( resource $context )
bool openal_context_process ( resource $context )
bool openal_context_suspend ( resource $context )
bool openal_device_close ( resource $device )
resource openal_device_open ([ string $device_desc ] )
mixed openal_listener_get ( int $property )
bool openal_listener_set ( int $property , mixed $setting )
resource openal_source_create ( void )
bool openal_source_destroy ( resource $source )
mixed openal_source_get ( resource $source , int $property )
bool openal_source_pause ( resource $source )
bool openal_source_play ( resource $source )
bool openal_source_rewind ( resource $source )
bool openal_source_set ( resource $source , int $property , mixed $setting )
bool openal_source_stop ( resource $source )
resource openal_stream ( resource $source , int $format , int $rate )
resource opendir ( string $path [, resource $context ] )\nディレクトリハンドルをオープンします。このハンドルは、この後 closedir(), readdir(), rewinddir() 関数コールで使用されます。
bool openlog ( string $ident , int $option , int $facility )\nopenlog() は、プログラムによるシステムロガーへの接続をオープンします。\nopenlog() の使用は必須ではありません。この関数は、 必要に応じて syslog() により自動的に呼び出されます。 この場合、ident のデフォルト値は FALSE となります。
bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext = true ] )\nopenssl_csr_export_to_file() は、Certificate Signing Request csr を受け取り、 それを outfilename という名前のファイルに ASCII テキストとして保存します。
bool openssl_csr_export ( resource $csr , string &$out [, bool $notext = true ] )\nopenssl_csr_export() は、Certificate Signing Request csr を受け取り、 それを out に ASCII テキストとして保存します。 このパラメータは参照で渡されます。
resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )\nopenssl_csr_new() は、新しい CSR (Certificate Signing Request) を dn の情報に基づいて作成します。dn は、証明書で使用される識別名です。
resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] )\nopenssl_csr_sign() は、 指定した CSR を用いて x509 証明書リソースを作成します。
string openssl_decrypt ( string $data , string $method , string $password [, string $raw_input = false ] )\nTakes a raw or base64 encoded string and decrypts it using a given method and key.\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string openssl_dh_compute_key ( string $pub_key , resource $dh_key )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string openssl_digest ( string $data , string $method [, bool $raw_output = false ] )\nComputes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string openssl_encrypt ( string $data , string $method , string $password [, bool $raw_output = false ] )\nEncrypts given data with given method and key, returns a raw or base64 encoded string\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string openssl_error_string ( void )\nopenssl_error_string() は、 OpenSSL ライブラリから直近のエラーを返します。 エラーメッセージはスタックにつまれており、 全ての情報を集めるにはこの関数を複数回コールする必要があります。
void openssl_free_key ( resource $key_identifier )\nopenssl_free_key() は、指定した key_identifier が指すキーをメモリから開放します。
array openssl_get_cipher_methods ([ bool $aliases = false ] )\nGets a list of available cipher methods.
array openssl_get_md_methods ([ bool $aliases = false ] )\nGets a list of available digest methods.
resource openssl_pkey_get_private ( mixed $key [, string $passphrase = &quot;&quot; ] )\nopenssl_get_privatekey() は key をパースし、他の関数で使用できるよう準備します。
resource openssl_pkey_get_public ( mixed $certificate )\nopenssl_get_publickey() は公開鍵を certificate から抽出し、 他の関数で使用できるよう準備します。
bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id )\nopenssl_open() は、キー ID priv_key_id およびエンベロープキー env_key に関連する公開鍵を使用して、 sealed_data をオープン(復号)します。 エンベロープキーは、データがシール(暗号化)された際に生成され、特定の 一つの公開鍵でのみ使用することが可能です。詳細な情報については、 openssl_seal() を参照ください。
bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )\nopenssl_pkcs12_export_to_file() は、 x509 をファイル filename に PKCS#12 フォーマットで保存します。
bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )\nopenssl_pkcs12_export() は、 x509 を PKCS#12 ファイルフォーマットにしたものを out で指定した文字列に格納します。
bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )\nopenssl_pkcs12_read() は、 pkcs12 で指定した PKCS#12 認証ストアをパースして certs で指定した配列に格納します。
bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )\ninfilename で指定したファイル中の S/MIME 暗号化されたメッセージを、recipcert および recipkey で指定した証明書と公開鍵を用いて復号します。
bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )\nopenssl_pkcs7_encrypt() は、 infile という名前のファイルの内容を RC2 40 ビット暗号により暗号化します。この内容は、 recipcerts で指定した意図する受信者によってのみ読むことが可能です。
bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )\nopenssl_pkcs7_sign() は、 infilename という名前のファイルの内容について パラメータ signcert および privkey で指定した証明書と公開鍵を用いてサインをします。
mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )\nopenssl_pkcs7_verify() は、 指定したファイルの S/MIME メッセージを読み込み、デジタル署名を評価します。
bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )\nopenssl_pkey_export_to_file() は、ASCII 変換された (PEM エンコードされた) key を outfilename のファイルに保存します。
bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )\nopenssl_pkey_export() は、 key を PEM エンコードした文字列として取得し、 out （参照渡し）に格納します。
void openssl_pkey_free ( resource $key )\nこの関数は、openssl_pkey_new() で作成した秘密鍵を開放します。
array openssl_pkey_get_details ( resource $key )\nこの関数は、キーの詳細 (bits, key, type) を返します。
resource openssl_pkey_get_private ( mixed $key [, string $passphrase = &quot;&quot; ] )\nopenssl_get_privatekey() は key をパースし、他の関数で使用できるよう準備します。
resource openssl_pkey_get_public ( mixed $certificate )\nopenssl_get_publickey() は公開鍵を certificate から抽出し、 他の関数で使用できるよう準備します。
resource openssl_pkey_new ([ array $configargs ] )\nopenssl_pkey_new() は、 新しい秘密鍵と公開鍵の鍵ペアを作成します。鍵の公開部は、 openssl_pkey_get_public() を使用して取得可能です。
bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )\nopenssl_private_decrypt() は、事前に openssl_public_encrypt() で暗号化された data を復号し、それを decrypted に格納します。\nこれを使用するのは、例えばあなたにのみ送られてきたデータを復号する場合です。
bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )\nopenssl_private_encrypt() は、data を秘密鍵 key で暗号化し、それを crypted に格納します。暗号化されたデータは、 openssl_public_decrypt() を用いて復号可能です。\nこの関数を使用するのは、例えばデータ（あるいはその一部）に署名をし、 それが他人によって書かれたものでないことを証明する場合です。
bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )\nopenssl_public_decrypt() は、事前に openssl_private_encrypt() で暗号化された data を復号し、それを decrypted に格納します。\nこれを使用するのは、例えばメッセージの作者が秘密鍵の所有者であるかどうかを調べる場合です。
bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )\nopenssl_public_encrypt() は、data を公開鍵 key で暗号化し、それを crypted に格納します。暗号化されたデータは openssl_private_decrypt() を用いて復号可能です。\nこの関数を使用するのは、例えば秘密鍵の所有者にのみ読めるようにメッセージを暗号化する場合です。 また、データベースに格納するデータを安全な形式にするためにも使用されます。
bool openssl_random_pseudo_bytes ( string $length , string $strong )\nopenssl_random_pseudo_bytes() returns a string with length caracters. It also indicates if it has used a strong algorithm to produce those pseudo-random bytes in the second argument.
int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids )\nopenssl_seal() は、ランダムに生成された秘密鍵により RC4 を使用して data をシール(暗号化) します。このキーは、pub_key_ids を ID とする 公開鍵で暗号化されます。これは、暗号化されたデータを複数の受信者に 送信できることを意味します（この際、各受信者は送信側に公開鍵を 提供します）。各受信者は、暗号化されたデータとその受信者の 公開鍵で暗号化されたエンベロープキーを受け取る必要があります。
bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )\nopenssl_sign() は、指定した data に関してハッシュ計算に SHA1 を使用して 署名を計算し、その後 priv_key_id で 指定した秘密鍵を使用して暗号化を行います。data 自体は 暗号化されないことに注意してください。
int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, int $signature_alg ] )\nopenssl_verify() は、 pub_key_id が指す公開鍵を使用し、 指定した data に関して signature が正しいことを確認します。 署名が正しいと判定されるためには、 その公開鍵が署名の際に使用した秘密鍵に対応していることを必要とします。
bool openssl_x509_check_private_key ( mixed $cert , mixed $key )\nkey が cert に対応する秘密鍵かどうかを調べます。
int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo [, string $untrustedfile ]] )\nopenssl_x509_checkpurpose() は証明書を調べ、 purpose で指定した目的に使用可能であるかどうかを確認します。
bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext ] )\nopenssl_x509_export_to_file() は、 PEM エンコード形式の x509 をファイル outfilename に保存します。
bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext ] )\nopenssl_x509_export() は、 PEM エンコード形式の x509 を文字列 output に保存します。
void openssl_x509_free ( resource $x509cert )\nopenssl_x509_free() は、メモリから指定した x509cert リソースに関連した証明書を開放します。
array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )\nopenssl_x509_parse() は、指定した x509cert に関する情報を返します。この情報には 題名、発行者名、目的、発効日および有効期限等が含まれます。
resource openssl_x509_read ( mixed $x509certdata )\nopenssl_x509_read() は、 x509certdata で指定した証明書をパースし、 その証明書用のリソースIDを返します。
int ord ( string $string )\nstring の先頭文字の ASCII 値を返します。\nこの関数は chr() と逆の動作をします。
bool output_add_rewrite_var ( string $name , string $value )\nこの関数は、URL リライト機構に新しい名前/値の組を追加します。 名前および値は、URL (GET パラメータとして) およびフォーム (hidden フィールドとして) で追加されます。これは、session.use_trans_sid で透過的 URL リライティングが有効になっている場合に セッション ID が渡される方法と同じです。 絶対 URL (http://example.com/..) はリライトされないことに注意しましょう。\nこの関数の挙動は、php.ini パラメータ url_rewriter.tags によって制御されます。
bool output_reset_rewrite_vars ( void )\nこの関数は URL リライタをリセットし、 output_add_rewrite_var() 関数や セッション管理機構 (session.use_trans_sid が session_start() に設定されている場合) によって事前に設定されたリライト変数を削除します。
void overload ( string $class_name )\noverload() 関数は、 class_name で指定されたクラスのプロパティと メソッドコールをオーバーロードします。
bool override_function ( string $function_name , string $function_args , string $function_code )\nシンボルテーブルを書き換えることで、組み込みの関数を上書きします
void ovrimos_close ( int $connection )\nOvrimos への指定した接続 connection を閉じます。コミットしていないトランザクションはロールバックされます。
bool ovrimos_commit ( int $connection_id )\nトランザクションをコミットします。
int ovrimos_connect ( string $host , string $dborport , string $user , string $password )\n指定したデータベースに接続します。
string ovrimos_cursor ( int $result_id )\nカーソルの名前を返します。 位置を指定した update または delete を実行する際に便利です。
int ovrimos_exec ( int $connection_id , string $query )\nSQL 文 (クエリまたは更新) を実行し、結果 ID を返します。
bool ovrimos_execute ( int $result_id [, array $parameters_array ] )\nプリペアドステートメントを実行します。
bool ovrimos_fetch_into ( int $result_id , array &$result_array [, string $how [, int $rownumber ]] )\n指定した結果セットから行を取得し、 result_array に格納します。
bool ovrimos_fetch_row ( int $result_id [, int $how [, int $row_number ]] )\n結果セットから行を取得します。カラムの値は、 別のコールで取得する必要があります。
int ovrimos_field_len ( int $result_id , int $field_number )\n指定した出力カラムの長さを取得します。
string ovrimos_field_name ( int $result_id , int $field_number )\n指定したインデックスに対応する出力カラム名を返します。
int ovrimos_field_num ( int $result_id , string $field_name )\n指定した出力カラムの、1 からはじまるインデックスを返します。
int ovrimos_field_type ( int $result_id , int $field_number )\n出力カラムの型を返します。
bool ovrimos_free_result ( int $result_id )\n指定した結果 ID を開放します。
bool ovrimos_longreadlen ( int $result_id , int $length )\nlong データ型 (long varchar とlong varbinary) から取得するバイト数を指定します。
int ovrimos_num_fields ( int $result_id )\n指定した結果 ID のカラムの数を返します。
int ovrimos_num_rows ( int $result_id )\nupdate 操作で変更された行の数を取得します。
int ovrimos_prepare ( int $connection_id , string $query )\nSQL 文を準備します。
int ovrimos_result_all ( int $result_id [, string $format ] )\n結果全体を HTML の表として出力します。
string ovrimos_result ( int $result_id , mixed $field )\nfield で指定した出力カラムを取得します。
bool ovrimos_rollback ( int $connection_id )\nトランザクションをロールバックします。
string pack ( string $format [, mixed $args [, mixed $... ]] )\n指定された引数を format に基づいて バイナリ文字列にパックします。\nこの関数のアイデアは Perl からのものであり、フォーマット指定用の コードは Perl と同様に動作します。しかし、中には存在しない書式コードもあります。 たとえば Perl の &quot;u&quot; は存在しません。\n符号付及び符号無しの区別は関数 unpack() にのみ 影響を与えます。関数 pack() は符号付及び符号無しの フォーマットコードのどちらでも同じ結果となることに注意しましょう。\nPHP は内部的に値をマシン依存の大きさの符号付の integer 値として保持することにも注意してください。 このように保持するには大きすぎる符号無しの値を与えた場合、 float に変換する際にしばしば期待外れの結果となります。
array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )\nparse_ini_file() は、 filename で指定した ini ファイルをロードし、 連想配列としてその設定値を返します。\nini ファイルの構造は、php.ini の構造と同じです。
array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )\nparse_ini_string() は、文字列 ini の設定を連想配列で返します。\n文字列の構造は、php.ini の構造と同じです。
void parse_str ( string $str [, array &$arr ] )\nURL 経由で渡されるクエリ文字列と同様に str を処理し、現在のスコープに変数をセットします。
mixed parse_url ( string $url [, int $component = -1 ] )\nこの関数は、URL の様々な構成要素のうち特定できるものに関して 連想配列にして返します。\nこの関数は、指定された URL が有効かどうかを調べるためのもの ではなく、単に URL を上で示した 要素に分解するだけのものです。不完全な URL であっても受け入れられますし、 そのような場合でも parse_url() は可能な限り 正しく解析しようとします。
array parsekit_compile_file ( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array parsekit_func_arginfo ( mixed $function )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
void passthru ( string $command [, int &$return_var ] )\npassthru()関数はexec()関数と同様、 command を実行します。 引数 return_var を指定した場合、 Unix コマンドのステータスで置換されます。 この関数は Unix コマンドからの出力がバイナリデータであり、 ブラウザーへ直接返す必要がある場合、exec() もしくはsystem()の代わりに使用する必要があります。 よく使うのは、直接画像ストリームを出力することができる pbmplus ユーティリティの様なものを実行する場合です。content-type を image/gif に設定して、gifを出力するpbmplus プログラムを呼び出すことにより、直接画像を出力する PHP スクリプトを作成 することができます。
mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )\npathinfo() は、path に関する情報を有する連想配列を返します。
int pclose ( resource $handle )\npopen() でオープンしたパイプへの ファイルポインタをクローズします。
int pcntl_alarm ( int $seconds )\nプロセスに対して、 指定した秒数後に SIGALRM シグナルを送信するタイマーを作成します。 pcntl_alarm() をコールすると、 それまでに設定されていたアラームはすべて取り消されます。
void pcntl_exec ( string $path [, array $args [, array $envs ]] )\n指定した引数でプログラムを実行します。
int pcntl_fork ( void )\npcntl_fork() 関数は、親プロセスとその PID および PPID のみが異なる子プロセスを生成します。システム上でのフォークの 動作の具体的な詳細については、実行するシステムの fork(2) の マニュアルを参照ください。
int pcntl_getpriority ([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )\npcntl_getpriority() は、pid の優先度を設定します。システムの型やカーネルの バージョンによって優先度の扱いは違うので、詳細についてはシステムの getpriority(2) の man ページを参照ください。
bool pcntl_setpriority ( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )\npcntl_setpriority() は、 pid の優先度を設定します。
bool pcntl_signal_dispatch ( void )\npcntl_signal_dispatch() 関数は、 pcntl_signal() がインストールしたシグナルハンドラを 各ペンディングシグナルに対してコールします。
bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls = true ] )\npcntl_signal() 関数は、signo が指すシグナルに関するハンドラを設定します。
bool pcntl_sigprocmask ( int $how , array $set [, array &$oldset ] )\npcntl_sigprocmask() 関数は、 ブロックされたシグナルを how パラメータに応じて 追加、削除あるいは設定します。
int pcntl_sigtimedwait ( array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]] )\npcntl_sigtimedwait() 関数の挙動は pcntl_sigwaitinfo() とほぼ同じですが、さらに 2 つのパラメータがあります。 seconds および nanoseconds がそれで、 スクリプトが待ち続ける時間の上限をここで設定することができます。
int pcntl_sigwaitinfo ( array $set [, array &$siginfo ] )\npcntl_sigwaitinfo() は、 呼び出し元のスクリプトの実行をいったん停止させ、set で指定したシグナルを受け取るまで待ちます。もしそのシグナルのいずれかがすでにペンディング状態 (pcntl_sigprocmask() でブロックされているなど) の場合、 pcntl_sigwaitinfo() は即時に結果を返します。
int pcntl_wait ( int &$status [, int $options = 0 ] )\nこの関数は、子プロセスが終了する・ カレントのプロセスを終了させるシグナルが送信される・シグナル処理関数を コールするシグナルが送信される のいずれかが発生するまでカレントのプロセスの実行を中断します。 子プロセスが、 コール時に 既に終了している場合(&quot;ゾンビ&quot;プロセスと呼ばれます)、この関数は 直ちに処理を返します。子プロセスにより使用される全てのシステム リソースは、解放されます。waitpid のシステムでの動作に関する詳細は、 システムの wait(2) についての man ページを参照ください。
int pcntl_waitpid ( int $pid , int &$status [, int $options = 0 ] )\n引数 pid で指定した子プロセスが終了する・ 現在のプロセスを終了させるシグナルが送信される・シグナル処理関数を コールするシグナルが送信される のいずれかが発生するまで、現在のプロセスの実行を中断します。\npid でリクエストされた子プロセスが、 コール時に 既に終了している場合(&quot;ゾンビ&quot;プロセスと呼ばれます)、この関数は 直ちに処理を返します。子プロセスにより使用される全てのシステム リソースは、解放されます。waitpid のシステムでの動作に関する詳細は、 システムの waitpid(2) についての man ページを参照ください。
int pcntl_wexitstatus ( int $status )\n終了した子プロセスのリターンコードを返します。この関数は、 pcntl_wifexited() が TRUE を返す場合のみ 有用です。
bool pcntl_wifexited ( int $status )\nステータスコードが正常終了を表しているかどうかを調べます。
bool pcntl_wifsignaled ( int $status )\n子プロセスが終了した原因が、 シグナルが捕捉されなかったことであるかどうかを調べます。 caught.
bool pcntl_wifstopped ( int $status )\nリターンを生じた子プロセスが現在停止しているかどうかを調べます。 この関数は、pcntl_waitpid() のコールが オプション WUNTRACED を用いている場合のみ使用可能です。
int pcntl_wstopsig ( int $status )\n子プロセスを停止させたシグナル番号を返します。この関数は、 pcntl_wifstopped() が TRUE を返す場合のみ有用です。
int pcntl_wtermsig ( int $status )\n子プロセスを終了させたシグナルの数を返します。この関数は、 pcntl_wifsignaled() が TRUE を返す場合のみ有用です。
bool PDF_activate_item ( resource $pdfdoc , int $id )\n事前に作成された構造体要素やその他の内容をアクティブにします。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
この関数は非推奨です。かわりに PDF_create_annotation() を type=Text で使用してください。
この関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_create_bookmark() を使用してください。
bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )\nweb リソースへのリンクを追加します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=Launch として PDF_create_action()、そして type=Link として PDF_create_annotation() を使用してください。
bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )\n現在の PDF ファイルの中にターゲットへのリンク注記を追加します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=GoTo として PDF_create_action()、 そして type=Link として PDF_create_annotation() を使用してください。
bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist )\n現在のドキュメントの任意のページに移動先を作成します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )\n現在のページに注記を追加します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=Text とともに PDF_create_annotation() を使用してください。
この関数は非推奨です。かわりに PDF_create_bookmark() を使用してください。
bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )\nPDF ターゲットにファイルリンク注記を追加します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=GoToR とともに PDF_create_action()、 および type=Link とともに PDF_create_annotation() を使用してください。
int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist )\n新しいテーブル、あるいは既存のテーブルにセルを追加します。
int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist )\nTextflow オブジェクトを作成するか、既存の Textflow にテキストと明示的なオプションを追加します。
bool PDF_add_thumbnail ( resource $pdfdoc , int $image )\n現在のページにサムネイルとして既存のイメージを追加します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )\nWeb 上のターゲット url への Web リンクを追加します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=URI とともに PDF_create_action()、 および type=Link とともに PDF_create_annotation() を使用してください。
bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )\n反時計周りの円弧を追加します。
bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )\n描画の方向以外は、この関数の動作は pdf_arc() とまったく同じです。
bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )\n添付ファイル注記を追加します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに type=FileAttachment とともに PDF_create_annotation() を使用してください。
int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist )\nさまざまなオプションをもとにして、新しい PDF ファイルを作成します。
bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist )\nType 3 フォント定義を開始します。
bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury )\nType 3 フォントのグリフ定義を開始します。
int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist )\nオプションで指定した属性を使用して、 構造体要素あるいはその他の内容をオープンします。
bool PDF_begin_layer ( resource $pdfdoc , int $layer )\nその後のページ出力で使用するレイヤーを開始します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は、PDF 1.5 で使用可能です。
bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist )\nドキュメントに新しいページを追加し、さまざまなオプションを設定します。 パラメータ width および height は、新しいページの大きさをポイント数で指定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\n一般的なページサイズのポイント数   名前 サイズ     A0 2380 x 3368   A1 1684 x 2380   A2 1190 x 1684   A3 842 x 1190   A4 595 x 842   A5 421 x 595   A6 297 x 421   B5 501 x 709   letter (8.5&quot; x 11&quot;) 612 x 792   legal (8.5&quot; x 14&quot;) 612 x 1008   ledger (17&quot; x 11&quot;) 1224 x 792   11&quot; x 17&quot; 792 x 1224
bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )\n新しいページをドキュメントに追加します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_begin_page_ext() を使用してください。
int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )\n新規パターンの定義を開始します。
int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist )\n新規テンプレートの定義を開始します。
int PDF_begin_template ( resource $pdfdoc , float $width , float $height )\n新規テンプレートの定義を開始します。\nこの関数は PDFlib バージョン 7 で廃止されました。 かわりに PDF_begin_template_ext() を使用してください。
bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )\n円を追加します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_clip ( resource $p )\n現在のパスをクリッピングパスとして使用し、パスを終了します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_close_image ( resource $p , int $image )\nPDF_open_image() 関数から取得された image を閉じます。
bool PDF_close_pdi_page ( resource $p , int $page )\nページハンドルを閉じ、そのページに関係する全てのリソースを開放します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_close_pdi ( resource $p , int $doc )\n全てのオープンされたページハンドルをクローズし、PDF ドキュメント入力 (PDI) を閉じます。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 7 で廃止されました。 かわりに PDF_close_pdi_document() を使用してください。
bool PDF_close ( resource $p )\n生成された PDF ファイルを閉じ、ドキュメントの関係する全てのリソースを 開放します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_end_document() を使用してください。
bool PDF_closepath_fill_stroke ( resource $p )\nパスを閉じ、塗りつぶし、輪郭を描きます。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_closepath_stroke ( resource $p )\nパスを閉じ、その輪郭を描きます。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_closepath ( resource $p )\n現在のパスを閉じます。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )\n行列を現在の変換行列 (Current Transformation Matrix: CTM) に追加します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_continue_text ( resource $p , string $text )\n次の行に text を出力します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist )\n3D ビューを作成します。\nこの関数は PDF 1.6 を必要とします。
int PDF_create_action ( resource $pdfdoc , string $type , string $optlist )\nさまざまなオブジェクトやイベントに適用可能なアクションを作成します。
bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist )\n現在のページに矩形の注記を作成します。
int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist )\nさまざまなオプションをもとにしてブックマークを作成します。
bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist )\nさまざまなオプションをもとにして、現在のページ上にフォームフィールドを作成します。
bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist )\nさまざまなオプションをもとにして、 フォームフィールドグループを作成します。
int PDF_create_gstate ( resource $pdfdoc , string $optlist )\nさまざまなオプションをもとにして、画像状態オブジェクトを作成します。
bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist )\nメモリ内のデータから、読み込み専用の仮想ファイルを作成します。
int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist )\n後の書式設定で使用するテキストの前処理を行い、textflow オブジェクトを作成します。
bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\n3 つの制御点を使用して現在の点からベジエ曲線を描画します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist )\n新しいレイヤー定義を作成します。\nこの関数は、PDF 1.5 で使用可能です。
int PDF_delete_pvf ( resource $pdfdoc , string $filename )\n仮想ファイルを削除し、そのデータ構造体を開放します (ファイルの中身は削除しません)。
bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist )\nテーブルおよびそれに関連付けられたすべてのデータ構造を削除します。
bool PDF_delete_textflow ( resource $pdfdoc , int $textflow )\ntextflow および関連付けられたデータ構造体を削除します。
bool PDF_delete ( resource $pdfdoc )\nPDFlib オブジェクトを削除し、内部リソースを全て開放します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv )\nグリフ名や Unicode 値を、カスタムエンコーディングに追加します。
bool PDF_end_document ( resource $pdfdoc , string $optlist )\n作成された PDF ファイルを閉じ、さまざまなオプションを適用します。
bool PDF_end_font ( resource $pdfdoc )\nType 3 フォント定義を終了します。
bool PDF_end_glyph ( resource $pdfdoc )\nType 3 フォントのグリフ定義を終了します。
bool PDF_end_item ( resource $pdfdoc , int $id )\n構造体要素やその他の内容を閉じます。
bool PDF_end_layer ( resource $pdfdoc )\nすべてのアクティブなレイヤーを無効にします。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は、PDF 1.5 で使用可能です。
bool PDF_end_page_ext ( resource $pdfdoc , string $optlist )\nページを終了し、さまざまなオプションを適用します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_end_page ( resource $p )\nページを終了します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_end_pattern ( resource $p )\nパターンの定義を終了します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_end_template ( resource $p )\nテンプレートの定義を終了します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_endpath ( resource $p )\n塗りつぶしや描画を行わず、現在のパスを終了します。
int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist )\n画像ブロックを、そのプロパティに基づいたさまざまなデータで塗りつぶします。\nこの関数は、PDFlib Personalization Server (PPS) でのみ使用可能です。
int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist )\nPDF ブロックを、そのプロパティに基づいたさまざまなデータで塗りつぶします。\nこの関数は、PDFlib Personalization Server (PPS) でのみ使用可能です。
bool PDF_fill_stroke ( resource $p )\n現在のパスの内部を塗りつぶし色で塗りつぶし、輪郭を 輪郭色で描画します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist )\nテキストブロックを、そのプロパティに基づいたさまざまなデータで塗りつぶします。\nこの関数は、PDFlib Personalization Server (PPS) でのみ使用可能です。
bool PDF_fill ( resource $p )\n現在のパスの内部を現在の塗りつぶし色で塗りつぶします。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )\n後で PDF_setfont() で使用するフォントを検索し、 準備します。 このフォントのメトリックがロードされ、embed がゼロでない場合はフォントファイルがチェックされますが、 ロードはまだ行われません。encoding は、 builtin、macroman、 winansi、host、 ユーザ定義のエンコーディング名あるいは CMap の名前のどれかとなります。 パラメータ embed は、PHP 4.3.5 以前あるいは PDFlib バージョン 5 未満ではオプションです。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに PDF_load_font() を使用してください。
bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist )\n画像やテンプレートを、さまざまなオプションに基づいてページ上に配置します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist )\nさまざまなオプションに基づいて、インポートした PDF ページを配置します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist )\nテーブルを、ページ全体あるいは部分的に配置します。
string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist )\ntextflow の次の部分を、矩形領域に配置します。
bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist )\n1 行分のテキストを、さまざまなオプションに基づいてページ上に配置します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
string PDF_get_apiname ( resource $pdfdoc )\n直近で例外を発生させたり失敗したりした API 関数の名前を取得します。
string PDF_get_buffer ( resource $p )\n生成された PDF データを含むバッファの内容を取得します。
string PDF_get_errmsg ( resource $pdfdoc )\n直近で発生した例外のテキストや、関数コールが失敗した理由の テキストを取得します。
int PDF_get_errnum ( resource $pdfdoc )\n直近で発生した例外の番号や、失敗した関数コールの理由を表す番号を取得します。
この関数は PDFlib バージョン 3 で廃止されました。 かわりにパラメータ font を用いて PDF_get_value() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。 かわりにパラメータ fontname を用いて PDF_get_parameter() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。 かわりにパラメータ fontsize を用いて PDF_get_value() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。 かわりにパラメータ imageheight を用いて PDF_get_value() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。 かわりにパラメータ imagewidth を用いて PDF_get_value() を使用してください。
int PDF_get_majorversion ( void )\nこの関数は PDFlib バージョン 5 で廃止されました。 かわりにパラメータ major を用いて PDF_get_value() を使用してください。
int PDF_get_minorversion ( void )\nPDFlib のマイナーバージョン番号を返します。\nこの関数は PDFlib バージョン 5 で廃止されました。 かわりにパラメータ minor を用いて PDF_get_value() を使用してください。
string PDF_get_parameter ( resource $p , string $key , float $modifier )\nいくつかの PDFlib パラメータの内容を文字列として取得します。
string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )\n文字列型の PDI ドキュメントパラメータの内容を取得します。\nこの関数は PDFlib バージョン 7 で廃止されました。 かわりに PDF_pcos_get_string() を使用してください。
float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )\n数値型を有する PDI ドキュメントパラメータの内容を取得します。\nこの関数は PDFlib バージョン 7 で廃止されました。 かわりに PDF_pcos_get_number() を使用してください。
float PDF_get_value ( resource $p , string $key , float $modifier )\nいくつかの PDFlib パラメータを数値型で取得します。
float PDF_info_font ( resource $pdfdoc , int $font , string $keyword , string $optlist )\n読み込まれたフォントについての詳細情報を問い合わせます。
float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword )\n現在のページ上のマッチボックスについての情報を問い合わせます。
float PDF_info_table ( resource $pdfdoc , int $table , string $keyword )\n直近に配置されたテーブルインスタンスについてのテーブルの情報を取得します。
float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword )\ntextflow の現在の状態を問い合わせます。
float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist )\nテキストの行のフォーマットを行い、その結果のメトリクスを問い合わせます。
bool PDF_initgraphics ( resource $p )\n色および描画状態パラメータを全てデフォルト値にリセットします。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_lineto ( resource $p , float $x , float $y )\n現在の点から別の点まで線を描画します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist )\n3D モデルを、ディスク上あるいは仮想ファイルから読み込みます。\nこの関数は PDF 1.6 を必要とします。
int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist )\nフォントを検索し、後に使用するために準備します。
int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist )\nICC プロファイルを検索し、後に使用するために準備します。
int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist )\nさまざまなオプションをもとに、 ディスク上の画像ファイルや仮想画像ファイルをオープンします。
int PDF_makespotcolor ( resource $p , string $spotname )\n組み込みのスポット色名を検索するか、 現在の塗りつぶし色から名前付きのスポット色を作成します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_moveto ( resource $p , float $x , float $y )\n描画出力のための現在の点を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
resource PDF_new ( void )\n新規に PDFlib オブジェクトを作成します。
int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )\nraw CCITT イメージをオープンします。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに PDF_load_image() を使用してください。
bool PDF_open_file ( resource $p , string $filename )\n新規の PDF ファイルを指定したファイル名で作成します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_begin_document() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_load_image() を使用してください。
int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )\nイメージファイルをオープンします。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに colorize、ignoremask、invert、mask、masked および page を指定して PDF_load_image() を使用してください。
int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )\nさまざまなデータソースからのイメージデータを使用します。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに 仮想ファイルおよび PDF_load_image() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_load_image() を使用してください。
int PDF_open_memory_image ( resource $p , resource $image )\nこの関数は PDFlib GmbH でサポートされていません。
int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )\nPDF_fit_pdi_image() で後で使用するようにページを準備します。
int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )\n後で使用するため、ディスクベースかあるいは仮想 PDF ドキュメントをオープンします。\nこの関数は PDFlib バージョン 7 で廃止されました。 かわりに PDF_open_pdi_document() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_load_image() を使用してください。
float PDF_pcos_get_number ( resource $p , int $doc , string $path )\nnumber あるいは boolean 型の pCOS パスの値を取得します。
string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path )\nstream、fstream あるいは string 型の pCOS パスの内容を取得します。
string PDF_pcos_get_string ( resource $p , int $doc , string $path )\nname, string あるいは boolean 型の pCOS パスの値を取得します。
bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )\nイメージを置き、サイズを変更します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに PDF_fit_image() を使用してください。
bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )\nPDI ページを配置し、サイズを変更します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 5 で廃止されました。かわりに PDF_fit_pdi_page() を使用してください。
int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist )\nインポートされた PDF ドキュメントの要素を処理します。
bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )\n矩形を描画します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_restore ( resource $p )\n直近に保存された描画状態を復元します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_resume_page ( resource $pdfdoc , string $optlist )\nページを再開し、さらに内容を追加します。
bool PDF_rotate ( resource $p , float $phi )\n座標系を回転します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_save ( resource $p )\n現在の描画状態を保存します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_scale ( resource $p , float $sx , float $sy )\n座表系のスケールを設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )\n全ての種類の注記の境界色を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_create_annotation() でオプション annotcolor を使用してください。
bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )\n全ての種類の注記の境界の破線形式を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_create_annotation() でオプション dasharray を使用してください。
bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )\n全ての種類の注記の境界の形式を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに PDF_create_annotation() でオプション borderstyle および linewidth を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() でパラメータ charspacing を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに duration オプションを PDF_begin_page_ext() あるいは PDF_end_page_ext() で使用してください。
bool PDF_set_gstate ( resource $pdfdoc , int $gstate )\n画像状態オブジェクトをアクティブにします。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() でパラメータ horizscaling を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_info() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_info() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_info() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_info() を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_info() を使用してください。
bool PDF_set_info ( resource $p , string $key , string $value )\nドキュメント情報フィールド key に value を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist )\nレイヤー間の階層やグループ関係を定義します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は、PDF 1.5 で使用可能です。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() で パラメータ leading を使用してください。
bool PDF_set_parameter ( resource $p , string $key , string $value )\nPDFlib パラメータを文字列型で設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
PDFlib バージョン 3 以降、この関数は非推奨です。かわりに PDF_scale()、PDF_translate()、 PDF_rotate() あるいは PDF_skew() を使用してください。
bool PDF_set_text_pos ( resource $p , float $x , float $y )\nテキストの出力位置を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() でパラメータ textrendering を使用してください。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() でパラメータ textrise を使用してください。
bool PDF_set_value ( resource $p , string $key , float $value )\nPDFlib パラメータの値を数値型で設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
この関数は PDFlib バージョン 3 で廃止されました。かわりに PDF_set_value() でパラメータ wordspacing を使用してください。
bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )\n現在の色空間と色を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setdash ( resource $pdfdoc , float $b , float $w )\n現在のダッシュパターンを黒 b および白 w 単位で設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setdashpattern ( resource $pdfdoc , string $optlist )\nオプションリストで定義した破線パターンを設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setflat ( resource $pdfdoc , float $flatness )\n平面度を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )\nPDF_findfont() から返された font ハンドルを使用し、指定した size で現在のフォントを設定します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setgray_fill ( resource $p , float $g )\n現在の塗りつぶし色を 0 から 1 までのグレー値に設定します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
bool PDF_setgray_stroke ( resource $p , float $g )\n現在の輪郭描画色を 0 から 1 までのグレー値に設定します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
bool PDF_setgray ( resource $p , float $g )\n現在の塗りつぶしおよび輪郭描画色を 0 から 1 までのグレー値に設定します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
bool PDF_setlinecap ( resource $p , int $linecap )\nlinecap を設定し、 ストロークを考慮したうえでパスの終端の形状を制御します。
bool PDF_setlinejoin ( resource $p , int $value )\nlinejoin パラメータを設定し、 パスを描画する際の角の形状を指定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setlinewidth ( resource $p , float $width )\n現在の線幅を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )\n現在の変換行列を明示的に設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )\nmiter limit を設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
この関数は PDFlib バージョン 5 で廃止されました。かわりに PDF_setdashpattern() を使用してください。
bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )\n現在の塗りつぶし色を指定した RGB 値に設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )\n現在の輪郭色を指定した RGB 値に設定します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )\n現在の塗りつぶし色と輪郭色を指定した RGB 値に設定します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。\nこの関数は PDFlib バージョン 4 で廃止されました。かわりに PDF_setcolor() を使用してください。
int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist )\nシェーディングオブジェクトを使用して、シェーディングパターンを定義します。\nこの関数は、PDF 1.4 以降で使用可能です。
int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )\n現在の塗りつぶし色と他の色との混色を定義します。\nこの関数は、PDF 1.4 以降で使用可能です。
bool PDF_shfill ( resource $pdfdoc , int $shading )\nシェーディングオブジェクトに基づいたシェーディングで、 領域を塗りつぶします。\nこの関数は、PDF 1.4 以降で使用可能です。
int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )\nこの関数は PDFlib バージョン 6 で廃止されました。かわりに 単一行の場合は PDF_fit_textline()、 複数行の場合は PDF_*_textflow() 関数を 使用してください。
bool PDF_show_xy ( resource $p , string $text , float $x , float $y )\n現在のフォントで text を出力します。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_show ( resource $pdfdoc , string $text )\n現在の位置に現在のフォントとサイズで text を出力します。成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_skew ( resource $p , float $alpha , float $beta )\n座標系を x 方向および y 方向に それぞれ alpha 度、beta 度歪ませます。成功した場合に TRUE を、失敗した場合に FALSE を返します。
float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )\n任意のフォントにおける text の幅を返します。
bool PDF_stroke ( resource $p )\n現在の色および線幅でパスの輪郭を描画し、パスをクリアします。 成功した場合に TRUE を、失敗した場合に FALSE を返します。
bool PDF_suspend_page ( resource $pdfdoc , string $optlist )\n現在のページを一時停止します。後で PDF_resume_page() で再開することが可能です。
bool PDF_translate ( resource $p , float $tx , float $ty )\n座標系の原点を変更します。
string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string )\n文字列を UTF-16 フォーマットから UTF-8 に変換します。
string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering )\n文字列を UTF-32 フォーマットから UTF-16 に変換します。
string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering )\n文字列を UTF-8 フォーマットから UTF-16 に変換します。
string PDO::pgsqlLOBCreate ( void )\nPDO::pgsqlLOBCreate() は、 ラージオブジェクトを作成してその OID を返します。 このオブジェクトに対するデータの読み書きを行う際には、 PDO::pgsqlLOBOpen() を使用してストリームをオープンします。 OID は OID 型のカラムに格納され、ラージオブジェクトを参照するために使用されます。 これにより、行のサイズがどんどん拡大してしまうことを防ぎます。 PDO::pgsqlLOBUnlink() をコールして削除するまで、 ラージオブジェクトはデータベース内に残り続けます。\nラージオブジェクトの大きさは最大 2GB まで拡大できますが、扱い方はめんどうです。 オブジェクトの OID を参照している行をデータベースから削除する際には、 必ず事前に PDO::pgsqlLOBUnlink() がコールされていなければなりません。 さらに、ラージオブジェクトにはアクセス権の設定がありません。 ラージオブジェクトの代替策として、bytea 型のカラムも検討ください。 最近のバージョンの PostgreSQL では bytea 型のカラムに最大 1GB まで保存でき、行サイズを最適化したうえでデータを透過的に扱うことができます。
resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = &quot;rb&quot; ] )\nPDO::pgsqlLOBOpen() は、oid が指すデータにアクセスするためのストリームをオープンします。 mode が r の場合、 ストリームは読み込み用にオープンされます。 mode が w の場合、 ストリームは書き込み用にオープンされます。 fread()、fwrite() および fgets() のような通常のファイルシステム関数を使用して、 ストリームの内容を操作することができます。
bool PDO::pgsqlLOBUnlink ( string $oid )\nOID が指すラージオブジェクトをデータベースから削除します。
PDO\nbool sqliteCreateAggregate ( string $function_name , callback $step_func , callback $finalize_func [, int $num_args ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのメソッドは PDO::sqliteCreateFunction と似ていますが、 この関数で登録した関数は、クエリのすべての行の内容を集約する関数を登録します。\nこの関数と PDO::sqliteCreateFunction の最大の違いは、 集約関数を作成するためには 2 つの関数が必要であるということです。
PDO\nbool sqliteCreateFunction ( string $function_name , callback $callback [, int $num_args ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのメソッドを使用すると、 PHP の関数を、UDF (User Defined Function: ユーザ定義関数) として SQLite に登録できるようになります。 登録した関数は、SQL 文の中で使用することが可能です。\nUDF は、関数をコールできるあらゆる SQL 文 (SELECT および UPDATE 文、そしてトリガなど) で使用することが可能です。
resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]] )\nこの関数は、fsockopen() と全く同様に動作します。 ただし、この関数による接続はリクエストが終了した後でも閉じられないという違いがあります。 この関数は、fsockopen() の持続的接続版です。
int pg_affected_rows ( resource $result )\npg_affected_rows() は、INSERT, UPDATE, DELETE クエリにより変更されたタプル(インスタンス/レコード/行)の数を 返します。
bool pg_cancel_query ( resource $connection )\npg_cancel_query() は、 pg_send_query()・pg_send_query_params() あるいは pg_send_execute() により送信された非同期クエリを キャンセルします。pg_query() により実行されたクエリを キャンセルすることはできません。
string pg_client_encoding ([ resource $connection ] )\nPostgreSQL は、ある種の文字セットについてはサーバとクライアントの間の 自動文字コード変換をサポートしています。 pg_client_encoding() は、クライアントの エンコーディングを文字列として返します。返される値は、標準の PostgreSQL エンコーディング識別子のなかのひとつとなります。
bool pg_close ([ resource $connection ] )\npg_close() は、 connection リソースで指定した PostgreSQL データベースへの持続的でない接続を閉じます。
resource pg_connect ( string $connection_string [, int $connect_type ] )\npg_connect() は、connection_string で指定された情報を用いてデータベースとの接続をオープンします。\n同じ connection_string 引数で 2 回 pg_connect() 関数がコールされた場合は、 connect_type に PGSQL_CONNECT_FORCE_NEW を指定していない限り 既存の接続が返されます。\n複数のパラメータをサポートする古い構文 $conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)  は推奨されません。
bool pg_connection_busy ( resource $connection )\npg_connection_busy() は、接続がビジーかどうかを調べます。 接続がビジーである場合、以前のクエリがまだ実行中です。 もしこの接続に pg_get_result() がコールされた場合、 それはブロックされます。
bool pg_connection_reset ( resource $connection )\npg_connection_reset() は接続をリセットします。 エラーからの復旧の際に有用です。
int pg_connection_status ( resource $connection )\npg_connection_status() は、 connection で指定した接続のステータスを返します。
array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ] )\npg_convert() は、assoc_array の中の値をチェックし、SQL 文の中で使用可能な形式に変換します。 少なくとも assoc_array の要素数以上のカラムを持つ テーブル table_name が存在することが前提条件と なります。assoc_array の要素名が table_name のフィールド名と一致し、また 要素に対応する値はフィールドのデータ型と互換性がなければなりません。 成功した場合に変換後の値の配列、それ以外の場合に FALSE を返します。
bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )\npg_copy_from() は、rows の内容をテーブルに挿入します。レコードを挿入するために、内部では COPY FROM SQL コマンドを発行します。
array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )\npg_copy_to() は、テーブルを配列にコピーします。 レコードを取得するために、内部では COPY TO SQL コマンドを発行します。
string pg_dbname ([ resource $connection ] )\npg_dbname() は、 PostgreSQL connection リソースで指定した データベースの名前を返します。
mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )\npg_delete() は、assoc_array で指定したキーと値を用いてテーブルからレコードを削除します。 options が指定された場合、指定したオプションを つけて pg_convert() が assoc_array に適用されます。
bool pg_end_copy ([ resource $connection ] )\npg_end_copy() は、pg_put_line() によるコピー操作の後で PostgreSQL フロントエンド（通常は Web サーバ プロセス）と PostgreSQL サーバを同期させます。 pg_end_copy() を実行しなければ、PostgreSQL サーバが フロントエンドとの同期を失ってしまい、エラーが発生します。
string pg_escape_bytea ([ resource $connection ], string $data )\npg_escape_bytea() は、bytea 型のために文字列を エスケープし、エスケープした文字列を返します。
string pg_escape_string ([ resource $connection ], string $data )\npg_escape_string() は、データベースに挿入するための 文字列をエスケープします。PostgreSQL フォーマットにエスケープされた 文字列を返します。addslashes() の代わりにこの関数を 使用することを推奨します。カラム型が bytea の場合は、代わりに pg_escape_bytea() を使用しなければなりません。
resource pg_execute ([ resource $connection ], string $stmtname , array $params )\n指定したパラメータを用いてプリペアドステートメントを実行するリクエストを 送信し、その結果を待ちます。\npg_execute() は pg_query_params() と似ています。しかし、実行するコマンドはクエリを指定することで 決まるのではなく、事前に準備されたステートメントに値を指定する ことによって決まります。この機能のおかげで、繰り返し使用される コマンドに構文解析や実行計画作成が最初の一度だけで済みます。 実行するステートメントは、カレントのセッションで事前に準備しておく 必要があります。pg_execute() は、PostgreSQL 7.4 以降のバージョンの接続にのみ対応しています。それ以前のバージョンでは 失敗します。\nパラメータは pg_query_params() と同じですが、 クエリ文字列のかわりにプリペアドステートメントの名前を指定する という点だけが違います。
array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )\npg_fetch_all_columns() は、結果リソースの 指定したカラムについて全ての行（レコード）を含む配列を返します。
array pg_fetch_all ( resource $result )\npg_fetch_all()は、結果リソースのすべての行 （レコード）を保持する配列を返します。
array pg_fetch_array ( resource $result [, int $row [, int $result_type ]] )\npg_fetch_array() は、取得した行（レコード）を 配列で返します。\npg_fetch_array() は拡張版の pg_fetch_row() です。結果配列のフィールド番号に 対応する要素にデータを格納し、それに加えてフィールド名をキーとした 連想配列にも格納します。デフォルトで、両方ともが有効になっています。
array pg_fetch_assoc ( resource $result [, int $row ] )\npg_fetch_assoc() は、取得した行（レコード）を 保持する連想配列を返します。\npg_fetch_assoc() は、オプションの第 3 パラメータに PGSQL_ASSOC を指定して pg_fetch_array() をコールするのと同じです。連想配列のみを返します。もし数値添字の配列が 必要な場合は pg_fetch_row() を使用してください。
object pg_fetch_object ( resource $result [, int $row [, int $result_type ]] )\nobject pg_fetch_object ( resource $result [, int $row [, string $class_name [, array $params ]]] )\npg_fetch_object() は、取得した行のフィールド名に 対応するプロパティを有するオブジェクトを返します。オプションとして、 指定したクラスのコンストラクタにパラメータを渡してインスタンス化する ことも可能です。
string pg_fetch_result ( resource $result , int $row , mixed $field )\nstring pg_fetch_result ( resource $result , mixed $field )\npg_fetch_result() は、PostgreSQL 結果リソースから 特定の行とフィールド（カラム）の値を返します。
array pg_fetch_row ( resource $result [, int $row ] )\npg_fetch_row() は、指定した result リソースが指す結果から 1 行分のデータを取得します。
int pg_field_is_null ( resource $result , int $row , mixed $field )\nint pg_field_is_null ( resource $result , mixed $field )\npg_field_is_null() は、PostgreSQL 結果リソースの フィールドが SQL の NULL であるかどうかを調べます。
string pg_field_name ( resource $result , int $field_number )\npg_field_name() は、指定した PostgreSQL result リソースの指定した field_number にあるフィールドの名前を 返します。フィールド番号は 0 から始まります。
int pg_field_num ( resource $result , string $field_name )\npg_field_num() は、指定した PostgreSQL の 結果リソース(result )において field_name に相当するカラム(フィールド) のフィールド番号を返します。
int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )\nint pg_field_prtlen ( resource $result , mixed $field_name_or_number )\npg_field_prtlen() は、PostgreSQL の result の指定した値に関して、実際に 表示した場合の長さ(文字の数)を返します。行番号(row_number)は 0 から始まります。この関数は、エラーの場合に-1を返します。\nfield_name_or_number は、integer または string のどちらかで渡すことが可能です。 integer で渡された場合、PHP はそれをフィールド番号と判断 します。それ以外の場合はフィールド名と判断します。\npg_field_name() ページの例を参照ください。
int pg_field_size ( resource $result , int $field_number )\npg_field_size() は、指定した PostgreSQL の 結果において、指定したフィールド番号の内部記憶領域のサイズを (バイト数で)返します。
mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only = false ] )\npg_field_table() は、フィールドが属するテーブルの名前か あるいは oid_only が TRUE の場合にテーブルの oid を返します。
int pg_field_type_oid ( resource $result , int $field_number )\npg_field_type_oid() は、指定した PostgreSQL result リソースにおける指定した field_number の型の OID を返します。\nフィールド型についての詳細な情報を得るには、PostgreSQL のシステムテーブル pg_type に対して、この関数で取得した OID を用いて 問い合わせます。PostgreSQL の format_type() 関数は、 型の OID を SQL の型名に変換します。
string pg_field_type ( resource $result , int $field_number )\npg_field_type() は、指定した PostgreSQL の result リソースにおいて、指定した field_number の型名を保持する文字列を 返します。
bool pg_free_result ( resource $result )\npg_free_result() は、指定された PostgreSQL クエリ 結果 resource に関するメモリとデータを開放します。\nこの関数は、スクリプト実行中のメモリ使用量を抑制したい場合にのみ コールする必要があります。それ以外の場合は、すべての結果保持用 メモリは、スクリプトが終了する際に自動的に開放されます。
array pg_get_notify ( resource $connection [, int $result_type ] )\npg_get_notify()は、NOTIFY SQL コマンドにより送信された通知メッセージを取得します。 通知メッセージを取得するには、LISTEN SQL コマンドを発行する必要があります。
int pg_get_pid ( resource $connection )\npg_get_pid() は、バックエンド(データベースサーバ のプロセス)のプロセス ID を取得します。プロセス ID は、 NOTIFY メッセージが他のプロセスから送信されている かどうかを調べるために有用です。
resource pg_get_result ([ resource $connection ] )\npg_get_result() は、 pg_send_query()・pg_send_query_params() あるいは pg_send_execute() で実行した非同期クエリから結果リソースを取得します。\npg_send_query() およびその他の非同期クエリ関数は、 複数のクエリを PostgreSQL サーバに送信することが可能です。クエリの結果を ひとつずつ取得するには、pg_get_result() を使用します。
string pg_host ([ resource $connection ] )\npg_host() は、指定した PostgreSQL connection リソースが接続しているホストの 名前を返します。
mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )\npg_insert() は、 table_name で指定したテーブルに assoc_array の値をを挿入します。 options が指定されている場合、そのオプションと ともに pg_convert() が assoc_array に適用されます。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
string pg_last_error ([ resource $connection ] )\npg_last_error() は、指定した connection から直近のエラーメッセージを返します。\nエラーメッセージは、内部的な PostgreSQL(libpq) 関数コールにより 上書きされる可能性があります。PostgreSQL モジュール関数の中で複数の エラーが発生した場合には、この関数は適切なエラーメッセージを返さない 可能性があります。\nエラー処理を改善するために pg_result_error()、pg_result_error_field()、 pg_result_status() および pg_connection_status() を使用ください。
string pg_last_notice ( resource $connection )\npg_last_notice() は、connection で指定した PostgreSQL サーバからの直近の通知メッセージを返します。 たとえば、テーブルに SERIAL カラムを作成する場合などに PostgreSQL サーバは通知メッセージを送信します。\npg_last_notice() でトランザクションに関連する通知 メッセージがあるかないかをチェックすることで、無意味なクエリの発行を 避けることが可能です。\nphp.ini で pgsql.ignore_notice に 1 を指定することで、通知メッセージの追跡をしないようにすることが可能です。\nphp.ini で pgsql.log_notice に 0 を指定することで、通知メッセージをログに記録しないようにすることが可能です。 pgsql.ignore_notice が 0 に設定されていない限り、 通知メッセージをログに記録することはできません。
string pg_last_oid ( resource $result )\npg_last_oid() は、挿入された行に割り当てられた OID を取得します。\nOID フィールドは PostgreSQL 7.2 からはオプションとなり、 PostgreSQL 8.1 ではデフォルトで存在しません。OID フィールドが テーブルに存在しない場合、プログラマは pg_result_status() を使用して挿入が成功したことを 確かめる必要があります。\n挿入された行の SERIAL フィールドの値を取得するには、 PostgreSQL の CURRVAL 関数を使用してシーケンス内で 直近に要求された値を取得する必要があります。シーケンス名がわからない 場合は、PostgreSQL 8.0 の関数 pg_get_serial_sequence が必要になります。\nPostgreSQL 8.1 には LASTVAL 関数が存在し、セッション内で 直近に使用されたシーケンスの値を返します。これを用いれば、シーケンスや テーブルやカラムの名前を指定する必要がなくなります。
bool pg_lo_close ( resource $large_object )\npg_lo_close() はラージオブジェクトをクローズします。 large_object は、pg_lo_open() でオープンされたラージオブジェクトのリソースです。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
int pg_lo_create ([ resource $connection [, mixed $object_id ]] )\nint pg_lo_create ( mixed $object_id )\npg_lo_create() はラージオブジェクトを 生成し、そのラージオブジェクトの OID を返します。 PostgreSQL アクセスモード INV_READ、INV_WRITE および INV_ARCHIVE はサポートされません。オブジェクトは 常に読み書き可のアクセス権で生成されます。 INV_ARCHIVE は PostgreSQL 自身からも削除されました （バージョン 6.3 以降）。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。\nラージオブジェクトインターフェース（アクセス制御もできないし使用が面倒） を使用するかわりに、PostgreSQL の bytea カラム型と pg_escape_bytea() を試してください。
bool pg_lo_export ([ resource $connection ], int $oid , string $pathname )\npg_lo_export() は PostgreSQL データベースから ラージオブジェクトを取得し、その内容をローカルファイルシステム上の ファイルに保存します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
int pg_lo_import ([ resource $connection ], string $pathname , mixed $object_id )\npg_lo_import() は、ファイルシステム上のファイルの データをもとにして新しいラージオブジェクトをデータベース内に作成します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
resource pg_lo_open ( resource $connection , int $oid , string $mode )\npg_lo_open() はデータベース内にラージオブジェクトを オープンし、それを操作するためのラージオブジェクトリソースを返します。\n警告\nラージオブジェクトのリソースを閉じる前にデータベースへの接続を 閉じないでください。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
int pg_lo_read_all ( resource $large_object )\npg_lo_read_all() は、ラージオブジェクトを読み込み 未送信のヘッダを全て送信した後、ブラウザに直接ラージオブジェクトを 送信します。これは主に、イメージや音などのバイナリデータを送信するために 使用します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
string pg_lo_read ( resource $large_object [, int $len ] )\npg_lo_read()は、ラージオブジェクトから最大 len バイト分読み込み、文字列として返します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
bool pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] )\npg_lo_seek() はラージオブジェクトリソースの位置を シークします。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
int pg_lo_tell ( resource $large_object )\npg_lo_tell() は、ラージオブジェクトのカレントの位置 （先頭からのオフセット）を返します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
bool pg_lo_unlink ( resource $connection , int $oid )\npg_lo_unlink()は、oid で 関連付けられたラージオブジェクトを削除します。成功した場合に TRUE を、失敗した場合に FALSE を返します。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
int pg_lo_write ( resource $large_object , string $data [, int $len ] )\npg_lo_write() は、ラージオブジェクトの カレントのシーク位置にデータを書き込みます。\nラージオブジェクトインターフェースは、トランザクションブロックの中で 使用する必要があります。
array pg_meta_data ( resource $connection , string $table_name )\npg_meta_data() は、table_name のテーブル定義を配列として返します。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
int pg_num_fields ( resource $result )\npg_num_fields() は、PostgreSQL 結果リソースから フィールド（カラム）の数を返します。
int pg_num_rows ( resource $result )\npg_num_rows() は、PostgreSQL の結果リソースの 行数を返します。
string pg_options ([ resource $connection ] )\npg_options() は、指定した PostgreSQL connection リソースの オプションを保持する文字列を返します。
string pg_parameter_status ([ resource $connection ], string $param_name )\nサーバのパラメータ設定を検索します。\nいくつかのパラメータについては、接続の確立時や値の変更時にサーバから 自動的に通知されます。pg_parameter_status() は これらの設定問い合わせるために使用可能です。指定したパラメータが存在する 場合にその値を、存在しない場合に FALSE を返します。\nPostgreSQL 8.0 で指定できるパラメータには以下が含まれます。 server_version、 server_encoding、client_encoding、 is_superuser、session_authorization、 DateStyle、TimeZone および integer_datetimes （server_encoding、TimeZone および integer_datetimes は 8.0 より前のバージョンでは指定できません）。 server_version、server_encoding および integer_datetimes は、PostgreSQL の稼動中には変更できないことに注意しましょう。\nPostgreSQL 7.3 以前のサーバはパラメータ設定を通知する機能を持っていません。 しかし、pg_parameter_status() には server_version および client_encoding を取得する機能を組み込んでいます。これらの値を取得するためにアプリケーションで アドホックなコードを書くのではなく、pg_parameter_status() を使用することを推奨します。\n警告\n7.4 より前の PostgreSQL サーバでは、接続の確立後に SET を用いて client_encoding を変更しても pg_parameter_status() には反映されません。
resource pg_pconnect ( string $connection_string [, int $connect_type ] )\npg_pconnect() は PostgreSQL への接続を オープンします。この関数は、他の PostgreSQL関数 が必要とする 接続リソースを返します。\n既存の接続と同じ connection_string を用いて pg_pconnect() が 2 回目にコールされた場合は、 既存の接続を返します。ただし、connect_type に PGSQL_CONNECT_FORCE_NEW を指定している場合は 除きます。\n持続的接続を有効にするには、php.ini のディレクティブ pgsql.allow_persistent を &quot;On&quot; に設定する必要があります（デフォルトは On です）。 持続的接続の最大数は php.ini ディレクティブ pgsql.max_persistent で設定可能です（デフォルトは制限無しを意味する -1 です）。 接続全体の数は php.ini ディレクティブ pgsql.max_links で設定可能です。\npg_close() は、 pg_pconnect() によりオープンされた持続的接続は 閉じません。
bool pg_ping ([ resource $connection ] )\npg_ping() はデータベース接続を調べ、その接続が 壊れている場合には再度接続を試みます。
int pg_port ([ resource $connection ] )\npg_port() は、指定した PostgreSQL connection リソースが接続している ポートの番号を返します。
resource pg_prepare ([ resource $connection ], string $stmtname , string $query )\npg_prepare() は、 pg_execute() あるいは pg_send_execute() で後に実行するためのプリペアドステートメントを作成します。これにより、 繰り返し使用されるコマンドについての構文解析や実行計画作成が最初の 一度だけですみます。pg_prepare() は PostgreSQL 7.4 以降の接続でのみ使用可能です。それ以前のバージョンでは失敗します。\nこの関数は stmtname という名前の プリペアドステートメントを query 文字列から作成します。 この文字列には 1 つの SQL コマンドが含まれている必要があります。 stmtname を &quot;&quot; にすることで無名ステートメントを 作成することが可能で、既存の無名ステートメントは自動的に上書きされます。 それ以外の場合、もしカレントのセッションで既に定義済みのステートメント名を 使用した場合にはエラーとなります。パラメータを使用する際は、 query 内で $1、$2 のような形式で参照されます。\npg_prepare() で使用するプリペアドステートメントは、 SQLの PREPARE 文を実行することでも作成可能です （しかし、パラメータの型を事前に指定する必要がないという点で pg_prepare() のほうがより柔軟です）。 また、PHP にはプリペアドステートメントを削除する関数がありませんが、 この目的のためには SQLの DEALLOCATE 文が使用可能です。
bool pg_put_line ([ resource $connection ], string $data )\npg_put_line() は、NULL で終わる文字列を PostgreSQL バックエンドサーバに送信します。これは、PostgreSQL の COPY FROM コマンドとともに使用する場合に必要となります。\nCOPY は、PostgreSQL によってサポートされている 高速なデータ読み込みインターフェースです。データの内容はパースされず、 一度のトランザクションで実行されます。\n低レベルな pg_put_line() コマンドを用いない別の方法は、 pg_copy_from() を使用することです。これは、はるかに シンプルなインターフェースです。
resource pg_query_params ([ resource $connection ], string $query , array $params )\nコマンドをサーバに送信し、その結果を待ちます。パラメータを SQL コマンド とは別に渡すことが可能です。\npg_query_params() は pg_query() と似ていますが、追加の機能を有しています。それはパラメータ値が コマンド文字列と分離しているということです。 pg_query_params() は PostgreSQL 7.4 以降の接続でのみ サポートされます。それ以前のバージョンでは失敗します。\nパラメータを使用する際は、query 文字列内で $1、$2 のように参照されます。params で 実際の値を指定します。NULL を指定すると、SQL の NULL とみなされます。\npg_query() に対する pg_query_params() の最大の利点は、パラメータの値を query 文字列から 分離できることです。そのため、退屈でエラーの元となりやすいクォート・ エスケープなどをしなくてもよくなります。pg_query() と異なり、pg_query_params() ではひとつの SQL コマンドしか実行できません（クエリ文字列にセミコロンを含めることは 可能です。しかしそれ以降にコマンドを続けることはできません）。
resource pg_query ([ resource $connection ], string $query )\npg_query() 指定したデータベース connection 上で query を実行します。\nエラーが発生して FALSE が返された場合、もし接続が正常なら pg_last_error() 関数を使用してエラーの詳細情報が 取得可能です。
string pg_result_error_field ( resource $result , int $fieldcode )\npg_result_error_field() は、result リソースに関するエラーメッセージの特定のフィールドを返します。 PostgreSQL 7.4 以降のサーバでのみ有効です。エラーフィールドは fieldcode で定義します。\npg_query() や pg_query_params() はクエリが失敗した場合に FALSE を返すので、結果のハンドルを得るには pg_send_query() および pg_get_result() を使用する必要があります。\n失敗した pg_query() クエリから詳細なエラー情報を 取得する必要がある場合は、pg_set_error_verbosity() および pg_last_error() を使用してその結果をパース します。
string pg_result_error ( resource $result )\npg_result_error() は、結果リソース (result )に関連したエラーメッセージを返します。 このため、ユーザーが pg_last_error() よりも適切な エラーメッセージを得る可能性があります。\npg_result_error_field() は、 pg_result_error() よりもさらに詳細なエラー情報を 返します。\npg_query() はクエリが失敗した場合に FALSE を返すので、 結果ハンドルを取得するには pg_send_query() および pg_get_result() を使用する必要があります。
bool pg_result_seek ( resource $result , int $offset )\npg_result_seek()は、結果リソースの行の位置を 指定された offset にセットします。
mixed pg_result_status ( resource $result [, int $type ] )\npg_result_status() は、結果リソースのステータス あるいは結果に関するコマンド補完タグを返します。
mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )\npg_select() は、field=>value 形式の assoc_array で指定したレコードを選択します。 クエリに成功した場合、assoc_array で指定した条件に マッチする全てのレコードとフィールドを含む配列が返されます。\noptions が指定された場合、 指定したフラグとともに pg_convert() が assoc_array に適用されます。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool pg_send_execute ( resource $connection , string $stmtname , array $params )\n指定したパラメータでプリペアドステートメントを実行するリクエストを 送信し、その結果を待ちません。\nこれは pg_send_query_params() と似ています。 しかし、実行するコマンドは指定したクエリ文字列で決まるのではなく 事前に準備されたステートメントの名前で決まります。関数のパラメータは pg_execute() と同じように処理されます。 pg_execute() と同様に、7.4 より前のバージョンの PostgreSQL では動作しません。
bool pg_send_prepare ( resource $connection , string $stmtname , string $query )\n指定したパラメータでプリペアドステートメントを作成するリクエストを 送信し、その結果を待ちません。\nこれは pg_prepare() の非同期バージョンです。 リクエストが受け付けられた場合に TRUE 、そうでない場合に FALSE を返します。コールが成功した後、実際にプリペアドステートメントが 作成されたかどうかを調べるには pg_get_result() を使用します。関数のパラメータは pg_prepare() と同じように処理されます。pg_prepare() と同様、 7.4 より前の PostgreSQL のバージョンでは正しく動作しません。
bool pg_send_query_params ( resource $connection , string $query , array $params )\nコマンドとパラメータを分割してサーバに送信します。その結果を待つことは しません。\nこれは pg_send_query() とほぼ同じですが、パラメータが query とは別に分かれている点が違います。 関数のパラメータは、pg_query_params() によって 完全に制御されます。pg_query_params() と同様、 7.4 より前の PostgreSQL では動作しません。またクエリ文字列には ひとつのコマンドのみを含めることができます。
bool pg_send_query ( resource $connection , string $query )\npg_send_query() は、connection に非同期クエリを送信します。pg_query() とは異なり、 PostgreSQL へ一度に複数のクエリを送信することができ、 pg_get_result() を用いて結果を一つずつ取得することが可能です。\nスクリプトの実行は、クエリを実行中もブロックされません。 接続がビジーである(すなわち、クエリが実行中である)ことを調べるには、 pg_connection_busy() を使用してください。 クエリは、pg_cancel_query() をコールすることによりキャンセルすることが可能です。\nユーザは複数のクエリを一度に送信することができますが、 複数のクエリをビジー状態の接続に送信することはできません。 クエリがビジー状態の接続に送信された場合、 最後のクエリが終了するまで待ち、全ての結果は破棄されます。
int pg_set_client_encoding ([ resource $connection ], string $encoding )\npg_set_client_encoding() はクライアントの エンコーディングを設定し、成功した場合に 0、エラー時に -1 を 返します。\nPostgreSQL は、バックエンドのデータベースエンコーディングを自動的に フロントエンドのエンコーディングに変換します。
int pg_set_error_verbosity ([ resource $connection ], int $verbosity )\npg_last_error() および pg_result_error() が返すメッセージの詳細度を指定します。\npg_set_error_verbosity() は詳細度を設定し、その接続の これまでの設定を返します。PGSQL_ERRORS_TERSE モードでは、返されるメッセージは深刻度・概要 および 発生位置のみです。 これはたいていの場合 1 行に収まります。デフォルトのモード （PGSQL_ERRORS_DEFAULT）では、それに加えて何らかの 詳細情報・ヒントあるいは状況フィールドを含みます（これらは複数行に またがる可能性があります）。PGSQL_ERRORS_VERBOSE モードは、有効なフィールドをすべて含みます。詳細度の設定変更内容は それ以降に新しく作成した結果オブジェクトにのみ反映され、既存の 結果オブジェクトには影響を与えません。
bool pg_trace ( string $pathname [, string $mode = &quot;w&quot; [, resource $connection ]] )\npg_trace() は、PostgreSQL フロントエンド/ バックエンド間の通信をデバック用のファイルにトレースすることを有効にします。 このトレース結果を完全に理解するためには、PostgreSQL 通信プロトコルの詳細に 精通している必要があります。\nそうでない人にとっても、サーバに送られたクエリのエラーを トレースすることは有用です。試しに grep &#039;^To backend&#039; trace.log を実行し、実際に PostgreSQL サーバに送信される クエリを見てみるとよいでしょう。詳細な情報は &raquo; PostgreSQL ドキュメントを 参照ください。
int pg_transaction_status ( resource $connection )\nサーバ上で実行中のトランザクションの状態を返します。\n警告\nPostgreSQL 7.3 サーバで autocommit を off に 設定している場合、pg_transaction_status() は 不正確な値を返します。サーバ側での自動コミット機能は非推奨と されており、最近のバージョンのサーバでは存在しません。
string pg_tty ([ resource $connection ] )\npg_tty() は、指定した PostgreSQL connection リソースで、サーバ側のデバッグ出力が 送られる tty 名を返します。
string pg_unescape_bytea ( string $data )\npg_unescape_bytea() は、bytea 型のデータ文字列を アンエスケープし、エスケープしていない文字列(バイナリ)を返します。
bool pg_untrace ([ resource $connection ] )\npg_trace() で開始したトレースを停止します。
mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] )\npg_update() は、data に関して condition にマッチするレコードを更新します。 options が指定された場合、指定したオプションとともに pg_convert() が data に適用されます。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array pg_version ([ resource $connection ] )\npg_version() はクライアント・プロトコル およびサーバのバージョンを配列で返します。プロトコルおよびサーバの バージョンは、PHP が PostgreSQL 7.4 以降とともにコンパイルされている 場合のみ有効です。\n詳細なサーバ情報を取得するには pg_parameter_status() を参照ください。
bool php_check_syntax ( string $filename [, string &$error_message ] )\n指定したファイル filename に対して文法チェック (lint) を行い、スクリプトにエラーがないかどうかを調べます。\nこれは コマンドライン から php -l を利用するのと似ていますが、 php_check_syntax() は実際に filename を実行します (結果は出力しません)。\nたとえば、もし filename の中で関数が 定義されていた場合に php_check_syntax() はそれを実行しますが、filename の 結果は表示されません。
string php_ini_loaded_file ( void )\nphp.ini ファイルが読み込まれているかどうかを調べ、 そのパスを取得します。
string php_ini_scanned_files ( void )\nphp_ini_scanned_files()は、php.iniをパースした 後で、設定ファイルのリストをカンマ区切りで返します。 これらのファイルは、PHPのコンパイル時に --with-config-file-scan-dir オプションを使って指定されたディレクトリから取得されます。\n戻り値のファイル名には --with-config-file-scan-dir オプションで 指定されたパスが含まれます。
string php_logo_guid ( void )\nビルトインされている画像を使って PHP ロゴを表示する際に使用できる ID を返します。 ロゴが表示されるのは、expose_php が On の場合のみです。
string php_sapi_name ( void )\nPHP が使用しているインターフェイス (サーバ API、SAPI) の型を小文字の文字列で返します。たとえば、CLI 版の PHP ではこの文字列は &quot;cli&quot; となります。Apache と組み合わせて使用している場合は、 実際に使用している SAPI によってさまざまな結果となります。 返されうる値の一覧を以下にあげます。
string php_strip_whitespace ( string $filename )\nPHP のソースコード filename からコメントと 空白文字を取り除いたものを返します。これは、スクリプトの中で 実際のコードの量がどれくらいなのかを知るのに役立つでしょう。 これは コマンドライン から php -w を実行するのと同じです。
string php_uname ([ string $mode = &quot;a&quot; ] )\nphp_uname() は、PHP が稼動しているオペレーティング システムに関する説明を返します。これは、phpinfo() の出力の先頭に出てくるものと同じです。 単に OS の名前を取得したい場合には PHP_OS 定数の利用を考えてください。ただし、 この定数が返すのは PHP が構築された OS の 情報であることに注意しましょう。\n古い UNIX プラットフォームの中には現在の OS 情報を取得できないものもあります。 そんな場合は、PHP をビルドした OS の情報を表示します。 これがおこるのは、 uname() ライブラリコールが存在しないか機能していない場合のみです。
bool phpcredits ([ int $flag = CREDITS_ALL ] )\nこの関数は、PHP 開発者、モジュール等のリストを有するクレジットを出力します。 ページに情報を挿入するために、適切な HTML コードが生成されます。
bool phpinfo ([ int $what = INFO_ALL ] )\n現在の PHP の状態に関する、多くの情報を出力します。出力される情報には、 PHP コンパイルオプションと拡張機能、PHP のバージョン、 サーバ情報と環境（モジュールとしてコンパイルされた場合）、 PHP の環境、OS バージョン情報、パス、構成オプションのマスター およびローカルの値、HTTP ヘッダ、PHP License などがあります。\nシステムの設定はそれぞれ違うため、実行時設定 や 利用できる 定義済みの変数 を調べるために phpinfo() がよく使われます。\nまた、phpinfo() には EGPCS (Environment, GET, POST, Cookie, Server) の情報が含まれているため、デバッグツールとしても便利です。
string phpversion ([ string $extension ] )\n現在動作中の PHP パーサあるいは拡張モジュールのバージョンを表す文字列を返します。
float pi ( void )\n円周率の近似値を返します。返される float 値の小数点以下の 桁数は、php.ini の precision ディレクティブに依存します。デフォルトは 14 です。 また、定数 M_PI を使用することで pi() とまったく同じ結果を取得することも可能です。
bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )\nPNG ファイルを WBMP ファイルに変換します。
resource popen ( string $command , string $mode )\ncommand で指定したコマンドのフォークによってできたプロセスへのパイプをオープンします。
mixed current ( array &$array )\n各配列は、&quot;カレント&quot;の要素へのポインタを有しています。 このポインタは、その配列の最初の要素を指すように初期化されます。
bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )\nposix_access() は、ファイルに対するユーザの アクセス権限を調べます。
string posix_ctermid ( void )\nそのプロセスで現在制御している端末のパス名を表す文字列を作成します。 エラーが発生した場合は errno を設定します。この値を調べるには posix_get_last_error() を使用します。
int posix_get_last_error ( void )\n直近で失敗した posix 関数が設定したエラー番号を取得します。 エラー番号に対応するエラーメッセージを取得するには posix_strerror() を使用します。
string posix_getcwd ( void )\nスクリプトの現在の実行ディレクトリのパスを、絶対パスで取得します。 エラー時には errno を設定します。この値は posix_get_last_error() で取得することができます。
int posix_getegid ( void )\n現在のプロセスの有効なグループ ID を返します。
int posix_geteuid ( void )\n現在のプロセスの有効なユーザ ID を返します。 使用可能なユーザ名に変換する方法に関する情報については、 posix_getpwuid() も参照ください。
int posix_getgid ( void )\n現在のプロセスの実際のグループ ID を返します。
array posix_getgrgid ( int $gid )\n指定した ID のグループに関する情報を取得します。
array posix_getgrnam ( string $name )\n指定した名前のグループに関する情報を取得します。
array posix_getgroups ( void )\n現在のプロセスのグループセットを取得します。
string posix_getlogin ( void )\n現在のプロセスを所有するユーザのログイン名を返します。
int posix_getpgid ( int $pid )\nプロセス pid のプロセスグループ ID を返します。
int posix_getpgrp ( void )\n現在のプロセスのグループ ID を返します。
int posix_getpid ( void )\n現在のプロセスのプロセス ID を返します。
int posix_getppid ( void )\n現在のプロセスの親プロセスの ID を返します。
array posix_getpwnam ( string $username )\n指定したユーザに関する情報を配列で返します。
array posix_getpwuid ( int $uid )\n指定したユーザ ID のユーザについての情報を配列で返します。
array posix_getrlimit ( void )\nposix_getrlimit() は、 現在のリソースにおけるソフトリミットおよびハードリミットを配列で返します。\n各リソースには、それぞれソフトリミットとハードリミットがあります。 ソフトリミットとは、そのリソースに対してカーネルが課す制限値のことです。 ハードリミットとは、ソフトリミットの上限値のことです。 特権を持たないプロセスは、ソフトリミットの値を 0 からハードリミット値の間で設定することが可能です。 また、ハードリミットの値を下げることができますが、 いったん下げた値を再び上げることはできません。
int posix_getsid ( int $pid )\nプロセス pid のセッション ID を返します。 プロセスのセッション ID とは、セッションリーダーのプロセスグループ ID のことです。
int posix_getuid ( void )\n現在のプロセスの実際のユーザ ID を返します。
bool posix_initgroups ( string $name , int $base_group_id )\n指定した名前のユーザについてのグループアクセスリストを求めます。
bool posix_isatty ( int $fd )\nファイル記述子 fd が、 有効な端末デバイスを指しているかどうかを調べます。
bool posix_kill ( int $pid , int $sig )\nシグナル sig をプロセス ID pid のプロセスに送信します。
bool posix_mkfifo ( string $pathname , int $mode )\nposix_mkfifo() は、 FIFO スペシャルファイルを作成します。 これはファイルシステム内に存在し、プロセス間の双方向通信の末端として 動作します。
bool posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] )\nスペシャルファイルあるいは通常のファイルを作成します。
bool posix_setegid ( int $gid )\n現在のプロセスの実効グループ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
bool posix_seteuid ( int $uid )\n現在のプロセスの実効ユーザ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
bool posix_setgid ( int $gid )\n現在のプロセスのグループ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。 posix_setgid() を最初に、 posix_setuid() を最後にコールするのが、 関数コールの正しい順序となります。
bool posix_setpgid ( int $pid , int $pgid )\nプロセス pid をプロセスグループ pgid に加えます。
int posix_setsid ( void )\n現在のプロセスをセッションリーダーにします。
bool posix_setuid ( int $uid )\n現在のプロセスの実際のユーザ ID を設定します。 この関数は特権関数であり、実行するにはシステム上において適当な権限 (通常は root) が必要です。
string posix_strerror ( int $errno )\n指定したエラー番号 errno に対応する POSIX システムエラーメッセージを返します。 errno を取得するには、 posix_get_last_error() をコールします。
array posix_times ( void )\n現在の CPU 使用状況についての情報を取得します。
string posix_ttyname ( int $fd )\nファイル記述子 fd 上でオープンしている現在の端末デバイスへの絶対パスを文字列で返します。
array posix_uname ( void )\nシステムについての情報を取得します。\nPOSIX では、値のフォーマットに関して何の仮定も設けないことを規定しています。 例えば、バージョン番号が 3 桁の数字であることや、 この関数により返されるその他のものに依存してはいけません。
number pow ( number $base , number $exp )\nbase の exp 乗を返します。\n警告\nPHP 4.0.6 より前のバージョンでは、pow() は 常に float を返します。この場合、警告は発生しません。
mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )\npreg_filter() は preg_replace() と似ていますが、マッチした結果のみを返します。 この関数の挙動の詳細については preg_replace() のドキュメントを参照ください。
array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\ninput 配列の要素のうち、 指定した pattern にマッチするものを要素とする配列を返します。
int preg_last_error ( void )\n直近の PCRE 正規表現処理のエラーコードを返します。
int preg_match_all ( string $pattern , string $subject , array &$matches [, int $flags [, int $offset ]] )\nsubject を検索し、 pattern に指定した正規表現にマッチした すべての文字列を、flags で指定した 順番で、matches に代入します。\n正規表現にマッチすると、そのマッチした文字列の後から 検索が続行されます。
int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags [, int $offset ]]] )\npattern で指定した正規表現により subject を検索します。
string preg_quote ( string $str [, string $delimiter = NULL ] )\npreg_quote() は、str を引数とし、正規表現構文の特殊文字の前にバックスラッシュを挿入します。 この関数は、実行時に生成される文字列をパターンとしてマッチングを行う必要があり、 その文字列には正規表現の特殊文字が含まれているかも知れない場合に有用です。\n正規表現の特殊文字は、次のものです。 . \\ + * ? [ ^ ] $ ( ) { } = ! < > | : -
mixed preg_replace_callback ( mixed $pattern , callback $callback , mixed $subject [, int $limit = -1 [, int &$count ]] )\nこの関数の動作は、ほぼ preg_replace() と同じですが、 replacement の代わりに callback を指定するところが異なります。
mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )\nsubject に関して pattern を用いて検索を行い、 replacement に置換します。
array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\n指定した文字列を、正規表現で分割します。
mixed prev ( array &$array )\n内部の配列ポインタをひとつ前に戻します。\nprev() は、 内部の配列ポインタを進めるのではなく戻すということを除けば next() と同じです。
mixed print_r ( mixed $expression [, bool $return = false ] )\nprint_r() は、 変数の値に関する情報を解り易い形式で表示します。\nprint_r()、var_dump() および var_export() は、PHP 5 においてオブジェクトの protected および private のプロパティも表示します。 静的なクラスメンバーは表示されません。\nprint_r() は、配列ポインタを終端まで移動する ことに注意してください。ポインタを最初に戻すために reset() を使用してください。
int print ( string $arg )\narg を出力します。\nprint()は実際には関数ではありません (言語構造です)。このため、引数を括弧で括る必要はありません。\nprint() と echo() の違いに関するちょっとした議論については、 FAQTs Knowledge Base の次の記事を参照ください : &raquo; http://www.faqts.com/knowledge_base/view.phtml/aid/1/fid/40
void printer_abort ( resource $printer_handle )\nこの関数は、プリンタのスプールファイルを削除します。
void printer_close ( resource $printer_handle )\nこの関数は、プリンタへの接続をクローズします。 printer_close() は、アクティブな デバイスコンテキストもクローズします。
resource printer_create_brush ( int $style , string $color )\nこの関数は、新しいブラシを作成してブラシへのハンドルを返します。 ブラシは、図形を塗りつぶすために使用されます。使用例は printer_select_brush() を参照ください。
void printer_create_dc ( resource $printer_handle )\nこの関数は、新しいデバイスコンテキストを作成します。 デバイスコンテキストは、ドキュメントのグラフィックオブジェクトを カスタマイズするために使用されます。
resource printer_create_font ( string $face , int $height , int $width , int $font_weight , bool $italic , bool $underline , bool $strikeout , int $orientation )\nこの関数は、新しいフォントを作成してそのハンドルを返します。作成したフォントは テキストの描画に使用されます。使用例は printer_select_font() を参照ください。
resource printer_create_pen ( int $style , int $width , string $color )\nこの関数は、新しいペンを作成してそのハンドルを返します。作成したペンは、 直線や曲線を描く際に使用されます。使用例は printer_select_pen() を参照ください。
void printer_delete_brush ( resource $brush_handle )\nこの関数は、選択したブラシを削除します。使用例は printer_select_brush() を参照ください。
bool printer_delete_dc ( resource $printer_handle )\nこの関数はデバイスコンテキストを削除します。 使用例は printer_create_dc() を参照ください。
void printer_delete_font ( resource $font_handle )\nこの関数は選択したフォントを削除します。使用例は printer_select_font() を参照ください。
void printer_delete_pen ( resource $pen_handle )\nこの関数は、選択したペンを削除します。使用例は printer_select_pen() を参照ください。
bool printer_draw_bmp ( resource $printer_handle , string $filename , int $x , int $y [, int $width ], int $height )\nこの関数はビットマップを描画します。
void printer_draw_chord ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad_x , int $rad_y , int $rad_x1 , int $rad_y1 )\nこの関数は、弦を描画します。
void printer_draw_elipse ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )\nこの関数は、楕円を描画します。
void printer_draw_line ( resource $printer_handle , int $from_x , int $from_y , int $to_x , int $to_y )\nこの関数は、選択したペンで直線を描画します。
void printer_draw_pie ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad1_x , int $rad1_y , int $rad2_x , int $rad2_y )\nこの関数は円弧を描画します。
void printer_draw_rectangle ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )\nこの関数は矩形を描画します。
void printer_draw_roundrect ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y , int $width , int $height )\nこの関数は、角が丸い矩形を描画します。
void printer_draw_text ( resource $printer_handle , string $text , int $x , int $y )\nこの関数は、選択したフォントを使用して位置 x , y に text を描画します。
bool printer_end_doc ( resource $printer_handle )\nプリンタスプーラ内の新規ドキュメントを閉じます。 これにより、ドキュメントの印刷準備が完了します。使用例は printer_start_doc() を参照ください。
bool printer_end_page ( resource $printer_handle )\nこの関数は、アクティブなドキュメントのアクティブなページを閉じます。 使用例は printer_start_doc() を参照ください。
mixed printer_get_option ( resource $printer_handle , string $option )\nこの関数は、option の設定値を取得します。
array printer_list ( int $enumtype [, string $name [, int $level ]] )\nこの関数は、利用可能なプリンタとその機能を調べます。
int printer_logical_fontheight ( resource $printer_handle , int $height )\nこの関数は height の論理フォントの高さを計算します。
resource printer_open ([ string $printername ] )\nこの関数は、指定したプリンタへの接続を試みます。\nprinter_open() は、 デバイスコンテキストも開始します。
void printer_select_brush ( resource $printer_handle , resource $brush_handle )\nこの関数は、実際のデバイスコンテキストのアクティブな描画オブジェクトと してブラシを選択します。矩形を描画する場合、図形の描画には ブラシが使用され、輪郭の描画にはペンが使用されます。\n図形を描く前にブラシが選択されていない場合、その図形は塗りつぶされません。
void printer_select_font ( resource $printer_handle , resource $font_handle )\nこの関数は、テキストを描画するフォントを選択します。
void printer_select_pen ( resource $printer_handle , resource $pen_handle )\nこの関数は、実際のデバイスコンテキストのアクティブな描画オブジェクトと してペンを選択します。ペンは、直線や曲線の描画に使用されます。たとえば 一本の直線を引く際にはペンが使用されます。矩形を描く際には、その輪郭を ペンが描画し、ブラシがその図形を塗りつぶします。 図形を描く前にペンが選択されていない場合、その図形の輪郭は描かれません。
bool printer_set_option ( resource $printer_handle , int $option , mixed $value )\nこの関数は、現在の接続のオプションを設定します。
bool printer_start_doc ( resource $printer_handle [, string $document ] )\nこの関数は、プリンタスプーラに新しいドキュメントを作成します。 ドキュメントには複数のページを含めることが可能で、スプーラの中で 印刷ジョブを予約するために使用されます。
bool printer_start_page ( resource $printer_handle )\nこの関数は、アクティブなドキュメントに新しいページを作成します。 使用例は printer_start_doc() を参照ください。
bool printer_write ( resource $printer_handle , string $content )\ncontent を直接プリンタに書き込みます。
int printf ( string $format [, mixed $args [, mixed $... ]] )\nformat にしたがって、出力を生成します。
int proc_close ( resource $process )\nproc_close() は pclose() と似ていますが、proc_open() で開かれたプロセスに対してのみ機能するという点で異なります。 proc_close() は、プロセスが終了するまで待った後で、 終了コードを返します。もし、そのプロセスに対してパイプが開かれていた場合は、 デッドロックを避けるため、fclose() 関数で、 この関数を呼び出す前にそれらを閉じておかなくてはなりません - パイプが開いている間、子プロセスは終了できないからです。
array proc_get_status ( resource $process )\nproc_get_status() は、proc_open() で開かれたプロセスに関する情報を取得します。
bool proc_nice ( int $increment )\nproc_nice() は、現在のプロセスの優先度を increment で指定された値に変更します。 increment が正数の場合、 現在のプロセスの優先度をより低くし、increment が負数の場合は優先度が上がります。\nproc_nice() は、proc_open() やそれに関連する関数とは関係ありません。
resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )\nproc_open() は popen() と よく似ていますが、プログラムの実行をさらに細かく制御できる点で違います。
bool proc_terminate ( resource $process [, int $signal = 15 ] )\n終了させる (proc_open() を用いて生成された) process にシグナルを送信します。 proc_terminate() は即座に返され、 プロセスの終了を待ちません。\nproc_terminate() により、プロセスを終了させ、 他のタスクを継続することができます。proc_get_status() 関数を使用して (停止したかどうかを確認するために) プロセスをポーリングすることができます。
bool property_exists ( mixed $class , string $property )\nこの関数は、与えられたプロパティ property が 指定されたクラスに存在するかどうかを確認します。
int ps_add_bookmark ( resource $psdoc , string $text [, int $parent = 0 [, int $open = 0 ]] )\n現在のページにブックマークを追加します。たいてい、ブックマークは PDFビューア上でページの左側にツリー形式で表示されます。 ブックマークをクリックすると、該当ページにジャンプします。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename )\nクリックした際にファイルが実行されるハイパーリンクを、 指定した場所に設定します。ハイパーリンクのリンク元は矩形で表され、 その左下の座標は (llx, lly)、そして右上の座標が (urx, ury) となります。 この矩形はデフォルトでは細い青線で表されます。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest )\n指定した位置に、同一ドキュメント内のページへのハイパーリンクを設定します。 リンクをクリックすると、そのページに移動します。ドキュメントの最初の ページのページ番号は 1 です。\nハイパーリンクのリンク元は矩形で表され、その左下の座標は (llx , lly )、 そして右上の座標が (urx , ury ) となります。この矩形はデフォルトでは細い青線で表されます。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )\nページの特定の位置に注釈を追加します。注釈は、 テキストが記入された小さな矩形で、ページ上のどこにでも配置できます。 折りたたんで保持することもでき、折りたたまれていない場合は、 指定したアイコンがプレースホルダとして使用されます。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest )\n指定した位置に、別の PDF ドキュメントへのハイパーリンクを設定します。 リンクをクリックすると、そのドキュメントの指定されたページに移動します。 ドキュメントの最初のページのページ番号は 1 です。\nハイパーリンクのリンク元は矩形で表され、その左下の座標は (llx , lly )、 そして右上の座標が (urx , ury ) となります。この矩形はデフォルトでは細い青線で表されます。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url )\n指定した位置に、Web ページを指すハイパーリンクを設定します。 ハイパーリンクのリンク元はは矩形で表され、その左下の座標は (llx , lly )、 そして右上の座標が (urx , ury ) となります。 この矩形はデフォルトでは細い青線で表されます。\n注釈は、 ドキュメントを印刷したり表示したりするときには表示されません。 しかし、Acrobat Distiller? あるいは Ghostview でドキュメントを pdf に変換すると表示されます。
bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )\n(x , y ) を中心とした円の一部を描きます。円弧は alpha で指定された角度からはじまり beta で指定された角度で終わります。反時計回りに描かれます (時計回りに描くには ps_arcn() を使用します)。 また、alpha で指定された角度からはじまって beta で指定された角度で終わるサブパスが、 現在のパスに追加されます。
bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )\n(x , y ) を中心とした円の一部を描きます。円弧は alpha で指定された角度からはじまり beta で指定された角度で終わります。 時計回りに描かれます (反時計回りに描くには ps_arc() を使用します)。 また、beta で指定された角度からはじまって alpha で指定された角度で終わるサブパスが、カレントパスに追加されます。
bool ps_begin_page ( resource $psdoc , float $width , float $height )\n新しいページを開始します。width や height というパラメータを見ると いかにもページ単位でサイズを変えられるように思えますが、PostScript ではこれは不可能です。最初に ps_begin_page() を呼んだ際に指定されたサイズが、ドキュメント全体に適用されます。 2 回目以降に呼ばれた場合はこのパラメータは意味を持たず、 単に新しいページが作られるだけです。しかし、もしあなたが PostScript ドキュメントを PDF に変換しようと考えているのなら話は別です。 この関数はドキュメントの各ページごとに pdfmark を設定するので、 PDF に変換した後はページごとにサイズを変えることができます。\nPostScript はさまざまなページサイズを知らないので、pslib ではドキュメントの各ページに対してバウンディングボックスを設定します。 このサイズは PostScript ビューアによって評価され、 ドキュメントヘッダの BoundingBox より優先されます。 左下角が (0, 0) ではない BoundingBox を設定すると、 予期せぬ結果を引き起こすことがあります。なぜなら、 ページ単位のバウンディングボックスは常に左下角が (0, 0) であり、 これが全体の設定より優先されるからです。\n個々のページの情報はカプセル化して保存されています。どういうことかというと、 あるページで設定した情報のほとんどは次のページに引き継がれないということです。\n最初の ps_begin_page() 呼び出しまでに一度も ps_findfont() が呼び出されていなかった場合は、 PostScript ドキュメントのヘッダが出力され、 バウンディングボックスが最初のページのサイズに設定されます。 バウンディングボックスの左下角は (0, 0) に設定されます。もしすでに ps_findfont() が呼ばれていた場合は既にヘッダが出力されてしまっており、 ドキュメントに適切なバウンディングボックスが設定されていないことになります。 このようなことを避けるために、ps_findfont() や ps_begin_page() を実行する前にはいつも ps_set_info() を実行し、 BoundingBox や Orientation の値を設定しておくべきです。
int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )\n新しいパターンを開始します。パターンとは、 領域を塗りつぶすための描画データを含むページのようなものです。 ps_setcolor() をコールする際に pattern に色空間を指定すると、 これは色のように使用されます。
int ps_begin_template ( resource $psdoc , float $width , float $height )\n新しいテンプレートを開始します。テンプレートは、postscript 言語からコールされます。パターンと似ていますが、画像のように使用されます。 テンプレートは、ドキュメント内で何回も使用される描画内容、 例えば会社のロゴなどに対して使用されることが多いでしょう。 テンプレート内では、すべての描画関数が使用されます。 テンプレートは、ps_place_image() によって配置されるまでは描画されません。
bool ps_circle ( resource $psdoc , float $x , float $y , float $radius )\n(x , y ) を中心とする円を描きます。描画開始位置は (x +radius , y ) です。もしパスの外部でこの関数が呼び出された場合、 新しいパスを開始します。パスの内部で呼び出された場合は、 円をサブパスとして追加します。ひとつ前の描画処理の終点が (x +radius , y ) でなかった場合、パスに隙間ができることになります。
bool ps_clip ( resource $psdoc )\n現在のパスを、描画範囲の境界として定義します。 この領域の外に描画された内容は、見えなくなります。
void ps_close_image ( resource $psdoc , int $imageid )\n画像を閉じ、そのリソースを開放します。 いったん閉じられた後は、画像を使用することはできません。
bool ps_close ( resource $psdoc )\nPostScript ドキュメントを閉じます。\nこの関数は、PostScript ドキュメントのトレーラーを書き込みます。 また、ブックマークツリーも書き込みます。ps_close() は、リソースの開放は行いません。これは ps_delete() が行います。\nもし事前にコールされていない場合、この関数は ps_delete() からもコールされます。
bool ps_closepath_stroke ( resource $psdoc )\nパスの終了点を開始点とつなげ、出来上がった線を描画します。
bool ps_closepath ( resource $psdoc )\nパスの終了点と開始点をつなげます。出来上がったパスは、 描画、塗りつぶし、切り取りなどに使用されます。
bool ps_continue_text ( resource $psdoc , string $text )\n最終行の次の行からテキストを出力します。行間隔は &quot;leading&quot; の値が用いられます。この値は ps_set_value() を用いて指定する必要があります。 実際のテキストの出力位置は、&quot;textx&quot; と &quot;texty&quot; の値によって決まります。 この値は ps_get_value() を用いて取得することができます。
bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\n現在のパスに対して、3 つの制御点を指定して 3 次ベジエ曲線を追加します。
bool ps_delete ( resource $psdoc )\nドキュメントが使用していたメモリを開放します。また、 もし事前に ps_close() でファイルが閉じられていない場合はファイルを閉じます。 どんな場合でも、事前に ps_close() でファイルを閉じておくべきです。なぜなら ps_close() はファイルをただ閉じるだけではなく、トレーラーを出力するからです。 ここには、ドキュメントのページ数やブックマーク階層といった情報が含まれます。
bool ps_end_page ( resource $psdoc )\nps_begin_page() によって開始したページを終了します。 ページを終了しても、現在の描画コンテキストはそのままになります。つまり、 もしページ内部でフォントが読み込まれたのなら、 それを再読み込みしてしなければなりません。 また、行の幅や色などのその他の描画パラメータも再設定する必要があります。
bool ps_end_pattern ( resource $psdoc )\nps_begin_pattern() によって開始したパターンを終了します。 パターンが終了すると、領域の塗りつぶし時にそれを使用できるようになります。
bool ps_end_template ( resource $psdoc )\nps_begin_template() によって開始したテンプレートを終了します。 テンプレートが終了すると、それを画像のように使用できるようになります。
bool ps_fill_stroke ( resource $psdoc )\nps_lineto() のような描画関数によって事前に作成されたパスを塗りつぶし、描画します。
bool ps_fill ( resource $psdoc )\nps_lineto() のような描画関数によって事前に作成されたパスを塗りつぶします。
int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed = false ] )\nあとで使用するために、フォントを読み込みます。読み込んだフォントを実際に利用するためには、 ps_setfont() で設定しなければなりません。 文字の間隔を計算するため、この関数は adobe フォントメトリックファイルを必要とします。 ページの内部で読み込まれたフォントは、 そのページ内でのみ有効となります。ドキュメント全体で使われるフォントは、 最初の ps_begin_page() の実行より前に読み込まれなければなりません。 ページとページの間で ps_findfont() が呼ばれた場合は、それ以降のページでフォントが有効になります。\nafm ファイルの名前は、 fontname .afm でなければなりません。 フォントを埋め込む場合は、フォントのアウトラインを含む fontname .pfb が存在しなければなりません。\n最初のページを処理する前に ps_findfont() をコール際、 postscript ヘッダが出力されます。ここには、ドキュメント全体に適用される BoundingBox が含まれます。 通常は、BoundingBox を設定するのは最初に ps_begin_page() がコールされたときで、これは ps_findfont() をコールした後になります。 したがって、ps_findfont() のコール時にはまだ BoundingBox が設定されておらず、警告が発生してしまいます。 こうなることを避けるため、ps_findfont() をコールする前に ps_set_parameter() をコールし、BoundingBox を設定しておくべきです。
string ps_get_buffer ( resource $psdoc )\nこの関数は、まだ実装されていません。常に空の文字列を返します。 メモリ内でのデータ作成が求められる場合に、postscript ファイルを内部バッファに読み込み、バッファの内容をこの関数で取得する、 という実装を計画中です。 現在は、メモリ内で作成されたデータはバッファリングされず直接ブラウザに送られます。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] )\nps_set_parameter() で直接設定されたか、 あるいは他の関数で間接的に設定されたパラメータの値を取得します。 パラメータは文字列値として定義されます。この関数は、 同じく ps_set_parameter() で設定されたリソースを取得するためには利用できません。\nパラメータ name は、以下の値をとります。\nfontname\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの名前。    fontencoding\n現在アクティブなフォントのエンコーディング。    dottedversion\n元になる pslib ライブラリのバージョン。書式は <major>.<minor>.<subminor>    scope\n現在の描画スコープ。object, document, null, page, pattern, path, template, prolog, font, glyph。    ligaturedisolvechar\nリゲチャを溶かす文字。たとえば、リゲチャ `ff&#039; を含むフォントで `|&#039; がこの文字に指定されていた場合は、 `f|f&#039; はリゲチャ `ff&#039; ではなく 2 つの独立した `f&#039; となります。    imageencoding\n画像の符号化に使用するエンコーディング。 hex あるいは 85。 hex エンコーディングは、画像の各バイトを postscript ファイルの 2 バイトであらわします。85 は Ascii85 エンコーディングを表します。    linenumbermode\n行番号を段落単位でつける場合は paragraph、 ボックス内でつける場合は box を設定します。    linebreak\nテキストを ps_show_boxed() で出力する場合にのみ使用します。 true を設定すると、 改行時にキャリッジリターンが付加されます。    parbreak\nテキストを ps_show_boxed() で出力する場合にのみ使用します。 true を設定すると、 キャリッジリターンで新しい段落を開始します。    hyphenation\nテキストを ps_show_boxed() で出力する場合にのみ使用します。 true を設定すると、 ハイフネーション辞書が設定されており存在する場合に、 段落のハイフネーション処理が行われます。    hyphendict\nハイフネーションパターンの辞書のファイル名。
float ps_get_value ( resource $psdoc , string $name [, float $modifier ] )\nps_set_value() で設定された値を取得します。 値は浮動小数点数値として定義されます。\nパラメータ name には以下の値を設定できます。\nfontsize\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの名前。    font\n現在アクティブなフォント自身。    imagewidth\nパラメータ modifier で渡された ID の画像の幅。    imageheight\nパラメータ modifier で渡された ID の画像の高さ。    capheight\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントにおける、 大文字の M の高さ。    ascender\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの ascender (上に突き出している部分の長さ)。    descender\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの descender (下に突き出している部分の長さ)。    italicangle\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの斜体の角度。    underlineposition\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの下線の位置。    underlinethickness\n現在アクティブなフォント、 あるいはパラメータ modifier で指定された ID を持つフォントの下線の太さ。    textx\n現在のテキスト出力位置の x 座標。    texty\n現在のテキスト出力位置の y 座標。    textrendering\n現在のテキストのレンダリングモード。    textrise\nベースライン上部の空間。    leading\nテキストの行間隔をポイント数で指定。    wordspacing\n単語と単語の間の空白の幅を、空白文字の幅を基準として指定。    charspacing\n文字と文字の間の空白。0.0 でない場合は、リゲチャは常に分解されます。    hyphenminchars\n単語の末尾で、ハイフネーションの対象となる最小文字数。    parindent\n各段落の最初の n 行を字下げします。    numindentlines\nparindent が 0.0 でない場合に、段落内で字下げする行数。    parskip\n段落と段落の間隔。    linenumberspace\n行番号を表示するために、各行の先頭に置く空白。    linenumbersep\n行番号と行の内容の間隔。    major\npslib のメジャーバージョン番号。    minor\npslib のマイナーバージョン番号。    subminor, revision\npslib の詳細バージョン番号。
array ps_hyphenate ( resource $psdoc , string $text )\n渡された単語をハイフネーションします。ps_hyphenate() は、(ps_set_value() で設定した) hyphenminchars の値と (ps_set_parameter() で設定した) hyphendict パラメータの内容を評価します。 hyphendict は、この関数を呼ぶ前に必ず設定しておかなければなりません。\nこの関数を利用するためには、LC_CTYPE が適切に設定されている必要があります。 PostScript 拡張が初期化される際、環境変数の値が利用されます。 Unix 環境を利用している方は、詳細な情報は locale の man ページを見てください。
bool ps_include_file ( resource $psdoc , string $file )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ps_lineto ( resource $psdoc , float $x , float $y )\n現在の位置から指定された座標までの直線を現在のパスに追加します。 直線の開始位置を指定するには ps_moveto() を利用します。
int ps_makespotcolor ( resource $psdoc , string $name [, int $reserved = 0 ] )\n現在の塗りつぶし色からスポット色を作成します。塗りつぶし色の色空間は rgb, cmyk または グレースケールのいずれかでなければなりません。 スポット色には任意の名前をつけることができます。 スポット色には、ps_setcolor() を用いてどんな色でも設定できます。 ドキュメントが印刷されずに postscript ビューアで表示される場合にも、 指定した色空間の色が使用されます。
bool ps_moveto ( resource $psdoc , float $x , float $y )\n現在位置を新しい座標に指定します。前回のパスが終了してからはじめて ps_moveto() が呼ばれた場合、新しいパスを開始します。 もしすでにパスが開始されているときに呼ばれた場合は、 単に現在位置を設定し、サブパスを開始します。
resource ps_new ( void )\n新しいドキュメントのインスタンスを生成します。 ディスク上やメモリ内にファイルを作ることはありません。 ドキュメントのインスタンスがすべてを設定します。 ps_new() の後には、通常は ps_open_file() がコールされます。これにより、 実際に postscript ドキュメントが作成されます。
bool ps_open_file ( resource $psdoc [, string $filename ] )\nディスク上に新しいファイルを作成し、PostScript ドキュメントをその中に書き込みます。ps_close() が呼ばれると、ファイルは閉じられます。
int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam = 0 ]] )\n後で使用するために、画像を読み込みます。
int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params )\nすでにメモリ上にある画像を読み込みます。現在は source は評価されず、常に memory と仮定されます。 画像データは、左上から右下に向かってピクセルデータを順に並べたものです。 各ピクセルは、色コンポーネント components で構成されており、このコンポーネントの大きさは bpc ビットです。
int ps_open_memory_image ( resource $psdoc , int $gd )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale )\n以前に読み込まれている画像をページに配置します。画像の縮尺は変更できます。 画像を回転させる場合は、事前に ps_rotate() で座標系を回転させておきます。
bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height )\n（x , y ）を左下の角とする 矩形を描きます。描画は左下の角から始まって同じ位置で終わります。 もしパスの外部でこの関数が呼び出された場合、新しいパスを開始します。 パスの内部で呼び出された場合は、矩形をサブパスとして追加します。一つ前の描画処理が 左下角の位置で終わっていなかった場合は、パスに隙間ができることになります。
bool ps_restore ( resource $psdoc )\n以前に保存されている描画コンテキストを復元します。 すべての ps_save() 呼び出しには、対応する ps_restore() の呼び出しが必要です。 座標系変換、線の設定、色の設定などは、すべて ps_save() のコール前の状態に戻ります。
bool ps_rotate ( resource $psdoc , float $rot )\n座標系の回転を設定します。
bool ps_save ( resource $psdoc )\n現在の描画コンテキストを保存します。 そこには色や変換・回転その他の情報が含まれています。保存されたコンテキストは ps_restore() で復元できます。
bool ps_scale ( resource $psdoc , float $x , float $y )\n座標系の、水平方向・垂直方向の縮尺をそれぞれ設定します。
bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue )\nps_add_weblink() や ps_add_pdflink() などの関数で追加されたリンクは、 pdf に変換して pdf ビューアで見た際には矩形で囲まれて表示されます。 この矩形は、postscript ドキュメントでは表示されません。 この関数は、矩形の枠線の色を設定します。
bool ps_set_border_dash ( resource $psdoc , float $black , float $white )\nps_add_weblink() や ps_add_pdflink() などの関数で追加されたリンクは、 pdf に変換して pdf ビューアで見た際には矩形で囲まれて表示されます。 この矩形は、postscript ドキュメントでは表示されません。 この関数は、破線の「線」の部分と「空白」の部分の長さを設定します。
bool ps_set_border_style ( resource $psdoc , string $style , float $width )\nps_add_weblink() や ps_add_pdflink() などの関数で追加されたリンクは、 pdf に変換して pdf ビューアで見た際には矩形で囲まれて表示されます。 この矩形は、postscript ドキュメントでは表示されません。 この関数は、その線の形式と幅を設定します。
bool ps_set_info ( resource $p , string $key , string $val )\nドキュメントの情報フィールドを設定します。この情報は、PostScript ファイルのヘッダにコメントとして表示されます。 ドキュメントが pdf に変換された場合にも、 このフィールドはドキュメントの情報として使用されます。\n通常 BoundingBox は最初のページの設定と同じ値を 設定しておきます。 ps_findfont() が事前に呼ばれていなかった場合のみ、この設定が利用されます。そのような場合、 もしこの関数で明示的に設定していなければ BoundingBox は空白のままとなります。\npostscript ファイルのヘッダが既に書き込まれている場合には、 この関数は何の意味も持ちません。この関数は、最初のページの前、 あるいは ps_findfont() が最初にコールされる前にコールされる必要があります。
bool ps_set_parameter ( resource $psdoc , string $name , string $value )\n多くの関数で利用されるパラメータを設定します。 パラメータは文字列値として定義されます。
bool ps_set_text_pos ( resource $psdoc , float $x , float $y )\nテキストを出力する位置を設定します。別の方法として、x と y の値を別々に ps_set_value() で設定することもできます。 この場合の設定項目は、それぞれ textx と texty となります。\nテキストを所定の位置に出力したいのなら、テキストの位置を指定してから ps_show() をコールするよりも、 ps_show_xy() を使用するほうが便利です。
bool ps_set_value ( resource $psdoc , string $name , float $value )\n多くの関数で利用される値を設定します。 パラメータは浮動小数点数値として定義されます。
bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )\n描画色、塗りつぶし色、あるいはその両方を設定します。
bool ps_setdash ( resource $psdoc , float $on , float $off )\n破線の「線」の部分と「空白」の部分の長さを設定します。
bool ps_setflat ( resource $psdoc , float $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ps_setfont ( resource $psdoc , int $fontid , float $size )\nフォントを設定します。このフォントは、事前に ps_findfont() で読み込まれている必要があります。 フォントを設定せずにテキストを出力するとエラーとなります。
bool ps_setgray ( resource $psdoc , float $gray )\n以降の描画処理で使われるグレー値を設定します。
bool ps_setlinecap ( resource $psdoc , int $type )\n線端をどのように表示するかを設定します。
bool ps_setlinejoin ( resource $psdoc , int $type )\n線がどのように連結されるかを設定します。
bool ps_setlinewidth ( resource $psdoc , float $width )\n以降の描画処理での線幅を設定します。
bool ps_setmiterlimit ( resource $psdoc , float $value )\n2 本の直線が小さい角度で連結され、かつ連結方法が PS_LINEJOIN_MITER に設定されている場合、 出来上がる線の角の部分が非常に長くなります。miter limit は、miter length (角の長さ) と線幅の比率の最大値です。
bool ps_setoverprintmode ( resource $psdoc , int $mode )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ps_setpolydash ( resource $psdoc , float $arr )\n破線の「線」の部分と「空白」の部分の長さを設定します。 ps_setpolydash() は、 より複雑な破線パターンを設定するために用いられます。
int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist )\nシェーディング用のパターンを作成します。これは ps_shading() を呼ぶ前に行わなければなりません。 シェーディングパターンは、標準のパターンと同じように用いられます。
int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )\nシェーディングを作成します。これは ps_shfill() や ps_shading_pattern() で用いられます。\nシェーディングの色には、pattern 以外の任意の色空間が利用できます。
bool ps_shfill ( resource $psdoc , int $shadingid )\n範囲をシェーディングで塗りつぶします。シェーディングは事前に ps_shading() で作られている必要があります。 この関数は、ps_shading_pattern() でシェーディングからパターンを作成し、 それを塗りつぶし色として使用するのと同じことを行います。
int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] )\n与えられたボックスの中にテキストを出力します。ボックスの左下の座標が (left , bottom ) となります。 必要に応じて改行が挿入されます。連続する空白文字は、ひとつとして扱われ、 タブ文字は空白文字として扱われます。\nパラメータ hyphenation が true に設定されており、またパラメータ hyphendict に有効なハイフネーションファイルが設定されている場合に、 テキストのハイフネーションが行われます。 行間隔の設定は、値 leading で行います。 TeX と同様に、段落と段落の間には空行が挿入されます。 値 parindent が 0.0 より大きく設定されている場合、 最初の n 行は字下げされます。n の行数は、値 numindentlines で設定します。 最初の m 段落を字下げしないようにするには、 値 parindentskip に正の数値を設定します。
bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y )\n指定された位置にテキストを出力します。
bool ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool ps_show ( resource $psdoc , string $text )\n現在の位置にテキストを出力します。テキストの位置を設定するには、 関数 ps_set_value() の値 textx および texty に x 座標と y 座標を設定します。 事前に ps_setfont() でフォントが設定されていない場合、この関数はエラーを返します。\nps_show() は、以下のようなパラメータや値 (それぞれ ps_set_parameter() や ps_set_value() で設定されたもの) の内容を評価します。    charspacing (value)\n連続する 2 つのグリフ間の距離です。値がゼロ以外の場合、リゲチャは 解消されます。ゼロ未満の値を指定することも可能です。    kerning (parameter)\nこのパラメータを &quot;false&quot; に設定するとカーニングが無効になります。 デフォルトではカーニングが有効になっています。    ligatures (parameter)\nこのパラメータを &quot;false&quot; に設定するとリゲチャを使用しないようになります。 デフォルトではリゲチャを使用するようになっています。    underline (parameter)\nこのパラメータを &quot;true&quot; に設定すると下線が引かれます。 デフォルトでは下線が無効になっています。    overline (parameter)\nこのパラメータを &quot;true&quot; に設定すると上線が引かれます。 デフォルトでは上線が無効になっています。    strikeout (parameter)\nこのパラメータを &quot;true&quot; に設定すると打ち消し線が引かれます。 デフォルトでは打ち消し線が無効になっています。
bool ps_show2 ( resource $psdoc , string $text , int $len )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array ps_string_geometry ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )\nこの関数は ps_stringwidth() と似ていますが、 返り値は、テキストの幅、ascender および descender を含む配列形式になります。
float ps_stringwidth ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )\n指定されたフォントとサイズで出力した場合に、 文字列の幅が何ポイントになるかを計算します。 正確な幅を計算するため、この関数は Adobe のフォントメトリックファイルを必要とします。カーニングが有効になっている場合、 それも考慮して計算します。
bool ps_stroke ( resource $psdoc )\nps_lineto() のような関数で事前に組み立てられたパスを描画します。
string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid = 0 ] )\nこの関数は、有効なグリフ名を取得するために Adobe のフォントメトリックファイルを必要とします。
float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid = 0 [, float $size = 0.0 ]] )\n指定されたフォントとサイズで出力した場合に、 グリフの幅が何ポイントになるかを計算します。正確な幅を計算するため、 この関数は Adobe のフォントメトリックファイルを必要とします。
bool ps_symbol ( resource $psdoc , int $ord )\n現在のフォントのフォントエンコーディングベクタの中で ord 番目の位置にあるグリフを出力します。 フォントエンコーディングは、ps_findfont() でフォントを読み込む際に設定することができます。
bool ps_translate ( resource $psdoc , float $x , float $y )\n新しい座標系の原点を設定します。
bool pspell_add_to_personal ( int $dictionary_link , string $word )\npspell_add_to_personal() はユーザの単語リスト に単語を追加します。ディレクトリをオープンするために pspell_new_config() を pspell_config_personal() とともに使用した場合、 pspell_save_wordlist() で単語リストを保存することが可能です。
bool pspell_add_to_session ( int $dictionary_link , string $word )\npspell_add_to_session() は、 現在のセッションに関連する単語リストに単語を追加します。この関数は、 pspell_add_to_personal() に似ています。
bool pspell_check ( int $dictionary_link , string $word )\npspell_check() は単語のスペルをチェックします。
bool pspell_clear_session ( int $dictionary_link )\npspell_clear_session() は、 現在のセッションをクリアします。現在の単語リストはブランクになり、 例えば pspell_save_wordlist() でこのリストを保存しても何もおきません。
int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )\n辞書をオープンする際に使用する設定を作成します。\npspell_config_create() は、 pspell_new() の構文に非常によく似ています。実際、 pspell_new_config() の直後に pspell_config_create() を使用した場合、全く同じ 結果となります。しかし、新しい設定を作成した後、 pspell_new_config() をコールする前に関数 pspell_config_*() を使用することで いくつかの進んだ機能が使用できます。\nより詳細な情報と例については、pspell Web サイト &raquo; http://aspell.net/ のオンラインマニュアルを参照ください。
bool pspell_config_data_dir ( int $conf , string $directory )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool pspell_config_dict_dir ( int $conf , string $directory )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool pspell_config_ignore ( int $dictionary_link , int $n )\npspell_config_ignore() は、 pspell_new_config() をコールする前に使用しなければなりません。 この関数は、スペルチェッカに無視させる短い単語の長さを指定します。
bool pspell_config_mode ( int $dictionary_link , int $mode )\npspell_config_mode() は、 pspell_new_config() のコール前に設定を行う際に使用します。この関数は、 pspell_suggest() により返される修正候補の数を定義します。
bool pspell_config_personal ( int $dictionary_link , string $file )\n個人の単語リストファイルを設定します。個人の単語リストは、 pspell_new_config()をコールした後にロードされ、 標準的な単語リストに追加されて使用されます。このファイルは、 pspell_save_wordlist() により個人的な単語リスト が保存されるファイルでもあります。\npspell_config_personal() は、 pspell_new_config() をコールする前に設定を行うために使用する必要があります。
bool pspell_config_repl ( int $dictionary_link , string $file )\n置換候補を保持するファイルを設定します。\n置換の組は、スペルチェッカの品質を改善します。 単語のスペルミスをした場合、そして、適当な修正候補がリストにあった場合、 pspell_store_replacement() を置換候補を保存するために使用し、置換候補を含む単語リストを保存するために pspell_save_wordlist()を使用することが可能です。\npspell_config_repl() は、 pspell_new_config() をコールする前に設定を行うために使用する必要があります。
bool pspell_config_runtogether ( int $dictionary_link , bool $flag )\nこの関数は、複合語を正しい複合語として処理するかどうかを定義します。 つまり、&quot;thecat&quot; には、二つの単語の間に空白はありませんが、 正しい複合語となります。この設定の変更は、 pspell_check() による返り値にのみ影響を与えます。 pspell_suggest() は、この場合でも修正候補を返します。\npspell_config_runtogether() は、 pspell_new_config() をコールする前に設定を行うために使用する必要があります。
bool pspell_config_save_repl ( int $dictionary_link , bool $flag )\npspell_config_save_repl() は、 pspell_save_wordlist() が単語リストと共に置換リストを保存するかどうかを定義します。 通常はこの関数を使用する必要はありません。なぜなら、 pspell_config_repl() を使用した場合は置換の組は pspell_save_wordlist() により保存され、 そうでない場合には置換の組は保存されないためです。\npspell_config_save_repl() は、 pspell_new_config() のコール前に設定を行う際に使用します。
int pspell_new_config ( int $config )\npspell_new_config() は、 pspell_config_create() で作成され、 関数 pspell_config_*() で修正された設定を使用して 新規辞書をオープンします。この方法は最も柔軟で、 pspell_new() および pspell_new_personal() で提供された全ての機能を有しています。
int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )\npspell_new_personal() は、個人の単語リストと共に 新規辞書をオープンし、辞書リンクIDを返します。この ID は他の pspell 関数で使用されます。単語リストは修正可能で、必要に応じて pspell_save_wordlist() で保存することも可能です。 しかし、置換の組は保存されません。置換の組を保存するには、 pspell_config_create() を用いて設定を作成し、 pspell_config_personal() で個人の単語リストを 設定し、pspell_config_repl() で置換のファイルを 設定し、pspell_new_config() で新規の辞書を オープンします。\n詳細な情報および例については、pspell の Web サイト :&raquo; http://aspell.net/ にあるインラインマニュアルを参照ください。
int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )\npspell_new() は、新規の辞書をロードして 辞書リンク ID を返します。このリンク ID は、他の pspell 関数で使用されます。\n詳細な情報および例については、pspell の Web サイト :&raquo; http://aspell.net/ にあるインラインマニュアルを参照ください。
bool pspell_save_wordlist ( int $dictionary_link )\npspell_save_wordlist() は、 現在のセッションから個人の単語リストを保存します。 ファイルの位置は pspell_config_personal() および(オプションで) pspell_config_repl() で指定されている必要があります。
bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )\npspell_store_replacement() は、単語の置換候補を 保存します。これにより、この後の pspell_suggest() で置換候補を返すことが可能と なります。この関数の利点を活かすためには、辞書をオープンする際に pspell_new_personal() を使用する必要があります。 置換候補を恒久的に保存するためには pspell_config_personal() を使用する必要があり、 pspell_config_repl() によりカスタム単語リストを 保存するパスを設定し、この後、変更点をディスクへ書き込むために pspell_save_wordlist() を使用する必要があります。
array pspell_suggest ( int $dictionary_link , string $word )\npspell_suggest() は、 指定した単語について可能性のあるスペルの配列を返します。
bool putenv ( string $setting )\nサーバの環境変数に setting を追加します。 この環境変数は、カレントのリクエストを実行している間のみ存在します。 リクエスト終了時、環境変数は元の状態に戻されます。\nある種の環境変数が変更されることは潜在的なセキュリティリスクとなる 可能性があります。safe_mode_allowed_env_vars ディレクティブには接頭辞のカンマ区切りのリストが含まれます。セーフ モードでは、ユーザはこのディレクティブで指定された接頭辞で始まる名前 を有する環境変数のみを変更可能となります。 デフォルトでは、ユーザはPHP_ で始まる環境変数 (例えばPHP_FOO=BAR)のみを変更可能です。注意:この ディレクティブが空の場合、PHPはユーザに全ての環境変数を修正できる許可 を与えてしまいます!\nsafe_mode_protected_env_vars ディレクティブには、 カンマ区切りの環境変数のリストが含まれます。ユーザは、この環境変数 をputenv()により変更することができません。これら の変数は、safe_mode_allowed_env_varsが変更するこ とを許可している場合でも保護されます。
bool px_close ( resource $pxdoc )\nparadox データベースを閉じます。この関数は、ファイルは閉じません。 この後で fclose() をコールする必要があります。
bool px_create_fp ( resource $pxdoc , resource $file , array $fielddesc )\n新しい paradox データベースファイルを作成します。 実際のファイルは、事前に fopen() でオープンしておく必要があります。 ファイルが書き込み可能であることを確認してください。
string px_date2string ( resource $pxdoc , int $value , string $format )\nparadox ファイルに保存されている日付を、人間が理解しやすい形式に変換します。 paradox の日付は、0000 年 1 月 1 日からの経過日数で保存されています。 この関数は利便性を高めるためだけのもので、 以下の例のように数学関数やカレンダー関数で同等のことを実現できます。
bool px_delete_record ( resource $pxdoc , int $num )\nこの関数は、データベースからレコードを削除します。 データベースファイル内の領域を開放するわけではなく、単に削除マークをつけます。 その後、新しいレコードが挿入される際にこの領域が再利用されます。
bool px_delete ( resource $pxdoc )\nparadox ファイルのリソースを削除し、メモリを開放します。
array px_get_field ( resource $pxdoc , int $fieldno )
array px_get_info ( resource $pxdoc )
string px_get_parameter ( resource $pxdoc , string $name )\nさまざまなパラメータを取得します。
array px_get_record ( resource $pxdoc , int $num [, int $mode = 0 ] )
array px_get_schema ( resource $pxdoc [, int $mode = 0 ] )\npx_get_schema() は、データベーススキーマを返します。
float px_get_value ( resource $pxdoc , string $name )\nさまざまな値を取得します。
int px_insert_record ( resource $pxdoc , array $data )\nデータベースに新しいレコードを挿入します。新しいレコードは、 必ずデータベースの最後に格納されるとは限りません。 最初に見つかった空きスロットの位置に格納されることになります。\nレコードのデータは、フィールド値の配列として渡します。 配列の要素がデータベースのフィールドに対応していなければなりません。 配列の要素数がデータベースのフィールド数より少ない場合は、 それ以降のフィールドには null が設定されます。\nほとんどのフィールドは、その型に対応する PHP の型でデータを渡します。 例えば PX_FIELD_LONG、PX_FIELD_SHORT および PX_FIELD_AUTOINC の場合は long 型、PX_FIELD_CURRENCy および PX_FIELD_NUMBER の場合は double 型が使用されます。blob 型や alpha 型のフィールドには、文字列を使用します。\nPX_FIELD_TIME および PX_FIELD_DATE については long 型を指定します。 前者は深夜 0 時からの経過ミリ秒数、後者は 0000 年 1 月 1 日からの 経過日数を指定します。以下に、現在の日付および時刻を paradox のフィールドで使用できる値に変換する例を 2 種類示します。
resource px_new ( void )\n新しい paradox オブジェクトを作成します。この関数は、 その他の関数をコールする前にコールする必要があります。 px_new() は、ディスク上にファイルを作成するのではなく、 ただ単に paradox オブジェクトのインスタンスを作成するだけです。 オブジェクト指向のインターフェイスを使用している場合は、 この関数をコールしてはいけません。代わりに new paradox_db() を使用してください。
int px_numfields ( resource $pxdoc )\nデータベースファイル内のフィールドの数を返します。
int px_numrecords ( resource $pxdoc )\nデータベースファイル内のレコードの数を取得します。
bool px_open_fp ( resource $pxdoc , resource $file )\n既存の paradox データベースファイルをオープンします。事前に fopen() で実際のファイルをオープンしておく必要があります。 この関数は、プライマリインデックスファイルをオープンして、 それを paradox データベースのように扱うために使用することもできます。 この機能は、プライマリインデックスの内容を調査したい人のためにサポートされています。 データベースファイルへのアクセスを高速化するなどのために使用することはできません。
bool px_put_record ( resource $pxdoc , array $record [, int $recpos = -1 ] )\nparadox データベースにレコードを保存します。たとえ空きスロットがあったとしても、 レコードは常にデータベースの最後に追記されます。 最初に見つかった空きスロットにデータを書き込みたい場合は、 px_insert_record() を使用します。
array px_retrieve_record ( resource $pxdoc , int $num [, int $mode = 0 ] )\nこの関数は px_get_record() と非常によく似ていますが、 関数内でデータを取得するために使用している方法が違います。 この関数は、各フィールドの値を取得するのに pxlib の機能を使用しており、 結果としてより多くのフィールド型をサポートしています。
bool px_set_blob_file ( resource $pxdoc , string $filename )\nblob の読み込みあるいは書き込みを行おうとしているファイルの名前を設定します。 この関数をコールしていない場合、もしデータがレコードの一部であるが blob ファイルに保存されていないときには、 px_get_record() あるいは px_retrieve_record() は blob フィールドのデータのみを返します。 blob データが blob フィールドのサイズに収まるほど小さい場合は、 それはレコード内に保存されます。\npx_set_blob_file() をコールせずに px_put_record()、 px_insert_record() あるいは px_update_record() をコールすると、 データベースファイルに収まらない場合にデータが切り詰められます。\nこの関数を 2 度コールすると、 最初の blob ファイルを閉じて新しいほうをオープンします。
bool px_set_parameter ( resource $pxdoc , string $name , string $value )\nさまざまなパラメータを設定します。
void px_set_tablename ( resource $pxdoc , string $name )\npx_create_fp() で作成した、paradox データベースのテーブル名を設定します。この関数は非推奨です。代わりに px_set_parameter() を使用してください。
bool px_set_targetencoding ( resource $pxdoc , string $encoding )\n文字フィールドからデータを取得する際のエンコーディングを設定します。 すべての文字フィールドは、この関数で設定したエンコーディングに変換されます。 エンコーディングが指定されていない場合は、データベースファイルで指定した DOS コードページでデータが返されます。 encoding には iconv あるいは recode が理解できる文字列 ID を指定することができます。 Unix システムでは、iconv -l を実行すると使用可能なエンコーディングの一覧を取得できます。\nこの関数は非推奨です。代わりに px_set_parameter() を使用してください。\nデータベースファイルに保存されている DOS コードページを知るには px_get_info() も参照ください。
bool px_set_value ( resource $pxdoc , string $name , float $value )\nさまざまな値を設定します。
string px_timestamp2string ( resource $pxdoc , float $value , string $format )\nparadox ファイルに保存されているタイムスタンプを、 人間が理解しやすい形式に変換します。 paradox のタイムスタンプは、0000 年 1 月 1 日からの経過ミリ秒数で保存されています。 この関数は利便性を高めるためだけのもので、 以下の例のように数学関数やカレンダー関数で同等のことを実現できます。
bool px_update_record ( resource $pxdoc , array $data , int $num )\nデータベース内のレコードを更新します。レコード番号は 0 から始まります。\nレコードのデータは、フィールド値の配列として渡します。 配列の要素がデータベースのフィールドに対応していなければなりません。 配列の要素数がデータベースのフィールド数より少ない場合は、 それ以降のフィールドには null が設定されます。
string qdom_error ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
QDomDocument qdom_tree ( string $doc )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string quoted_printable_decode ( string $str )\nこの関数は、quoted printable 文字列をデコードし、 8 ビットバイナリ文字列を返します (&raquo; RFC2821 の section 4.5.2 ではなく &raquo; RFC2045 の section 6.7 によれば、付随するピリオドは行の開始から削除されません) 。\nこの関数は imap_qprint() に似ていますが、 動作に IMAP モジュールを必要としないという違いがあります。
string quoted_printable_encode ( string $str )\n&raquo; RFC2045 の section 6.7 に従って作成した quoted printable 文字列を返します。\nこの関数は imap_8bit() に似ていますが、 動作に IMAP モジュールを必要としないという違いがあります。
string quotemeta ( string $str )\n文字列 str について、\n. \\ + * ? [ ^ ] ( $ ) の前にバックスラッシュ文字 (\\) でクォートして返します。
float rad2deg ( float $number )\nこの関数は、number の単位をラジアンから度に変換します。
resource radius_acct_open ( void )
bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries )\nradius_add_server() は複数回コールされることも ありえます。また、radius_config() とともに 使用されることでしょう。最大で 10 までのサーバを指定できます。 複数のサーバが指定されると、有効なレスポンスを受信するか あるいは各サーバへの接続回数が max_tries をこえるまでラウンドロビン形式でのアクセスを試みます。
resource radius_auth_open ( void )
bool radius_close ( resource $radius_handle )\n各リクエストの終了時に PHP がすべてのリソースを開放するので、 この関数をコールする必要はありません。
bool radius_config ( resource $radius_handle , string $file )\nRadius リクエストを発行する前には、ライブラリが接続可能なサーバを 知っている必要があります。ライブラリを設定するいちばん簡単な方法は radius_config() をコールすることです。 radius_config() は、ライブラリに &raquo; radius.conf 形式のファイルを読み込ませます。
bool radius_create_request ( resource $radius_handle , int $type )\nRadius リクエストには、リクエストの種類を指定するコードおよび 追加情報を指定するゼロ個以上の属性が含まれます。新しいリクエストを 作成するには、radius_create_request() をコールします。
string radius_cvt_addr ( string $data )
int radius_cvt_int ( string $data )
string radius_cvt_string ( string $data )
string radius_demangle_mppe_key ( resource $radius_handle , string $mangled )\nMS-CHAPv2 で MPPE を使用している場合には、送信キーおよび受信キーが 変形されます (&raquo; RFC 2548 を参照ください)。しかしこの関数は無意味です。なぜなら PHP では PPTP-MPPE は実装されていないし、今後も実装されるとは思えないからです。
string radius_demangle ( resource $radius_handle , string $mangled )\nセキュリティ上の理由により、(パスワード、MS-CHAPv1 MPPE キーなど) いくつかのデータは変形されます。それを使用する際には事前に復元する 必要があります。
mixed radius_get_attr ( resource $radius_handle )\nRadius リクエストと同様、各レスポンスもゼロ個以上の属性を含んでいます。 radius_send_request() でレスポンスを受け取ったら、 radius_get_attr() を使用して各属性を抽出することが できます。radius_get_attr() がコールされるたびに、 現在のレスポンスから次の属性を取得します。
array radius_get_vendor_attr ( string $data )\nradius_get_attr() が RADIUS_VENDOR_SPECIFIC を返す場合に、 ベンダを特定するために radius_get_vendor_attr() をコールします。
bool radius_put_addr ( resource $radius_handle , int $type , string $addr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_attr ( resource $radius_handle , int $type , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_int ( resource $radius_handle , int $type , int $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_string ( resource $radius_handle , int $type , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string radius_request_authenticator ( resource $radius_handle )\nパスワードや暗号化キーのような加工されたデータを復元する際には リクエスト認証子が必要となります。
int radius_send_request ( resource $radius_handle )\nRadius リクエストを作成した後は、 radius_send_request() でそれを送信します。\nradius_send_request() 関数は、リクエストを送信して 応答を待ちます。定義されているサーバ間で、必要に応じてラウンドロビン 形式で再試行します。
string radius_server_secret ( resource $radius_handle )\nパスワードや暗号化キーのような加工されたデータを復元する際の SALT として、共有秘密鍵が必要となります。
string radius_strerror ( resource $radius_handle )\nRadius 関数が失敗した場合にはエラーメッセージが記録されます。 この関数により、エラーメッセージを取得することが可能となります。
int rand ( void )\nint rand ( int $min , int $max )\nオプションの引数 min ,max を省略してコールした場合、rand() は 0 と getrandmax() の間の擬似乱数(整数)を返します。 例えば、5 から 15 まで（両端を含む）の乱数を得たい場合、 rand(5, 15) とします。
array range ( mixed $low , mixed $high [, number $step ] )\nある範囲の整数を有する配列を作成します。
bool rar_close ( resource $rar_file )\nRar アーカイブをクローズし、割り当てられた全リソースを開放します。
RarEntry rar_entry_get ( resource $rar_file , string $entry_name )\nRar アーカイブから、エントリオブジェクトを取得します。
Rar\nbool extract ( string $dir [, string $filepath ] )\nRar::extract() は、エントリのデータを dir に展開します。指定した dir に、エントリの名前と同名の新しいファイルを作成します。
Rar\nint getAttr ( void )\nRar::getAttr() は、アーカイブエントリの属性を返します。
Rar\nint getCrc ( void )\nRar::getCrc() は、アーカイブエントリの CRC を返します。
Rar\nstring getFileTime ( void )\nエントリの最終更新時刻を取得します。
Rar\nint getHostOs ( void )\nRar::getHostOs() は、アーカイブエントリの ホスト OS のコードを返します。
Rar\nint getMethod ( void )\nRar::getMethod() は、現在のアーカイブエントリを 追加する際に使用したメソッドの番号を返します。
Rar\nstring getName ( void )\nRar::getName() は、アーカイブエントリの名前を返します。
Rar\nint getPackedSize ( void )\n圧縮後のアーカイブエントリのサイズを取得します。
Rar\nint getUnpackedSize ( void )\n展開後のアーカイブエントリのサイズを取得します。
Rar\nint getVersion ( void )\nアーカイブエントリを追加するのに用いたアーカイバのバージョンを取得します。
array rar_list ( resource $rar_file )\nRar アーカイブから、エントリの一覧を取得します。
resource rar_open ( string $filename [, string $password ] )\n指定した Rar アーカイブをオープンし、Rar ファイルリソースを返します。
string rawurldecode ( string $str )\n文字列の中にパーセント記号 (%) に続いて 2 つの 16 進数があるような表現形式を、文字定数に置き換えて返します。
string rawurlencode ( string $str )\n指定した文字列を &raquo; RFC 1738 にもとづいてエンコードします。
array exif_read_data ( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]] )\nexif_read_data() は、JPEG あるいは TIFF の画像ファイルから EXIF ヘッダを読み込みます。この方法で、デジタルカメラが生成したメタデータを 読み込むことが可能です。\nEXIF ヘッダは、デジタルカメラが作成した JPEG/TIFF 画像によく含まれています。しかし残念なことに、 そのタグ付けの方法はメーカーによって異なります。 したがって、特定の Exif ヘッダが常に存在すると仮定することはできません。\nHeight および Width は、getimagesize() と同じ方法で計算されます。 よって、これらの値は決してヘッダの一部として返してはいけません。 また、html は高さ/幅を表すテキスト文字列で、 通常の HTML の中で用いられます。\nExif ヘッダに著作権表示が含まれている場合、それ自身には 2 つの値を 含めることが可能です。Exif 2.10 のこの矛盾した規格に対応するため、 COMPUTED セクションは Copyright.Photographer および Copyright.Editor の両方を返します。 また IFD0 セクションには 2 つのエントリを NULL 文字で区切った バイト配列を含めます。データ型が間違っている場合は最初のエントリのみを かえします（Exif の通常の挙動）。COMPUTED には、元の著作権文字列あるいは カンマで区切られた写真と編集者の著作権表示のどちらかを Copyright エントリに含めることが可能です。\nUserComment タグにも Copyright タグと同様の問題があります。ここにも 2 つの値を格納することが可能です。それは使用しているエンコーディングと 値自身の 2 つです。そうなると、IFD セクションにはエンコーディングのみを 含めるか、あるいはバイト配列を格納することになります。COMPUTED セクションは UserCommentEncoding および UserComment を両方格納することができます。UserComment はどちらの 場合でも有効なので、IFD0 セクションではこちらを優先すべきです。\nexif_read_data() は、EXIF 仕様（&raquo; http://exif.org/Exif2-2.PDF, 20 ページ）に基づいて EXIF データタグの検証も行います。
string readdir ([ resource $dir_handle ] )\nディレクトリから次のファイルのファイル名を返します。 ファイル名はファイルシステム上に格納されている順番で返されます。
int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )\nファイルを読んで標準出力に書き出します。
int readgzfile ( string $filename [, int $use_include_path = 0 ] )\nファイルを読み込み、解凍し、標準出力に書き込みます。\nreadgzfile()は、gzip フォーマットでないファイルの読込にも使用可能です。この場合、 readgzfile() はファイルを解凍せずに直接読込みます。
bool readline_add_history ( string $line )\nこの関数は、コマンドラインヒストリに 1 行追加します。
bool readline_callback_handler_install ( string $prompt , callback $callback )\nreadline コールバックインターフェースを設定し、プロンプト prompt を表示して入力を受け取ります。 コールバック関数 callback はひとつのパラメータを とり、そこにはユーザの入力内容が格納されます。一度登録したコールバック インターフェースを削除せずもういちどこの関数をコールした場合、もとの インターフェースは自動的に上書きされます。\nコールバック機能は stream_select() と組み合わせると 有用です。これは readline() とは異なり、 IO とユーザの入力を交互に取り扱います。
bool readline_callback_handler_remove ( void )\nインストールされたハンドラを削除し、端末の設定をもとに戻します。
void readline_callback_read_char ( void )\nユーザが入力した文字を読み込みます。改行を受け取ると、この関数は readline_callback_handler_install() で インストールされた readline コールバックインターフェースに対して 入力待ちを通知します。
bool readline_clear_history ( void )\nこの関数はコマンドラインヒストリ全体をクリアします。
bool readline_completion_function ( callback $function )\nこの関数は補完用の関数を登録します。 これは、Bash を使用している際に、タブキーを 押して得られるのと同様の機能です。
mixed readline_info ([ string $varname [, string $newvalue ]] )\nさまざまな readline の内部変数の取得あるいは設定を行います。
array readline_list_history ( void )\nコマンドラインヒストリ全体を取得します。
void readline_on_new_line ( void )\nreadline に、カーソルが新しい行に移動したことを通知します。
bool readline_read_history ([ string $filename ] )\nこの関数は、コマンドヒストリをファイルから読み込みます。
void readline_redisplay ( void )\n画面の再描画を readline に依頼します。
bool readline_write_history ([ string $filename ] )\nこの関数はコマンドヒストリをファイルに書き込みます。
string readline ([ string $prompt ] )\nユーザからの入力を一行読み込みます。 この行を readline_add_history(). を用いてヒストリに追加する必要があります。
string readlink ( string $path )\nreadlink() は同名の C 関数と同じ動作をします。
string realpath ( string $path )\nrealpath() は、 入力 path のシンボリックリンクをすべて展開し、 「/./」「/../」「/」などの参照をすべて解決することにより、正規化した絶対パスを返します。
bool recode_file ( string $request , resource $input , resource $output )\nコード変換指令 request に基づきファイルハンドル input が指すファイルをファイルハンドル output が指すファイルにコード変換します。
string recode_string ( string $request , string $string )\nコード変換指令 request に基づき文字列 string のコードを変換します。
string recode_string ( string $request , string $string )\nコード変換指令 request に基づき文字列 string のコードを変換します。
void register_shutdown_function ( callback $function [, mixed $parameter [, mixed $... ]] )\nスクリプト処理が完了した際に実行される func という名前の関数を登録します。\nregister_shutdown_function() は複数回コールする ことが可能で、登録された順に関数がコールされます。 登録した関数内で exit() をコールした場合、 処理はそこで終了してその他のシャットダウン関数はコールされません。
bool register_tick_function ( callback $function [, mixed $arg [, mixed $... ]] )\ntick がコールされた際に実行される func という名前の関数を登録します。
bool rename_function ( string $original_name , string $new_name )\nグローバルの関数テーブルで関数名を変更します。 一時的に組み込み関数を上書きする際に有用です。
bool rename ( string $oldname , string $newname [, resource $context ] )\noldname を newname にリネームしようと試みます。
require_once() 文は require() とほぼ同じ意味ですが、 ファイルがすでに読み込まれているかどうかを PHP がチェックするという点が異なります。 すでに読み込まれている場合はそのファイルを読み込みません。\n_once の振る舞い、およびそれが _once なし版とどのように異なるのかについての情報は、 include_once() のドキュメントを参照ください。
require() は include() とほぼ同じですが、失敗した場合に E_ERROR レベルの致命的なエラーが発生するという点が異なります。 つまり、スクリプトの処理がそこで止まってしまうということです。一方 include() の場合は、警告 (E_WARNING) を発するもののスクリプトの処理は続行します。\nどのように動作するかについては include() のドキュメントを参照ください。
mixed reset ( array &$array )\nreset() は、array の内部ポインタの先頭の要素に戻し、配列の最初の要素の値を返します。
bool restore_error_handler ( void )\nset_error_handler() を使用してエラーハンドラ関数を 変更した後、元のエラーハンドラ(組込またはユーザ定義関数)に戻すために 使用されます。
bool restore_exception_handler ( void )\nset_exception_handler() を使用して例外ハンドラ関数を 変更した後、元の例外ハンドラ(組込またはユーザ定義関数)に戻すために 使用されます。
void restore_include_path ( void )\ninclude_path 設定値を php.ini でセットされたオリジナルの設定に戻します。
関数内で呼び出されると、return()文は即座に その関数の実行を停止し、引数を関数の値として返します。 return()はまた、eval()文や スクリプト自体の実行を終了させることが出来ます。\nグローバルスコープで呼び出されると、現在実行中のスクリプトが終了 します。もしそのスクリプトがinclude()もしくは require()されたものである場合、制御は呼び出し元 のファイルに戻ります。また、そのスクリプトがinclude() されたものである場合は、return()に与えられた引数 の値はinclude()の戻り値となります。 return()がメインスクリプトで呼び出された場合は スクリプトが終了します。また、 設定ファイルの auto_prepend_file 又は  auto_append_fileオプションで指定されたスクリプトの場合も 同様にそのスクリプトが終了します。\nさらに詳しい情報に関しては 返り値を参照してください。
bool rewind ( resource $handle )\nhandle のファイル位置指示子を、 ファイルストリームの先頭にセットします。
void rewinddir ([ resource $dir_handle ] )\ndir_handle で指定されたディレクトリの ストリームをディレクトリの先頭にリセットします。
bool rmdir ( string $dirname [, resource $context ] )\ndirname で指定されたディレクトリを 削除しようと試みます。ディレクトリは空でなくてはならず、また 適切なパーミッションが設定されていなければなりません。
float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )\nval を、指定した precision (小数点以下の桁数)に丸めた値を 返します。precision を負またはゼロ(デフォルト) とすることも可能です。
bool rpm_close ( resource $rpmr )\nrpm_close() は RPM ファイルポインタを閉じます。
mixed rpm_get_tag ( resource $rpmr , int $tagnum )\nrpm_get_tag() は、RPM ファイルのヘッダから 指定したタグを取得してそれを返します。
bool rpm_is_valid ( string $filename )\nrpm_is_valid() は、ファイルが RPM ファイルとして有効な形式であるかどうかを調べます。これは rpm_open() とは違って単にファイルを調べるだけであり、 他の関数で使用するためのファイルポインタは返しません。
resource rpm_open ( string $filename )\nrpm_open() は、RPM ファイルをオープンして それが正しい RPM 形式であるかどうかを調べます。
string rpm_version ( void )\nrpm_version() は、rpmreader 拡張モジュールの 現在のバージョンを返します。
bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\nこの関数は、配列を逆順に(高位から低位に)ソートします。
string rtrim ( string $str [, string $charlist ] )\nこの関数は文字列 str の最後から空白文字を取り除き、 取り除かれた文字列を返します。\n2 番目のパラメータを指定しない場合、 rtrim() は以下の文字を削除します。    &quot; &quot; (ASCII 32 (0x20)), 通常の空白。     &quot;\\t&quot; (ASCII 9 (0x09)), タブ。     &quot;\\n&quot; (ASCII 10 (0x0A)), 改行。     &quot;\\r&quot; (ASCII 13 (0x0D)), 復帰。     &quot;\\0&quot; (ASCII 0 (0x00)), NUL バイト。     &quot;\\x0B&quot; (ASCII 11 (0x0B)), 垂直タブ。
bool runkit_class_adopt ( string $classname , string $parentname )
bool runkit_class_emancipate ( string $classname )
bool runkit_constant_add ( string $constname , mixed $value )
bool runkit_constant_redefine ( string $constname , mixed $newvalue )
bool runkit_constant_remove ( string $constname )
bool runkit_function_add ( string $funcname , string $arglist , string $code )
bool runkit_function_copy ( string $funcname , string $targetname )
bool runkit_function_redefine ( string $funcname , string $arglist , string $code )
bool runkit_function_remove ( string $funcname )
bool runkit_function_rename ( string $funcname , string $newname )
bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )\ninclude() と似ていますが、関数やクラスの外部に あるコードは無視されます。 また、flags の設定により、 現在実行中の環境内の既存の関数やクラスを自動的に上書きします。
bool runkit_lint_file ( string $filename )\nrunkit_lint_file() 関数は、指定したファイルの 文法チェック（lint）を行い、スクリプトのエラーをチェックします。 これは、コマンドラインから php -l を実行するのと同じです。
bool runkit_lint ( string $code )\nrunkit_lint() 関数は、指定した PHP コードの 文法チェック（lint）を行い、スクリプトのエラーをチェックします。 これは、コマンドラインから php -l を実行するのと同じですが、 runkit_lint() はファイル名ではなくコードそのものを 受け付けます。
bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )
bool runkit_method_remove ( string $classname , string $methodname )
bool runkit_method_rename ( string $classname , string $methodname , string $newname )
bool runkit_return_value_used ( void )
mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )\n通常、（echo() や print() などの） あらゆる出力は、親のスコープから出力しているかのように出力されます。 しかし、runkit_sandbox_output_handler() を使用すると サンドボックス内の出力（エラーを含む）をサンドボックス外で受け取ることが 可能です。
array runkit_superglobals ( void )
SAMConnection\nbool commit ( void )\n接続オブジェクトに対して &quot;commit&quot; メソッドをコールすると、 現在処理中のトランザクションのすべての内容をコミットします。
SAMConnection\nbool connect ( string $protocol [, array $properties ] )\nSAMConnection オブジェクトに対して &quot;connect&quot; メソッドをコールすると、 PHP スクリプトをメッセージングサーバと接続させます。 接続が作成されるまでは、メッセージの送受信は行われません。
SAMConnection\n__construct ( void )\n新しい SAMConnection オブジェクトを作成します。
SAMConnection\nbool disconnect ( void )\nSAMConnection オブジェクトに対して &quot;disconnect&quot; メソッドをコールすると、 PHP スクリプトとメッセージングサーバとの接続を解除します。 接続が解除された後は、メッセージの送受信はできません。
SAMConnection\nint $errno;\nerrno() には、この接続で最後に実行された SAM 操作のエラーコードを表す数値が含まれます。 直近の操作が正常に終了した場合は、このプロパティは 0 となります。
SAMConnection\nstring $error;\nこの接続で最後に実行された SAM 操作のテキストによる説明が含まれます。 直近の操作が正常に終了した場合は、このプロパティには空の文字列が含まれます。
SAMConnection\nbool isConnected ( void )\n接続オブジェクトに対して &quot;isConnected&quot; メソッドをコールすると、 PHP スクリプトがメッセージングサーバと接続されているかどうかを調べます。 このメソッドは、SAMConnection オブジェクトが正常にメッセージングサーバに接続できた場合に TRUE、それ以外の場合に FALSE を返します。 メッセージングサーバとの接続が確立されない限り、 メッセージの送受信はできません。
SAMConnection\nSAMMessage peek ( string $target [, array $properties ] )
SAMConnection\narray peekAll ( string $target [, array $properties ] )
SAMConnection\nSAMMessage receive ( string $target [, array $properties ] )
SAMConnection\nSAMMessage remove ( string $target [, array $properties ] )\nメッセージをキューから削除します。
SAMConnection\nbool rollback ( void )\n現在作業中の内容をロールバックします。
SAMConnection\nstring send ( string $target , SAMMessage $msg [, array $properties ] )\n&quot;send&quot; メソッドを使用して、メッセージを指定したキューに送信したり 指定したトピックに投稿したりします。このメソッドは、 メッセージに返信したり応答したりする際に使用する ID を返します。
&quot;setdebug&quot; メソッドを使用して、追加のデバッグ出力を有効あるいは無効にします。 SAM フレームワークは、メソッド/関数 エントリや終了トレースデータなどの追加情報を提供します。 プロトコル固有の実装についても追加出力として提供します。\nSAMConnection\nvoid setDebug ( bool $switch )
SAMConnection\nstring subscribe ( string $targetTopic )\n&quot;subscribe&quot; メソッドを使用して、指定したトピックを購読します。
SAMConnection\nbool unsubscribe ( string $subscriptionId [, string $targetTopic ] )\n&quot;unsubscribe&quot; メソッドを使用して、指定したトピックの購読を解除します。
SAMMessage\nstring $nody;\n&quot;body&quot; プロパティには、メッセージの本文が含まれます。 常に設定されているとは限りません。
SAMMessage\n__construct ([ mixed $body ] )\n新しい SAMMessage オブジェクトを作成します。 オプションでメッセージ本文を指定します。
SAMMessage\nobject $header;\nheader プロパティは、メッセージと関連付けられるシステムプロパティや ユーザプロパティのコンテナとなります。\nプロパティは、 メッセージの送信者によってメッセージングシステムでの動作を制御するために指定されたり、 あるいはメッセージングシステム自身によって受信者に追加情報・ メッセージの処理方法を知らせるために指定されたりします。\nSAM が理解できるいくつかのプロパティについては、 対応する定数が定義されています。 しかし、SAM の実装は大半のプロパティを無視し、そのままメッセージングシステムに渡します。 これにより、アプリケーションがメッセージング固有のプロパティを使用したり、 独自の &quot;ユーザ&quot; プロパティを定義することができるようになります。\nSAM で定義済みのプロパティは次のようになります。    プロパティ名 とりうる値     SAM_MESSAGEID  メッセージを受信する場合は、このフィールドにはメッセージを識別する一意な ID が含まれます。これは、メッセージングシステムによって自動的に割り当てられるものです。 メッセージを送信する場合は、このフィールドは無視されます。    SAM_REPLY_TO  このメッセージに対する返信を投稿するキューの識別子を指定します。    SAM_TYPE\n送信するメッセージの型を指定します。 SAM_TEXT はメッセージ本文の内容がテキスト文字列であることを示し、 SAM_BYTES はメッセージ本文の内容が 何らかのアプリケーションで定義されているフォーマットであることを意味します。\nこのプロパティの使用法は、メッセージングサーバに依存します。 たとえば、JMS (Java Message Service) の仕様をサポートしているメッセージングサーバは、 このプロパティを解釈して &quot;jms_text&quot; 型および &quot;jms_bytes&quot; 型のメッセージを送信します。 さらに、SAM_TYPE プロパティが SAM_TEXT に設定された場合は、 メッセージ本文のデータが UTF8 エンコードされた文字列であるものと期待されます。\nプロパティの値を設定する際には、 その内容をメッセージングシステムにどのように配送するかのヒントを指定すると便利なことがあります。 デフォルトではプロパティの値はテキストとして扱われます。この場合は、 以下のシンプルな構文で値を設定します。
SDO_DataObject SCA::createDataObject (  string $type_namespace_uri  ,  string $type_name  )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのメソッドは、SDO を作成して返す必要のある SCA コンポーネントの内部で使用します。 パラメータとして、SDO の名前空間 URI と型名を指定します。 名前空間と型は、コンポーネント内の @types アノテーションで指定されているスキーマファイルのいずれかで定義されていなければなりません。
mixed SCA::getService (  string $target  [,  string $binding  [,  array $config  ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n対象を調べ、適切な種類のプロキシを作成して返します。 対象がローカル PHP コンポーネントの場合は SCA_LocalProxy を返します。 対象が WSDL ファイルの場合は SCA_SoapProxy を返します。
SDO_DataObject SCA_LocalProxy::createDataObject (  string $type_namespace_uri  ,  string $type_name  )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのメソッドは、通常の PHP スクリプト内で使用するか、 SCA コンポーネントがローカルサービスとして使用する SDO を作成するために使用します。 パラメータとして、SDO の名前空間 URI と型名を指定します。 名前空間と型は、コールされるコンポーネントのインターフェイスで定義されている必要があります。 つまり、SCA_LocalProxy がプロキシとして働くコンポーネント内の @types アノテーションで指定されているスキーマファイルのいずれかで 名前空間と型が定義されていなければなりません。
SDO_DataObject SCA_SoapProxy::createDataObject (  string $type_namespace_uri  ,  string $type_name  )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのメソッドは、通常の PHP スクリプト内で使用するか、 SCA コンポーネントがウェブサービスとして使用する SDO を作成するために使用します。 パラメータとして、SDO の名前空間 URI と型名を指定します。 名前空間と型は、ウェブサービスの WSDL で定義されている必要があります。 ウェブサービス自身も SCA コンポーネントである場合は、 SCA_SoapProxy がプロキシとして働くコンポーネント内の @types アノテーションで指定されているスキーマファイルのいずれかで 名前空間と型が定義されていなければなりません。
array scandir ( string $directory [, int $sorting_order = 0 [, resource $context ]] )\ndirectory 内のファイルおよびディレクトリを 配列で返します。
void SDO_DAS_ChangeSummary::beginLogging ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject への変更内容の記録を開始します。
void SDO_DAS_ChangeSummary::endLogging ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject への変更内容の記録を終了します。
SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更された SDO_DataObjects の SDO_List を取得します。 取得したデータオブジェクトから、それらの変更前の値や 変更の型を取得できます。
int SDO_DAS_ChangeSummary::getChangeType ( SDO_DataObject $dataObject )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定した SDO_DataObject に対する変更の型を取得します。
SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer ( SDO_DataObject $data_object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n削除された SDO_DataObject の削除前のコンテナ (SDO_DataObject) を取得します。
SDO_List SDO_DAS_ChangeSummary::getOldValues ( SDO_DataObject $data_object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更された SDO_DataObject の変更前の値のリストを取得します。 SDO_DataObject で変更されたプロパティの、変更前の値を示す SDO_DAS_Settings のリストを返します。
bool SDO_DAS_ChangeSummary::isLogging ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更内容が記録されるようになっているかどうかを調べます。
void SDO_DAS_DataFactory::addPropertyToType ( string $parent_type_namespace_uri , string $parent_type_name , string $property_name , string $type_namespace_uri , string $type_name [, array $options ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n型にプロパティを追加します。この型は、常に SDO_DAS_DataFactory が 知っていなければなりません (つまり、addType() を使用して追加されたもので なければなりません)。このプロパティは、型のプロパティとなります。 これを使用することによって、SDO_DataObject の構造を表すグラフモデルが 作成されます。
void SDO_DAS_DataFactory::addType ( string $type_namespace_uri , string $type_name [, array $options ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n名前空間および名前を指定して、SDO_DAS_DataFactory に新しい型を 追加します。この型はデータオブジェクトのモデルの一部となり、 データファクトリからこのモデルを作成可能となります。
SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DAS_DataFactory のインスタンスを取得するための スタティックメソッドです。このインスタンスは、取得当初は 基本的な SDO 型しか使用できないように設定されています。 データファクトリモデルを設定するのは データアクセスサービスの役目となります。 モデルを設定することで、PHP アプリケーションから SDO_DataFactory インターフェイスを使用して モデルを基にした SDO を作成できるようになります。 PHP アプリケーションは、データファクトリを常にデータアクセスサービスから 取得すべきです。このインターフェイスを使用すべきではありません。
SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DAS_DataObject の SDO_DAS_ChangeSummary、 あるいは存在しない場合に NULL を取得します。
void SDO_DAS_Relational::applyChanges (  PDO $database_handle  ,  SDODataObject $root_data_object  )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nPDO データベースハンドルとデータグラフのルートオブジェクトを受け取り、 データグラフの変更内容を吟味したうえで、その変更内容をデータベースに適用します。 適用される変更の内容は、データオブジェクトの作成や削除、 そしてデータオブジェクトのプロパティへの変更です。
SDO_DAS_Relational SDO_DAS_Relational::__construct (  array $database_metadata  [,  string $application_root_type  [,  array $SDO_containment_references_metadata  ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n渡されたメタデータを使用して、 リレーショナルデータアクセスサービスのインスタンスを作成します。
SDODataObject SDO_DAS_Relational::createRootDataObject ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n別の空のデータグラフのトップレベルにある、特別なルートオブジェクトを返します。 executeQuery() をコールしてデータグラフを作成するのではなく、 アプリケーション内でスクラッチからデータグラフを作成したい場合に使用します。\nこの特別なルートオブジェクトには、複数の値をとることのできる包含関係のプロパティが ひとつあります。プロパティの名前は、 リレーショナル DAS を作成した際に渡された、アプリケーションのルート型の名前となります。 プロパティの値には、このルート型の値しか指定できません。 アプリケーションがルート型に対してできることは、 createDataObject() をコールしてアプリケーションのルート型を渡し、 そのアプリケーション型のデータオブジェクトを作成させることだけです。
SDODataObject SDO_DAS_Relational::executePreparedQuery (  PDO $database_handle  ,  PDOStatement $prepared_statement  ,  array $value_list  [,  array $column_specifier  ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nクエリをリレーショナルデータベースに対して実行します。 実行には、渡された PDO データベースハンドルを使用します。 シンプルな executeQuery() と違う点は、 こちらはプリペアドステートメントと値のリストを受け取るというところです。 これを使用するほうがよい場面としては、次のふたつが考えられます。 まず、同じ文が引数だけを変えて何度も実行される場合。このような場合は、 最初に一度だけ文を準備しておくことでパフォーマンスを向上することができます。 もうひとつは、SQL 文にさまざまな値が指定される可能性があり、 それらの値が完全には信頼できないといった場合です。 後者の場合、それらの値を単純に連結して SQL を作成するのは危険です。 というのは、値の中に SQL で特別な意味を持つ文字が含まれているかもしれないからです。 このような、いわゆる SQL インジェクション攻撃から身を守るには、 プレースホルダ (あるいはパラメータマーカとも言い、&#039;?&#039; で表されます) を使用した SQL 文を準備しておくほうが安全です。 実際に使用する値のリストは、別の引数として指定します。 それ以外の点では、この関数は executeQuery() と同じです。つまり、 メタデータから作成されたモデルを使用し、結果セットを取得します。 そして結果をデータグラフとして返します。
SDODataObject SDO_DAS_Relational::executeQuery (  PDO $database_handle  ,  string $SQL_statement  [,  array $column_specifier  ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nクエリをリレーショナルデータベースに対して実行します。 実行には、渡された PDO データベースハンドルを使用します。 メタデータから作成されたモデルを使用し、結果セットを取得します。 結果をデータグラフとして返します。
int SDO_DAS_Setting::getListIndex ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n複数の値を持つプロパティの要素に変更が加えられた際に、その インデックスを取得します。 例えば、複数の値を持つプロパティの 3 番目の要素を変更したときには、 対応する変更内容オブジェクトから SDO_DAS_Setting を取得することができます。 取得した SDO_DAS_Setting 上で getListIndex() をコールすると、2 が返されます (リストのインデックスは 0 から数え始めます)。
int SDO_DAS_Setting::getPropertyIndex ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更されたプロパティのプロパティインデックスを返します。 このインデックスにより、データオブジェクト内で変更されたプロパティを 識別します。
string SDO_DAS_Setting::getPropertyName ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更されたプロパティのプロパティ名を返します。 この名前により、データオブジェクト内で変更されたプロパティを 識別します。
mixed SDO_DAS_Setting::getValue ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更されたプロパティの変更前の値を返します。 これは、データアクセスサービスが更新されたデータをデータソースに 書き込む際に使用可能です。DAS は、変更前の値をデータソースの 現在の値を比較することによって衝突を検出します。 もし 2 つが一致しなかったとしたら、データオブジェクトが作成された後に データソースが変更されているということであり、そのまま新しいデータを 書き込むとデータの整合性を崩す恐れがあります。
bool SDO_DAS_Setting::isSet ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変更前にプロパティが設定されていたかどうかを調べます。 もし変更前に設定されていた場合、SDO_DAS_Setting は 変更前の値も含んでいます。
void SDO_DAS_XML::addTypes ( string $xsd_file )\n事前に静的メソッド create() で作成した XML DAS に対して、2 番目以降のスキーマファイルを読み込みます。 有効なスキーマファイルならなんでも指定できますが、 このメソッドを使用法としてよくあるものは、 追加の複合型や名前の定義を含むスキーマファイルを追加することです。 親ドキュメントの例 4 を参照ください。
SDO_DAS_XML SDO_DAS_XML::create ([ mixed $xsd_file [, string $key ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこれは、SDO_DAS_XML クラスの唯一の静的メソッドです。 SDO_DAS_XML オブジェクトを作成するために使用します。
SDO_DataObject SDO_DAS_XML::createDataObject ( string $namespace_uri , string $type_name )\n名前空間 URI および型名を指定して SDO_DataObject を作成します。 型名はモデルで定義されていなければなりません。 定義されていない場合は SDO_TypeNotFoundException がスローされます。
SDO_DAS_XML_Document SDO_DAS_XML::createDocument ([ string $document_element_name ] )\nSDO_DAS_XML_Document SDO_DAS_XML::createDocument ( string $document_element_namespace_URI , string $document_element_name [, SDO_DataObject $dataobject ] )\nXML Document オブジェクトを返します。空のルート要素がひとつだけ含まれ、 プロパティは何も設定されていません。このメソッドの目的は、 ファイルや文字列からドキュメントを読み込むのではなく スクラッチから XML ドキュメントを作成することです。 作成されたドキュメントは、まるで何の要素も属性も持たない 空のドキュメント要素がひとつだけあるようなドキュメントが読み込まれたかのようになります。\ncreateDocument() は、 ドキュメント要素が何であるかを知っている必要があります。 単純な場合はこれは必須ではありません。 省略しても名前を特定できる場合には、メソッドに渡すパラメータを省略することができます。 しかし同一 XML DAS に複数のスキーマファイルを読み込むことも可能であり、 この場合には複数のドキュメント要素が定義される可能性があります。 さらに、名前空間が違うだけで同じ名前のドキュメント要素が存在する可能性もあります。 これらの場合にうまく対応するため、ドキュメント要素の名前を指定したり 要素名と名前空間を指定することができます。
SDO_DataObject SDO_DAS_XML_Document::getRootDataObject ( void )\nルート SDO_DataObject を返します。
string SDO_DAS_XML_Document::getRootElementName ( void )\nルート要素の名前を返します。
string SDO_DAS_XML_Document::getRootElementURI ( void )\nルート要素の URI 文字列を返します。
void SDO_DAS_XML_Document::setEncoding ( string $encoding )\nエンコーディングを文字列で設定します。
void SDO_DAS_XML_Document::setXMLDeclaration ( bool $xmlDeclatation )\nXML ドキュメントの最初に XML 宣言を生成するかどうかを制御します。 TRUE を設定すると XML 宣言が生成され、 FALSE にすると宣言を抑制します。
void SDO_DAS_XML_Document::setXMLVersion ( string $xmlVersion )\nxml バージョンを文字列で設定します。
SDO_XMLDocument SDO_DAS_XML::loadFile ( string $xml_file )\n指定したアドレスの xml インスタンスドキュメントから SDO_DataObjects のツリーを作成します。 SDO_DAS_XML_Document オブジェクトを返します。 ルートデータオブジェクトを取得するには SDO_DAS_XML_Document::getRootDataObject メソッドを使用します。
SDO_DAS_XML_Document SDO_DAS_XML::loadString ( string $xml_string )\n指定した xml インスタンス文字列から SDO_DataObjects のツリーを作成します。 SDO_DAS_XML_Document オブジェクトを返します。 ルートデータオブジェクトを取得するには SDO_DAS_XML_Document::getRootDataObject メソッドを使用します。
void SDO_DAS_XML::saveFile ( SDO_XMLDocument $xdoc , string $xml_file [, int $indent ] )\nSDO_DAS_XML_Document オブジェクトをファイルに保存します。
string SDO_DAS_XML::saveString ( SDO_XMLDocument $xdoc [, int $indent ] )\nSDO_DAS_XML_Document オブジェクトを文字列に保存します。
void SDO_DataFactory::create ( string $type_namespace_uri , string $type_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n名前空間 URI および型の名前を指定して、新しい SDO_DataObject を作成します。
void SDO_DataObject::clear ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject のプロパティを消去します。 読み込み専用のプロパティは影響を受けません。データオブジェクトに 対するこれ以降の isset() のコールは FALSE を返します。
SDO_DataObject SDO_DataObject::createDataObject ( mixed $identifier )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定したプロパティのデフォルト型で、子データオブジェクト SDO_DataObject を作成します。データオブジェクトは 自動的にツリーに挿入され、オブジェクトへのリファレンスが返されます。
SDO_DataObject SDO_DataObject::getContainer ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのデータオブジェクトを保有しているデータオブジェクトを取得します。
SDO_Sequence SDO_DataObject::getSequence ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの SDO_DataObject に対応する SDO_Sequence を取得します。 SDO_Sequence インターフェイスを使用したアクセスの場合も 同じ SDO_DataObject インスタンスのデータに対して操作を行いますが、 複数プロパティにまたがった並び順を管理することができます。
string SDO_DataObject::getTypeName ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nデータオブジェクトの型の名前を返します。 SDO_Model_ReflectionDataObject::getType().getName() に対応する便利なメソッドです。
string SDO_DataObject::getTypeNamespaceURI ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nデータオブジェクトの型の名前空間 URI を返します。 SDO_Model_ReflectionDataObject::getType().getNamespaceURI() に対応する便利なメソッドです。
mixed SDO_Exception::getCause ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの例外の原因を返します。原因が存在しない場合や不明な場合には NULL を返します。典型的な原因は SDO_CPPException オブジェクトで、 追加の診断情報を取得するために使用されます。
void SDO_List::insert ( mixed $value [, int $index ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nリスト内の指定した位置に、新しい要素を挿入します。 リストのそれ以降の項目は、ひとつ後ろにずれます。
SDO_Model_Type SDO_Model_Property::getContainingType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのプロパティを含む SDO_Model_Type を返します。
mixed SDO_Model_Property::getDefault ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nプロパティのデフォルト値を返します。 プリミティブデータ型のプロパティのみが デフォルト値を持つことができます。
string SDO_Model_Property::getName ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_Model_Property の名前を返します。
SDO_Model_Type SDO_Model_Property::getType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nプロパティの SDO_Model_Type を取得します。 SDO_Model_Type には、型の名前や名前空間 URI、プリミティブデータ型かどうか など、プロパティの型に関する情報が含まれます。
bool SDO_Model_Property::isContainment ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこのプロパティが包含関係を表すものかどうかを調べます。 包含関係を定義したものである場合に TRUE、 単なる参照である場合に FALSE を返します。
bool SDO_Model_Property::isMany ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nプロパティが複数の値を持つかどうかを調べます。 複数の値を持つプロパティであった場合に TRUE、それ以外の場合に FALSE を返します。
SDO_Model_ReflectionDataObject SDO_Model_ReflectionDataObject::__construct ( SDO_DataObject $data_object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject へのリフレクションのための SDO_Model_ReflectionDataObject を作成します。 SDO_DataObject へのリフレクションにより、モデル自身の情報への アクセスが可能になります。モデルに含まれる情報には、 データオブジェクトの型・シーケンス型 (プロパティを超えた並び順を 保持する) かどうか・オープン型 (個々のインスタンスがモデルを 拡張できる) かどうかなどがあります。また、データオブジェクトの プロパティやデフォルト値などの情報も含みます。
mixed SDO_Model_ReflectionDataObject::export ( SDO_Model_ReflectionDataObject $rdo [, bool $return ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject を表す文字列を取得します。 デフォルトでは標準出力に出力されますが、パラメータ return に TRUE を指定すると、結果を文字列で返します。
SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject を含んでいる SDO_Model_Property を取得します。 このメソッドは、リフレクション対象との包含関係を定義している 親オブジェクトのプロパティをたどる際に使用可能です。
array SDO_Model_ReflectionDataObject::getInstanceProperties ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject のインスタンスプロパティを取得します。 インスタンスプロパティには、データオブジェクトの型で定義されている プロパティのほかに (もしデータオブジェクトがオープン型の場合は) オープン型からのプロパティが含まれます。
SDO_Model_Type SDO_Model_ReflectionDataObject::getType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject の SDO_Model_Type を返します。SDO_Model_Type には 名前空間 URI・型の名前・プリミティブデータ型かどうかなど データオブジェクトの型についてのすべての情報が含まれます。
SDO_Model_Type SDO_Model_Type::getBaseType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの型の基底型を取得します。この型が別の型を派生したものである場合に SDO_Model_Type、それ以外の場合に NULL を返します。基底型が存在するのは、 例えば XML スキーマで 以下のようにして他の型を継承した型を定義した場合です。\n<extension base=&quot;...&quot;>
string SDO_Model_Type::getName ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n型の名前を返します。型の名前および名前空間 URI を組み合わせることで 型を特定します。
string SDO_Model_Type::getNamespaceURI ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n型の名前空間 URI を返します。型の名前および名前空間 URI を組み合わせることで 型を特定します。
array SDO_Model_Type::getProperties ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_Model_Type で定義されているプロパティを指す SDO_Model_Property オブジェクトの配列を取得します。 個々の SDO_Model_Property にはプロパティ名、デフォルト値 などといった情報が含まれます。
SDO_Model_Property SDO_Model_Type::getProperty ( mixed $identifier )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの型の SDO_Model_Property を、 プロパティのインデックスや名前を指定して取得します。
bool SDO_Model_Type::isAbstractType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの SDO_Model_Type が抽象データ型であるかどうかを調べます。 抽象データ型である場合は TRUE を返します。この場合、 この型の SDO_DataObject を直接インスタンスかすることはできず、 そこから継承した他の型を使用することになります。
bool SDO_Model_Type::isDataType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの SDO_Model_Type がプリミティブなデータ型であるかどうかを調べます。 この型がプリミティブなデータ型である場合に TRUE、それ以外の場合に FALSE を返します。
bool SDO_Model_Type::isInstance ( SDO_DataObject $data_object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSDO_DataObject が、この SDO_Model_Type のインスタンスであるかどうかを 調べます。 指定した SDO_DataObject が、この SDO_Model_Type あるいはその派生クラスのインスタンスである場合に TRUE、それ以外の場合に FALSE を返します。
bool SDO_Model_Type::isOpenType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの型がオープン型であるかどうかを調べます。 この型がオープン型である場合に TRUE、それ以外の場合に FALSE を返します。 オープン型である SDO_DataObject は、定義されていない型のプロパティを 保持することができます。この機能は、XML ドキュメントのスキーマで\n<xsd:any>  要素が定義されているような場合をサポートするために 使用されます。
bool SDO_Model_Type::isSequencedType ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの型がシーケンス型であるかどうかを調べる この型がシーケンス型である場合に TRUE、それ以外の場合に FALSE を返します。 シーケンス型は複数のプロパティをまたがって要素の順序を管理することが 可能で、非構造化テキストを含むことができます。シーケンス型についての 詳細な情報は、 シーケンスデータオブジェクトの 使用 を参照ください。
SDO_Model_Property SDO_Sequence::getProperty ( int $sequence_index )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定したシーケンスインデックスに対応するプロパティを返します。
void SDO_Sequence::insert ( mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nシーケンス内の指定した位置に、新しい要素を挿入します。 シーケンスのそれ以降の項目は、ひとつ後ろにずれます。
void SDO_Sequence::move (  int $toIndex,  int $fromIndex )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nシーケンス内での項目の位置を変更します。 SDO_DataObject のプロパティの値には変更を加えません。
bool sem_acquire ( resource $sem_identifier )\nsem_acquire() は、(必要な場合) セマフォが確保できるまでブロックします。 既に確保されているセマフォを得ようとするプロセスは、 セマフォの獲得により max_aquire 値を超える場合、 永久にブロックされます。\nリクエスト処理の後、プロセスにより獲得された全てのセマフォのうち、 明示的に開放されていないものが自動的に開放され、警告が表示されます。
resource sem_get ( int $key [, int $max_acquire [, int $perm [, int $auto_release ]]] )\nsem_get() は、 System V セマフォを指定したキーでアクセスするために使用可能な ID を返します。\n同じキーで sem_get() を 2 度コールした場合、 別のセマフォ ID が返されます。 しかし、どちらの ID も同じそのセマフォをアクセスします。
bool sem_release ( resource $sem_identifier )\nsem_release() は、そのセマフォが コール元のプロセスにより現在確保されている場合、解放します。 そうでない場合、警告が表示されます。\nセマフォを解放した後、再び確保するには、sem_acquire() をコールします。
bool sem_remove ( resource $sem_identifier )\nsem_remove() は、指定したセマフォを削除します。\nセマフォを削除した後、そのセマフォにはもうアクセスできません。
string serialize ( mixed $value )\n値の保存可能な表現を生成します。\n型や構造を失わずに PHP の値を保存または渡す際に有用です。\nシリアル化された文字列を PHP の値に戻すには、 unserialize() を使用してください。
int session_cache_expire ([ string $new_cache_expire ] )\nsession_cache_expire() は現在の session.cache_expire の設定を返します。\nリクエストがあった時点でキャッシュの有効期限は session.cache_limiter で設定されたデフォルト値にリセットされます。 そのため、すべてのリクエストにおいて (そしてsession_start() をコールする前に) session_cache_expire() をコールする必要があります。
string session_cache_limiter ([ string $cache_limiter ] )\nsession_cache_limiter() は、 現在のキャッシュリミッタの名前を返します。\nキャッシュリミッタは、クライアントに送信されるキャッシュ制御用の HTTPヘッダを制御します。これらのヘッダは、ページの内容をクライアントやプロキシがキャッシュ する規則を定義します。例えば、キャッシュリミッタを nocacheに設定した場合、クライアント/プロキシのキャッ シュは無効になります。しかし、publicの場合は、 キャッシュを許可します。privateと設定すること も可能で、この場合、プロキシがキャッシュすることは許可しませんが クライアントがキャッシュすることは許可されます。\nprivateモードにおいて、Expireヘッダがクライア ントに送信されます。これは、Mozilla のようないくつかのブラウザを混乱させます。これを避けるには、 private_no_expireモードを使用してください。 このモードでは、Expireヘッダはクライアントに送信されません。\nキャッシュリミッタは、リクエスト開始時に session.cache_limiterに保存されたデフォルト値 にリセットされます。つまり、各リクエスト毎に(アウトプットバッファ が無効な場合は、session_start()がコールされる 前に) session_cache_limiter()をコールする必要 があります。
void session_write_close ( void )\n現在のセッションを終了し、セッションデータを書き込みます。\nセッションデータは、session_write_close() をコールしなくても、スクリプト終了時に保存されます。しかし、 セッションデータは、同時書き込みを防ぐためにロックされるため、 ある時点であるセッションの処理ができるスクリプトは、1つだけです。 セッションでフレームセットを使用する場合、 このロックのためにフレームがひとつずつロードされるような経験をするでしょう。 セッションへの全ての変更が行われるとすぐにセッションを終了することにより、 全てのフレームのロードに要する時間を減らすことができます。
bool session_decode ( string $data )\nsession_decode() は、 data のセッションデータをデコードし、 セッションに保存する変数を設定します。
bool session_destroy ( void )\nsession_destroy()は、現在のセッションに 関連づけられたすべてのデータを破棄します。この関数は、 セッションに関するグローバル変数を破棄しません。 また、セッションクッキーを破棄しません。 セッション変数の利用を再開するには session_start() をコールする必要があります。\nユーザがログアウトするときのように、セッションを切断するには、 セッション ID の割り当ても解除する必要があります。セッション ID の受け渡しに クッキーが使用されている場合（デフォルト）には、セッションクッキーも 削除されなければなりません。 そのためには setcookie() が利用できます。
string session_encode ( void )\nsession_encode() は、 現在のセッションの内容をエンコードした文字列を返します．
array session_get_cookie_params ( void )\nセッションクッキーのパラメータを取得します。
string session_id ([ string $id ] )\nsession_id() はカレントのセッション ID を取得 または設定するために使用されます。\nカレントの名前とセッション ID を、URL に追加可能な文字列として取得する ために定数 SID も使用することが可能です。 セッションハンドリング も参照してください。
bool session_is_registered ( string $name )\nグローバル変数がセッションに登録されているかどうかを調べます。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string session_module_name ([ string $module ] )\nsession_module_name()は、 現在のセッションモジュールの名前を返します。
string session_name ([ string $name ] )\nsession_name() は、現在のセッション名を返します。\nリクエストが開始された際にセッション名はリセットされ、 session.name に保存されたデフォルト値に戻ります。 よって、各リクエスト毎に(そして session_start() または session_register() をコールする前に) session_name() をコールする必要があります。
bool session_pgsql_add_error ( int $error_level [, string $error_message ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array session_pgsql_get_error ([ bool $with_error_message = false ] )\nエラーの数を取得し、またオプションでエラーメッセージも取得します。
string session_pgsql_get_field ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool session_pgsql_reset ( void )\nセッションデータベースサーバとの接続をリセットします。
bool session_pgsql_set_field ( string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array session_pgsql_status ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool session_regenerate_id ([ bool $delete_old_session = false ] )\nsession_regenerate_id() は現在のセッションIDを 新しいものと置き換えます。その際、現在のセッション情報は維持されます。
bool session_register ( mixed $name [, mixed $... ] )\nsession_register() の引数の数は可変であり、 各引数は変数名を保持する文字列または変数名からなる配列 とすることが可能です。 各変数名が処理される毎に、session_register() は、その変数名のグローバル変数を現在のセッションに登録します。\n配列 $_SESSION または $HTTP_SESSION_VARS (PHP < 4.1.0) の適当なメンバに設定をするだけでもセッション変数を作成することが可能です。\n<?php//&nbsp;session_register()&nbsp;の使用は推奨されません。$barney&nbsp;=&nbsp;"A&nbsp;big&nbsp;purple&nbsp;dinosaur.";session_register("barney");//&nbsp;PHP&nbsp;4.1.0以降では$_SESSIONの使用が推奨されます。$_SESSION["zim"]&nbsp;=&nbsp;"An&nbsp;invader&nbsp;from&nbsp;another&nbsp;planet.";//&nbsp;古い手法としては&nbsp;$HTTP_SESSION_VARS&nbsp;があります。$HTTP_SESSION_VARS["spongebob"]&nbsp;=&nbsp;"He's&nbsp;got&nbsp;square&nbsp;pants.";?>\nこの関数をコールする前に session_start() をコールしていない場合、暗黙のうちに引数を付けずに session_start() がコールされます。 $_SESSION を使う場合はこの動作とは違い、 使用前に必ず session_start() をコールする必要があります。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string session_save_path ([ string $path ] )\nsession_save_path() は、 現在のセッションデータ保存パスを返します。
void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )\nファイル php.ini で定義されたクッキーパラメータを設定します。 この関数の効果が持続するのは、スクリプトの実行が終了するまでです。 したがって、リクエスト毎や session_start() がコールされる前に session_set_cookie_params() をコールする必要があります。
bool session_set_save_handler ( callback $open , callback $close , callback $read , callback $write , callback $destroy , callback $gc )\nsession_set_save_handler() は、セッションに 関連するデータを保存および取得するために使用されるユーザ定義の セッション保存関数を設定します。この関数は、セッションデータを ローカルデータベースに保存する場合のように PHP セッションにより 提供されるもの以外の保存方法を使用したい場合に有用です。
bool session_start ( void )\nsession_start() は、セッションを作成します。 もしくは、リクエスト上で GET, POST またはクッキーにより渡されたセッション ID に基づき現在のセッションを復帰します。\n名前付きのセッションを使用したい場合、 session_start() の前に session_name() をコールする必要があります。\nsession_start() は、 trans-sid が有効の場合に URL 書換え用の内部出力ハンドラを登録します。ユーザが ob_start() と共に ob_gzhandler または類似のものを使用している場合、 出力ハンドラの順番は正しく出力を行うために重要です。例えば、 セッション開始時にユーザは ob_gzhandler を登録する必要があります。
bool session_unregister ( string $name )\nsession_unregister() は現在のセッションから name という名前のグローバル変数の登録を削除します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
void session_unset ( void )\n関数 session_unset() は現在登録されている全てのセッション変数を開放します。
void session_write_close ( void )\n現在のセッションを終了し、セッションデータを書き込みます。\nセッションデータは、session_write_close() をコールしなくても、スクリプト終了時に保存されます。しかし、 セッションデータは、同時書き込みを防ぐためにロックされるため、 ある時点であるセッションの処理ができるスクリプトは、1つだけです。 セッションでフレームセットを使用する場合、 このロックのためにフレームがひとつずつロードされるような経験をするでしょう。 セッションへの全ての変更が行われるとすぐにセッションを終了することにより、 全てのフレームのロードに要する時間を減らすことができます。
mixed set_error_handler ( callback $error_handler [, int $error_types = E_ALL | E_STRICT ] )\nスクリプトのエラー処理を行うユーザ関数 (error_handler )を設定します。\nこの関数は、実行時のエラー処理をユーザが定義するために使用します。 例えば、致命的なエラーの際にデータやファイルを消去する必要があるような アプリケーションや、ある条件のもとに (trigger_error()を使用して)エラーを発生する必要がある アプリケーションがこの場合にあたります。\nPHP の標準のエラーハンドラは完全にバイパスされることに注意してください。 error_reporting() の設定にかかわらず、どのような場合でも ユーザが設定したエラーハンドラがコールされます。ただし、この場合でも ハンドラで error_reporting() のカレントの値を読み、 それにあわせて適切に動作させることは可能です。エラーを発生した命令の前に @ エラー制御演算子  が付加されている場合、この値は 0 となることには注意しましょう。\nユーザハンドラ関数は、必要に応じて die() を コールする責任があることにも注意しましょう。エラーハンドラ関数が リターンした場合、スクリプトの実行は、エラーを発生した命令の次の命令に 継続されます。\n以下のエラータイプは、ユーザ定義の関数では扱えません。 E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING および set_error_handler() がコールされたファイルで発生した 大半の E_STRICT 。\n(ファイルアップロードのように)スクリプトが実行される前にエラーが 発生した場合、カスタムエラーハンドラはコールされません。 これは、その時点では登録されていないためです。
string set_exception_handler ( callback $exception_handler )\n例外が try/catch ブロックの中でキャッチされなかった場合の デフォルトの例外ハンドラを設定します。 例外は、exception_handler がコールされた後に 停止します。
int stream_set_write_buffer ( resource $stream , int $buffer )\nstream で指定されたファイルポインタに buffer で表されたバイト数分だけ出力バッファを設定します。\nfwrite() による出力は、通常では 8K バイトがバッファされます。 これは、もし同じストリームに対し出力を行おうとするプロセスが2つあったとき、 いずれかのプロセスは、他方のプロセスが出力できるように 8K バイト分 データを書き出したところで停止することを示しています。
string set_include_path ( string $new_include_path )\ninclude_path 設定オプションの値を、このスクリプト内でだけ変更します。
bool set_magic_quotes_runtime ( bool $new_setting )\nmagic_quotes_runtime の現在アクティブな設定をセットします。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
bool stream_set_blocking ( resource $stream , int $mode )\nstream のモードをブロックあるいは非ブロックに設定します。\nこの関数は、非ブロックモードをサポートするすべてのストリーム (現在は、通常のファイルストリームとソケットストリームのみ) において利用可能です。
void set_time_limit ( int $seconds )\nスクリプトが実行可能な秒数を設定します。 この制限にかかるとスクリプトは致命的エラーを返します。 デフォルトの制限値は 30 秒です。 なお、php.iniでmax_execution_timeの 値が定義されている場合にはそれを用います。\nこの関数がコールされた場合、 タイムアウトカウンタをゼロから再スタートします。 言いかえると、タイムアウトがデフォルトの 30 秒で スクリプト実行までに 25 秒かかる場合に、 set_time_limit(20) を実行すると、スクリプトは、 タイムアウトまでに全体で 45秒 の間実行されます。
bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )\nsetcookie() は、その他のヘッダ情報と共に 送信するクッキーを定義します。 ほかのヘッダ情報と同様に、 クッキーは、スクリプトによる他のあらゆる出力よりも前に 送信される必要があります（これはHTTPプロトコルの制約です）。 <html> や <head> タグはもちろん 空白も含め、あらゆる出力よりも前にこの関数をコールするようにしなければなりません。\n一度クッキーが送信されると、次のページのロードからは $_COOKIE や $HTTP_COOKIE_VARS 配列によってクッキーにアクセスできます。 $_COOKIE のような スーパーグローバル は PHP 4.1.0 以降で有効となることに注意してください。 クッキーの値は $_REQUEST 配列からもアクセスできます。
string setlocale ( int $category , string $locale [, string $... ] )\nstring setlocale ( int $category , array $locale )\nロケール情報を設定します。
bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )\nsetrawcookie() は、 ブラウザに送信される際クッキーの値が自動的に URL エンコードされないことを除き、 setcookie() と等価です。
bool settype ( mixed &$var , string $type )\n変数 var の型を type にセットします。
string sha1_file ( string $filename [, bool $raw_output = false ] )\n&raquo; US Secure Hash Algorithm 1 を使用して filename の sha1 ハッシュを計算し、そのハッシュを 返します。ハッシュは 40 文字の 16 進数となります。
string sha1 ( string $str [, bool $raw_output = false ] )\n&raquo; US Secure Hash Algorithm 1 を使用して str の sha1 ハッシュを計算します。
string shell_exec ( string $cmd )\nこの関数は バックティック演算子 と等価です。
resource shm_attach ( int $key [, int $memsize [, int $perm ]] )\nshm_attach() は ID を返します。 これは、指定されたキー key で System V 共有メモリにアクセスする際に使用することが可能です。 最初のコールの際に、サイズが memsize 、 オプションのパーミッション perm を指定した共有メモリセグメントを作成します。\n同じ key で shm_attach() を 2 回コールした場合は 別の共有メモリ ID が返されますが、両方の ID は同じ共有メモリをアクセスします。 memsize および perm は無視されます。
bool shm_detach ( resource $shm_identifier )\nshm_detach() は、 shm_attach() で作成され、 指定した shm_identifier を有する共有メモリへの接続を閉じます。 共有メモリは、まだ Unix システム上に存在しており、 データはまだ存在するということを覚えておいてください。
mixed shm_get_var ( resource $shm_identifier , int $variable_key )\nshm_get_var() は、 shm_identifier で指定した共有メモリセグメントから 変数 variable_key を読みこみます。 読み込んだ変数は、まだ共有メモリに存在します。
bool shm_has_var ( resource $shm_identifier , int $variable_key )\n特定のキーが共有メモリセグメント内に存在するかどうかを調べます。
bool shm_put_var ( resource $shm_identifier , int $variable_key , mixed $variable )\nshm_put_var() は、 指定した variable_key を有する 変数 variable の挿入または更新を行います。\nshm_identifier が有効な SysV 共有メモリではない場合や リクエストを処理するために充分な共有メモリが残っていない場合は (E_WARNING レベルの) 警告を発生させます。
bool shm_remove_var ( resource $shm_identifier , int $variable_key )\n指定したvariable_key を有する変数を共有メモリから削除し、占有するメモリを解放します。
bool shm_remove ( resource $shm_identifier )\nshm_remove() は、共有メモリ shm_identifier を削除します。 全てのデータは破棄されます。
void shmop_close ( int $shmid )\nshmop_close() は共有メモリブロックを閉じるために 使用されます。
bool shmop_delete ( int $shmid )\nshmop_delete() は共有メモリブロックを削除するために 使用されます。
int shmop_open ( int $key , string $flags , int $mode , int $size )\nshmop_open() は共有メモリブロックを作成または オープンします。
string shmop_read ( int $shmid , int $start , int $count )\nshmop_read() は共有メモリブロックから文字列を 読み込みます。
int shmop_size ( int $shmid )\nshmop_size() は共有メモリブロックの大きさを 得るために使用されます。
int shmop_write ( int $shmid , string $data , int $offset )\nshmop_write() は共有メモリブロックに文字列を 書き込みます。
mixed highlight_file ( string $filename [, bool $return = false ] )\nfilename の中のコードを構文ハイライト表示して 出力します。色は、PHP 組込の構文ハイライタで定義されているものを使用します。\n多くのサーバでは、拡張子が phps のファイルは 自動的に構文ハイライト表示されるように設定されています。例えば example.phps のようなファイルは、構文ハイライト したソースファイルとして表示されます。これを有効にするには、 httpd.conf に以下のような行を追加します。\nAddType application/x-httpd-php-source .phps
bool shuffle ( array &$array )\nこの関数は、配列をシャッフル (要素の順番をランダムに) します。
string nthmac ( string $clent , string $data )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int similar_text ( string $first , string $second [, float &$percent ] )\nこの関数は、Oliver [1993] に記述されたように二つの文字列の間の類似性を計算します。 この実装は Oliver の擬似コードの様にスタックを使用せず、 プロセス全体の速度が改善されるかどうかにかかわらず再帰呼び出しを行うことに注意してください。 このアルゴリズムの複雑さは、O(N**3) であることにも注意してください。 ただし、N は最も長い文字列の長さです。
SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = &quot;SimpleXMLElement&quot; ] )\nこの関数は、DOM ドキュメントのノードを引数とし、 SimpleXML ノードを作成します。この新しいオブジェクトは、 この後、通常の SimpleXML 要素として使用できます。
object simplexml_load_file ( string $filename [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]] )\n指定したファイルの中の整形式 XML ドキュメントをオブジェクトに変換します。
object simplexml_load_string ( string $data [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]] )\n整形式 XML 文字列をオブジェクトとして返します。
float sin ( float $arg )\nsin() は、arg のサインを 返します。arg はラジアンです。
float sinh ( float $arg )\narg のハイパボリックサインを返します。 これは、(exp(arg) - exp(-arg))/2 で定義されます。
int count ( mixed $var [, int $mode = COUNT_NORMAL ] )\n変数に含まれるすべての要素、 あるいはオブジェクトに含まれるプロパティの数を数えます。\nオブジェクトに対して、もし SPL がインストールされている場合、インターフェース Countable を実装することで count() にフックすることができます。このインターフェースには 1 つのメソッド count() があり、count() 関数に対する値を返します。\n配列の実装やPHPでの使用法に関する詳細な説明については、マニュアルの 配列のセクションを参照ください。
int sleep ( int $seconds )\nseconds で与えられた秒数ぶんプログラムの実行を遅延させます。
bool snmp_get_quick_print ( void )\nUCD ライブラリに保持された quick_print の現在の値を返します。 デフォルトでは、quick_print はオフです。
int snmp_get_valueretrieval ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool snmp_read_mib ( string $filename )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void snmp_set_enum_print ( int $enum_print )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void snmp_set_oid_numeric_print ( int $oid_numeric_print )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void snmp_set_oid_output_format ( int $oid_format )\nsnmp_set_oid_output_format() は、 出力形式を完全か数値のいずれかに設定します。
void snmp_set_quick_print ( bool $quick_print )\nUCB SNMP ライブラリで quick_print の値を設定します。この値を (1) に設定した場合、SNMP ライブラリは、&#039;簡潔に表示された (quick printed)&#039; 値を返します。 これは、値のみが出力されることを意味します。 quick_print が有効でない場合(デフォルト)、UCD SNMP ライブラリは、 (IP アドレスまたは OID のような)その値の種類を含む、より詳細な情報を 出力します。 加えて、quick_print が有効でない場合、ライブラリは 3 文字以下の全ての 文字列について 16 進数値も出力します。\nデフォルトで、UCD SNMP ライブラリは冗長な値を返します。 quick_print は、値のみを返すために用いられます。\n現在、文字列は引用符で括られて返されますが、 この動作は将来のリリースでは修正される予定です。
void snmp_set_valueretrieval ( int $method )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string snmpget ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nsnmpget() は object_id で指定した SNMP オブジェクトの値を読みとるために使用されます。
string snmpgetnext ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool snmpset ( string $hostname , string $community , string $object_id , string $type , mixed $value [, int $timeout [, int $retries ]] )\nsnmpset() 関数は、 object_id で指定した SNMP オブジェクトの 値を設定するために使用します。
array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nsnmpwalk() 関数は、hostname で指定した SNMP エージェントから全ての値を読みとるのに使用します。
array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )\nsnmpwalkoid() 関数は、hostname で指定した SNMP エージェントから すべてのオブジェクト ID とその値を読みこむために使用します。\nsnmpwalkoid() および snmpwalk() は、歴史的経緯により残されているものです。 どちらも、下位互換のために提供されています。 代わりに snmprealwalk() を使用してください。
resource socket_accept ( resource $socket )\nsocket_create() を使用してソケット socket を作成した後、 socket_bind() で名前に関連付け、 socket_listen() で接続をモニタします。この関数は、 このソケットへの接続を許可します。接続に成功すると、新規の ソケット記述子が返されます。この記述子は通信の際に使用されます。 ソケット上に複数の接続がキューで待っている場合、最初の接続が使用 されます。接続待ちがない場合、socket_accept() は接続が存在するまでブロックされます。 socket が socket_set_blocking() または socket_set_nonblock() により非ブロックモードで 作成された場合、FALSE が返されます。\nsocket_accept() により返されたソケットリソースは、 新規接続を許可するために使用することはできません。この場合でも 元の接続待ちのソケット socket は オープンされたままであり、再使用可能です。
bool socket_bind ( resource $socket , string $address [, int $port = 0 ] )\naddress で指定した名前を socket で指定したソケットにバインドします。 これは、socket_connect() あるいは socket_listen() を使用して接続が確立される前に行われます。
void socket_clear_error ([ resource $socket ] )\nこの関数は、指定したソケットまたは直近のグローバルなソケットエラー のエラーコードをクリアします。\nこの関数により、 ソケットまたは直近のグローバルな拡張エラーコードとなる エラーコードの値を明示的にリセットすることが可能になります。 これは、エラーが発生したかどうかをアプリケーション内で検出する際に有用です。
void socket_close ( resource $socket )\nsocket_close() は、 socket で指定したソケットリソースを閉じます。 この関数はソケット専用であり、その他のリソースに対しては用いることができません。
bool socket_connect ( resource $socket , string $address [, int $port = 0 ] )\nソケットリソース socket を用いて、 address への接続を初期化します。 このリソースは、socket_create() で作成した有効なソケットリソースである必要があります。
resource socket_create_listen ( int $port [, int $backlog = 128 ] )\nsocket_create_listen() は、 AF_INET 型で すべての ローカルインターフェースの指定したポート上で新規接続を待ち受ける 新規ソケットリソースを作成します。\nこの関数は、新規接続のみを受け入れるソケットを作成しやすくするためのものです。
bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )\nsocket_create_pair() は、接続されており区別できない 2 つのソケットを作成し、それを fd に保存します。 この関数は、一般に IPC（InterProcess Communication: プロセス間通信） で使用します。
resource socket_create ( int $domain , int $type , int $protocol )\n通信のエンドポイント(終端)と呼ばれることもあるソケットのリソースを作成し、 返します。典型的なネットワーク接続は、2つのソケットから成り立ちます。 このとき、片方はクライアント、もう片方はサーバの役割をします。
mixed socket_get_option ( resource $socket , int $level , int $optname )\nsocket_get_option() 関数は、ソケット socket のオプション optname の値を取得します。socket_get_option() は、失敗した場合に FALSE を返します。
array stream_get_meta_data ( resource $stream )\n既存の stream に関する情報を返します。
bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )\n指定したソケットのリモート側に問い合わせ、 その型に応じてホスト/ポート、あるいは Unix ファイルシステムのパスを返します。
bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )
int socket_last_error ([ resource $socket ] )\nソケットリソースがこの関数に渡された場合、この特定のソケットに発生した 直近のエラーが返されます。ソケットリソースが省略された場合、 直近にエラーを発生したソケット関数のエラーコードが返されます。 後者は、失敗した場合にソケットを返さない socket_create() のような関数や 特定のソケットに直接関係ない理由で失敗する可能性がある socket_select() で特に有用です。 このエラーコードは、指定したエラーコードを表す文字列を得るために
bool socket_listen ( resource $socket [, int $backlog = 0 ] )\nソケット socket が socket_create() を用いて作成され、 socket_bind() で名前が付けられた後、 socket 上の接続要求を待つための通信ができるようになります。\nsocket_listen() は、ソケットが SOCK_STREAM 型または SOCK_SEQPACKET 型の場合のみ利用可能です。
string socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] )\n関数 socket_read() は、関数 socket_create() または socket_accept() により作成されたソケット リソース socket から読み込みます。
int socket_recv ( resource $socket , string &$buf , int $len , int $flags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )\nsocket_recvfrom() 関数は、 ポート port (AF_UNIX 型のソケットである場合を除く) 上の name から受信した len バイトのデータを buf に格納します。 socket_recvfrom() は、 接続済みのソケットだけでなく接続していないソケットに対しても使用可能です。 さらに、フラグを指定することでこの関数の挙動を設定できます。\nname と port は参照渡しとしなければなりません。接続していないソケットの場合は、 name はリモートホストの IP アドレスか UNIX ソケットへのパスとなります。接続済みのソケットの場合は、 name は NULL とします。 また、AF_INET あるいは AF_INET6 形式のまだ接続していないソケットの場合、 port にはリモートホストのポート番号を指定します。
int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )\nsocket_select() はソケットの配列を受け取り、 それらの状態が変化するまで待ちます。BSD のソケットについての知識がある方なら、 これらのソケットの配列が、いわゆるファイル記述子セットであることがご理解いただけるでしょう。 3 つの独立した配列でソケットリソースを監視します。
int socket_send ( resource $socket , string $buf , int $len , int $flags )\n関数 socket_send() は、 buf からソケット socket に len バイトのデータを送信します。
int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ] )\n関数 socket_sendto() は、 アドレス addr の port を使用し、 buf からソケット socket に len バイトのデータを送信します。
bool socket_set_block ( resource $socket )\nsocket_set_block() 関数は、 socket パラメータで指定したソケットから O_NONBLOCK フラグを取り除きます。\n受信や送信、接続、待機といった操作をブロックモードのソケットに対して行うと、 その処理が完了するか何らかのシグナルを受信するまではスクリプトを停止します。
bool stream_set_blocking ( resource $stream , int $mode )\nstream のモードをブロックあるいは非ブロックに設定します。\nこの関数は、非ブロックモードをサポートするすべてのストリーム (現在は、通常のファイルストリームとソケットストリームのみ) において利用可能です。
bool socket_set_nonblock ( resource $socket )\nsocket_set_nonblock() 関数は、 socket パラメータで指定したソケットに O_NONBLOCK フラグを設定します。\n受信や送信、接続、待機といった操作を非ブロックモードのソケットに対して行うと、 その処理が完了するか何らかのシグナルを受信するまではスクリプトは停止しません。 また、その操作がブロックされると、呼び出し元の関数は失敗します。
bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )\nsocket_set_option() 関数は、level が指すプロトコルレベルでソケット socket のオプション optname に値 optval を設定します。
bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )\nstream にタイムアウトの値を設定します。 この値は、seconds と microseconds の和で表されます。\nストリームがタイムアウトとなった場合は、 stream_get_meta_data() が返す配列のキー &#039;timed_out&#039; の値が TRUE に設定されます。エラーや警告が発生していなくても同様になります。
bool socket_shutdown ( resource $socket [, int $how = 2 ] )\nsocket_shutdown() 関数は、socket から送られてくる受信、送信あるいはすべて（デフォルト）のデータを停止します。
string socket_strerror ( int $errno )\nsocket_strerror() は、パラメータ errno に socket_last_error() の返すソケットエラーコードを受け取り、 対応する内容を文字列で返します。
int socket_write ( resource $socket , string $buffer [, int $length = 0 ] )\n関数 socket_write() は、 buffer の内容をソケット socket に書き込みます。
bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )\nこの関数は配列をソートします。この関数が正常に終了すると、 各要素は低位から高位へ並べ替えられます。
string soundex ( string $str )\nstr の soundex キーを計算します。\nsoundex キーには、似たような発音の単語に関して同じ soundex キーが生成されるという特性があります。 このため、発音は知っているが、スペルがわからない場合に、 データベースを検索することを容易にすることができます。 soundex 関数は、ある文字から始まる 4 文字の文字列を返します。\nこの soundex 関数についての説明は、Donald Knuth の &quot;The Art Of Computer Programming, vol. 3: Sorting And Searching&quot;, Addison-Wesley (1973), pp. 391-392 にあります。
void spl_autoload_call ( string $class_name )\nこの関数は、登録済みの __autoload 関数を使用して クラスあるいはインターフェイスを手動で探すために使用することができます。
string spl_autoload_extensions ([ string $file_extensions ] )\nこの関数は、__autoload() 用の代替関数である spl_autoload() が使用するファイル拡張子を変更したり調べたりします。
array spl_autoload_functions ( void )\nすべての登録済み __autoload() 関数を取得します。
bool spl_autoload_register ([ callback $autoload_function ] )\n指定した関数を、spl が提供する __autoload スタックに登録します。 スタックがまだアクティブになっていない場合は、まずアクティブにします。\nもしあなたのコード中に __autoload 関数が存在するのなら、 それを明示的に __autoload スタックに登録しなければなりません。 なぜなら、spl_autoload_register() は、 spl_autoload() あるいは spl_autoload_call() によって __autoload 関数のエンジンキャッシュを効率的に置き換えるからです。\n複数の autoload 関数が必要となる場合でも spl_autoload_register() は対応できます。この関数は autoload 関数のキューを作成し、 定義された順にそれを実行していきます。一方 __autoload() は、一度しか定義できません。
bool spl_autoload_unregister ( mixed $autoload_function )\nspl が提供する __autoload スタックから、関数の登録を解除します。 スタックがアクティブであり、かつこの関数の実行後にスタックが空になった場合は スタックが非アクティブ化されます。\nこの関数の結果として autoload スタックがアクティブになったとした場合に、 既存の __autoload 関数が再アクティブ化されることはありません。
void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )\nこの関数は、__autoload() のデフォルト実装として使用されることを意図しています。 ほかに何も指定されておらず、autoload_register() がパラメータなしでコールされた場合には、 その後の __autoload() のコール時にはこの関数が使用されます。
array spl_classes ( void )\nこの関数は現在利用可能な SPL クラスを配列で返します。
string spl_object_hash ( object $obj )\nこの関数は、オブジェクトの一意な識別子を返します。この ID は、 オブジェクトを保存する際のハッシュのキーとして使用できますし、 オブジェクトを識別するための値として使用することもできます。
array split ( string $pattern , string $string [, int $limit ] )\nstring を、正規表現によって配列に分割します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
array spliti ( string $pattern , string $string [, int $limit ] )\nstring を、正規表現によって配列に分割します。\nこの関数は、アルファベット文字にマッチさせる際に大文字小文字を 区別しないこと以外は、split() と同じです。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
string sprintf ( string $format [, mixed $args [, mixed $... ]] )\nフォーマット文字列 format に基づき生成された文字列を返します。
string sql_regcase ( string $string )\n大文字小文字を区別しないマッチングのための正規表現を作成します。\n警告\nこの関数は PHP 5.3.0 で 非推奨となり、PHP 6.0.0 で削除されます。 この機能を使用しないことを強く推奨します。
array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type [, bool $decode_binary ]] )\narray sqlite_array_query ( string $query , resource $dbhandle [, int $result_type [, bool $decode_binary ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\narray arrayQuery ( string $query [, int $result_type [, bool $decode_binary ]] )\nsqlite_array_query() は与えられたクエリを実行し、 結果セット全体を配列で返します。これは、結果セットの各レコードに関して sqlite_query()に続いて sqlite_fetch_array()をコールすることに似ています。 sqlite_array_query() は前述の方法よりも著しく高速です。\nヒント\nsqlite_array_query() は、返すレコードが45件以下 のクエリーで最も有効です。これ以上のデータがある場合には、 より性能を最適化するために、代わりに sqlite_unbuffered_query()を使用するようなスクリ プトを書くことをお薦めします。
void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nvoid busyTimeout ( int $milliseconds )\nSQLite データベース database が利用可能となるまでの 最大の待ち時間を milliseconds に設定します。
int sqlite_changes ( resource $dbhandle )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nint changes ( void )\nデータベースハンドル dbhandle に対して実行された 直近のSQLステートメントによって変更されたレコード数を返します。
void sqlite_close ( resource $dbhandle )\n指定したデータベースハンドル database を閉じます。 このデータベースに持続性がある場合、このデータベースは閉じられ、 持続的データベースリストから削除されます。
mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary = true ] )\nSQLiteResult\nmixed column ( mixed $index_or_name [, bool $decode_binary = true ] )\nSQLiteUnbuffered\nmixed column ( mixed $index_or_name [, bool $decode_binary = true ] )\nクエリ結果ハンドルresult の現在のレコードから index_or_name (文字列の場合) というカラム名、 または、カラム番号 index_or_name (整数の場合) の値を取得します。
void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callback $step_func , callback $finalize_func [, int $num_args = -1 ] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nvoid createAggregate ( string $function_name , callback $step_func , callback $finalize_func [, int $num_args = -1 ] )\nsqlite_create_aggregate() は、 sqlite_create_function() に似ていますが、 クエリの全レコードを通じて集約された結果を計算するために使用される 関数を登録するところが異なります。\nこの関数と sqlite_create_function() の主な違い は、二つの関数が集約を管理するために必要であることです。 step_func は、結果セットの各レコードに関して コールされます。PHP関数は、結果を加算し、集約コンテキストに保存する 必要があります。 全レコードが処理された後、 finalize_func がコールされ、 集約コンテキストからデータが取得され、結果が返されます。 コールバック関数は SQLite が認識可能な型 (すなわち スカラー型) を返す必要があります。
void sqlite_create_function ( resource $dbhandle , string $function_name , callback $callback [, int $num_args = -1 ] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nvoid createFunction ( string $function_name , callback $callback [, int $num_args = -1 ] )\nsqlite_create_function() により、SQLiteにPHP関数 をUDF (ユーザ定義関数)として登録することが可能で す。この関数は、SQLステートメントの中からコールできます。\nUDFは、SELECTおよびUPDATEステートメント、そして、トリガーの中のよう に関数をコールできる全てのSQLステートメントで使用可能です。
array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\narray current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nSQLiteUnbuffered\narray current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nsqlite_current() は sqlite_fetch_array() と同じですが、 データを返す前に次のレコードに移動せず、カレントの位置からのみデー タを返すという違いがあります。
string sqlite_error_string ( int $error_code )\nsqlite_last_error()から返される error_code の可読性が高い説明を返します。
string sqlite_escape_string ( string $item )\nsqlite_escape_string() は、 item で指定した文字列を SQLite SQLステートメントで使用できるように正しくクオートします。 この際、シングルクオート(&#039;)は2重にされ、 クエリ文字列のバイナリセーフでない文字がチェックされます。\nこのエンコーディングは、データ挿入を安全に行いますが、 テキスト比較は単純化され、バイナリデータを含むカラムについては クエリの中でLIKE句を使用できません。 実際には、バイナリカラムでこのようなことをするスキーマにはしないの で、これが問題になることはないでしょう (実際には、ファイルのような他の手段でバイナリデータを保存する方が良 いでしょう)。
bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] )\nbool sqlite_exec ( string $query , resource $dbhandle )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nbool queryExec ( string $query [, string &$error_msg ] )\n与えられたデータベースハンドル (dbhandle パラメータで指定される) に対して query によって指定される SQL ステートメントを実行します。\n警告\nSQLiteは、セミコロンで区切られた複数のクエリを実行します。 これにより、ファイルからロードするかスクリプトに埋め込んだ SQL をバッチ実行することができます。
SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )\nsqlite_factory() は sqlite_open() と同様に SQLite データベースをオープン、もしくはデータベースが存在しない場合は生成しようと試みます。しかしながら、リソースの代わりに SQLiteDatabase オブジェクトが返されます。詳細な使用法と注意事項については、 sqlite_open() を参照ください。
array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\narray fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nSQLiteUnbuffered\narray fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nsqlite_fetch_all() は結果リソース result から全結果セットの配列を返します。 これは sqlite_query() (もしくは sqlite_unbuffered_query()) の後に結果セットの各レコードに対して sqlite_fetch_array() を行うことと等価です。
array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\narray fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\nSQLiteUnbuffered\narray fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )\n指定した結果ハンドル result から次のレコードを取得 します。レコードがもうない場合は FALSEを返し、それ以外は レコードデータを含む連想配列を返します。
array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type ] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\narray fetchColumnTypes ( string $table_name [, int $result_type ] )\nsqlite_fetch_column_types() は、 指定されたテーブル table_name からカラムのデータ型の配列を返します。
object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nobject fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )\nSQLiteUnbuffered\nobject fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string sqlite_fetch_single ( resource $result [, bool $decode_binary = true ] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nstring fetchSingle ([ bool $decode_binary = true ] )\nSQLiteUnbuffered\nstring fetchSingle ([ bool $decode_binary = true ] )\nsqlite_fetch_single() は、 レコードセットの最初のカラムの値を返すことを除いて sqlite_fetch_array() と等価です。\nこの関数は、データの単一カラムの値を確認するだけの場合に データを処理する最善の方法です。
string sqlite_fetch_single ( resource $result [, bool $decode_binary = true ] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nstring fetchSingle ([ bool $decode_binary = true ] )\nSQLiteUnbuffered\nstring fetchSingle ([ bool $decode_binary = true ] )\nsqlite_fetch_single() は、 レコードセットの最初のカラムの値を返すことを除いて sqlite_fetch_array() と等価です。\nこの関数は、データの単一カラムの値を確認するだけの場合に データを処理する最善の方法です。
string sqlite_field_name ( resource $result , int $field_index )\nObject oriented style (method):\nSQLiteResult\nstring fieldName ( int $field_index )\nSQLiteUnbuffered\nstring fieldName ( int $field_index )\nGiven the ordinal column number, field_index , sqlite_field_name() returns the name of that field in the result set result .
bool sqlite_has_more ( resource $result )\n与えられた結果セット中にまだレコードがあるかどうかを見つけます。
bool sqlite_has_prev ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool hasPrev ( void )\n与えられた結果ハンドルに前のレコードがあるかどうかを検査します。
int sqlite_key ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nint key ( void )\nsqlite_key() は、バッファされた結果セット result のカレントレコードのインデックスを返します。
int sqlite_last_error ( resource $dbhandle )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nint lastError ( void )\ndbhandle (データベースハンドル)、 上で実行された直近の処理のエラーコード、 あるいはエラーが発生しなかった場合に 0 を返します。人が読み取れるエラーコードの詳細は、 sqlite_error_string() で取得可能です。
int sqlite_last_insert_rowid ( resource $dbhandle )\nObject oriented style (method):\nSQLiteDatabase\nint lastInsertRowid ( void )\nデータベースdbhandle に直近に挿入されたレコードの rowid を返します。ただし、この rowid が auto-increment フィールドとして作成されている場合に限ります。\nヒント\nテーブルスキーマで INTEGER PRIMARY KEYと宣言することにより、 SQLiteでauto-incrementフィールドを作成することができます。
string sqlite_libencoding ( void )\nSQLiteライブラリは、ISO-8859-1またはUTF-8 互換モードのどちらかでコンパイルすることができます。この関数により、 使用するライブラリのエンコーディングを特定することが可能です。\n警告\nデフォルトのPHPのディストリビューションでは、libsqliteを ISO-8859-1エンコーディングモードで構築します。しかし、この名前は誤りです。 ISO-8859-1を処理するというのではなく、 このモードは文字列の比較やソートに使用するカレントのロケールを使用します。 このため、ISO-8859-1ではなく、&#039;8ビット&#039;とみなすべきです。\nUTF-8サポートを指定してコンパイルした場合、sqliteは データ中の UTF-8マルチバイト文字のエンコードおよびデコードを行います。 しかし、データ処理を完全に行うことはまだできず (例えば、正規化は行われません)、いくつかの比較処理は、まだ、正しく行うことができません。\n警告\nUTF-8サポートを指定してコンパイルされたバージョンのSQLite ライブラリを組み込んでWebサーバ版のPHPを使用することは推奨されません。 これは、UTF-8エンコーディングで問題が検出された場合にlibsqlite がプロセスを強制終了するためです。
string sqlite_libversion ( void )\nリンクされているSQLiteライブラリのバージョンを文字列として返します。
bool sqlite_next ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool next ( void )\nSQLiteUnbuffered\nbool next ( void )\nsqlite_next()は、結果ハンドル result を次のレコードへ進めます。
int sqlite_num_fields ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nint numFields ( void )\nSQLiteUnbuffered\nint numFields ( void )\n結果セット result のフィールド数を返します。
int sqlite_num_rows ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nint numRows ( void )\nバッファされた結果セット result のレコード数を返します。
resource sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\n__construct ( string $filename [, int $mode = 0666 [, string &$error_message ]] )\nSQLite データベースをオープン、 もしくは存在しない場合データベースを生成します。
resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )\nこの関数はsqlite_open()と同じように動作しますが、 PHPの持続的リソース機能を使用するところが異なります。 パラメータの意味に関する詳細については、マニュアルの sqlite_open() を参照してください。\nsqlite_popen() は、まず、持続的ハンドルが指定し たfilename に関してすでにオープンされているか どうかを調べます。みつかった場合には、スクリプトのそのハンドルを返 し、それ以外は、データベースのハンドルを新規にオープンします。\nこの手法の利点は、持続性のあるWebサーバ SAPI(通常のCGIまたはCLI以外 の全てのSAPI)により処理される各ページについてデータベースやインデッ クススキーマを再読み込みする性能上のコストを払うことがないことです。
bool sqlite_prev ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool prev ( void )\nsqlite_prev() は、結果ハンドル result を前のレコードに戻します。
resource sqlite_query ( resource $dbhandle , string $query [, int $result_type [, string &$error_msg ]] )\nresource sqlite_query ( string $query , resource $dbhandle [, int $result_type [, string &$error_msg ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nSQLiteResult query ( string $query [, int $result_type [, string &$error_msg ]] )\n指定したデータベースにより query で指定した SQL ステートメントを実行します。
bool sqlite_rewind ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool rewind ( void )\nsqlite_rewind()は、 結果セットの先頭レコードへシークします。
bool sqlite_seek ( resource $result , int $rownum )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool seek ( int $rownum )\nsqlite_seek()は、パラメータ rownum で指定したレコードにシークします。
array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\narray singleQuery ( string $query [, bool $first_row_only [, bool $decode_binary ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string sqlite_udf_decode_binary ( string $data )\nパラメータで渡されたバイナリデータを UDF にデコードします。\nバイナリデータをUDFにより処理させる必要がある場合、UDFに渡されたパ ラメータに関してこの関数をコールする必要があります。 これは、PHPにより適用されたバイナリエンコーディングが内容と元のパラ メータを隠蔽するためです。\nPHP は、自動的にエンコード/デコード処理を行いません。これは、これを 行うと著しい性能劣化を生じる可能性があるためです。
string sqlite_udf_encode_binary ( string $data )\nsqlite_udf_encode_binary() は (元のlibsqlite APIはバイナリ対応ではないため)、 クエリから安全に値を返せるようにdata にバイ ナリエンコーディングを適用します。\nバイナリセーフでないと思われるデータ(例: ヌルバイトを末尾以外の場所 に含むデータや先頭文字に0x01を含むデータ)の場合、 UDFからの返り値をエンコードするために、この関数をコールする必要があ ります。\nPHPは、このエンコード/デコード処理を自動的に行いません。 これは、性能上著しい影響があるためです。
resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type [, string &$error_msg ]] )\nresource sqlite_unbuffered_query ( string $query , resource $dbhandle [, int $result_type [, string &$error_msg ]] )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteDatabase\nSQLiteUnbuffered unbufferedQuery ( string $query [, int $result_type [, string &$error_msg ]] )\nsqlite_unbuffered_query() は sqlite_query() と同じですが、 連続的に前方のみにアクセス可能な結果セットが返され、 各レコードを１件ずつ読み込むことだけしかできないところが異なります。\nこの関数は、一度に１件ずつレコードを処理するだけでよく、ランダムに データをアクセスする必要がない、HTMLテーブルのようなものを生成する のに適しています。
bool sqlite_valid ( resource $result )\nオブジェクト指向言語型スタイル (メソッド):\nSQLiteResult\nbool valid ( void )\nSQLiteUnbuffered\nbool valid ( void )\n与えられた結果ハンドルにまだレコードが残っているかを検査します。
float sqrt ( float $arg )\narg の平方根を返します。
void srand ([ int $seed ] )\nシード seed で乱数ジェネレータを初期化します。 seed を省略した場合はランダムな値が設定されます。
mixed sscanf ( string $str , string $format [, mixed &$... ] )\n関数 sscanf() は、printf() の入力版です。sscanf() は、文字列 str を読み込み、これを指定したフォーマット format に基づき解釈します。 このフォーマットは、sprintf()のマニュアルに記述されています。\nフォーマット文字列の中のあらゆる空白文字は、入力文字列の中の 空白文字列にマッチします。つまり、フォーマット文字列の中にタブ文字 \\t が含まれていても、それは入力中の半角スペースにマッチしてしまうということです。
bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )\nファイルから読み込まれたホスト公開鍵を使用して認証を行います。
mixed ssh2_auth_none ( resource $session , string $username )\n通常失敗する（そしてそうあるべき）&quot;none&quot; 認証を試みます。 失敗の一環として、サーバは可能な認証メソッドの一覧を返します。
bool ssh2_auth_password ( resource $session , string $username , string $password )\nSSH 上でプレーンなパスワードを使用した認証を行います。
bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )\nファイルから読み込んだ公開鍵を使用した認証を行います。
resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )\nリモートの SSH サーバとの接続を確立します。\n一度接続すると、クライアントは ssh2_fingerprint() を使用してサーバのホスト鍵を検証し、 パスワードもしくは公開鍵を使用して認証します。
resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )\nコマンドをリモートエンドで実行し、チャネルを割り当てます。
resource ssh2_fetch_stream ( resource $channel , int $streamid )\nSSH2 チャネルストリームと関連付けられたサブストリームを取得します。 SSH2 プロトコルは現在ただ 1 つのサブストリーム STDERR を定義しています。これはサブストリーム ID として SSH2_STREAM_STDERR (1 として定義) を持ちます。
string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )\nアクティブなセッションからサーバホスト鍵のハッシュを返します。
array ssh2_methods_negotiated ( resource $session )\nネゴシエートされたメソッドのリストを返します。
bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = false [, array $attributes ]] )
resource ssh2_publickey_init ( resource $session )\nすでに接続している SSH2 サーバから、公開鍵サブシステムを要求します。\n公開鍵サブシステムを使用すると、 すでに接続・認証済みのクライアントが、 対象のサーバに保存されている認証済み公開鍵の一覧を管理できるようになります。 管理方法は、サーバの実装に依存しません。 リモートサーバが公開鍵サブシステムをサポートしていない場合、 ssh2_publickey_init() 関数は FALSE を返します。
array ssh2_publickey_list ( resource $pkey )\n現在認証済みの公開鍵の一覧を表示します。
bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )\n認証済み公開鍵を取り除きます。
bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )\nリモートサーバからローカルファイルシステムに SCP プロトコルを使用してコピーします。
bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] )\nローカルファイルシステムからリモートサーバに SCP プロトコルを使用してコピーします。
array ssh2_sftp_lstat ( resource $sftp , string $path )\nリンクを辿らないで リモートファイルシステムのシンボリックリンクの情報を取得します。\nPHP 5 では、この関数は ssh2.sftp:// ラッパーを使用した場合の lstat() 関数と同様です。 返り値も同じです。
bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = false ]] )\nリモートファイルサーバに mode で指定された権限でディレクトリを作成します。\nこの関数は ssh2.sftp:// ラッパーを使用した場合の mkdir() と同様です。
string ssh2_sftp_readlink ( resource $sftp , string $link )\nシンボリックリンクのターゲットを返します。
string ssh2_sftp_realpath ( resource $sftp , string $filename )\nfilename をリモートファイルシステム上の有効な実パスに変換します。
bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )\nリモートファイルシステム上のファイルを改名します。
bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )\nリモートのファイルサーバからディレクトリを削除します。\nこの関数は ssh2.sftp:// ラッパーを使用した場合の rmdir() と同様です。
array ssh2_sftp_stat ( resource $sftp , string $path )\nシンボリックリンクを辿って リモートファイルシステム上のファイルの情報を取得します。\nPHP 5 では、この関数は ssh2.sftp:// ラッパーを使用した場合の stat() 関数と同様です。 返される値も同じです。
bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )\nリモートファイルシステム上に target を指す link という名称のシンボリックリンクを作成します。
bool ssh2_sftp_unlink ( resource $sftp , string $filename )\nリモートファイルシステム上のファイルを削除します。
resource ssh2_sftp ( resource $session )\nすでに接続された SSH2 サーバから SFTP サブシステムを要求します。
resource ssh2_shell ( resource $session [, string $term_type = &quot;vanilla&quot; [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )\nリモートエンド上のシェルをオープンし、そのためのストリームを割り当てます。
resource ssh2_tunnel ( resource $session , string $host , int $port )\n現在接続している SSH サーバを経由して、 任意のホスト/ポートへのソケットストリームをオープンします。
array stat ( string $filename )\nfilename で指定されたファイルに ついての統計情報を取得します。 filename がシンボリックリンクの場合、 シンボリックリンクではなくファイルの実体の統計情報が返されます。\nlstat() はシンボリックリンクの統計情報を返すという違いを除いて stat() と等価です。
float stats_absolute_deviation ( array $a )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )\nMethod Cumulative distribution function (P) is calculated directly by code associated with the following reference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit Computation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18 (1993), 360-373. Computation of other parameters involve a search for a value that produces the desired value of P. The search relies on the monotinicity of P with the other parameter. Note The beta density is proportional to t^(A-1) * (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square distribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P + Q = 1.0. X -- Upper limit of integration of beta density. Input range: [0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0. A -- The first parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded by parameter number I if STATUS is negative. Lower search bound if STATUS is 1. Upper search bound if STATUS is 2.
float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_exponential ( float $par1 , float $par2 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_poisson ( float $par1 , float $par2 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_t ( float $par1 , float $par2 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_covariance ( array $a , array $b )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_den_uniform ( float $x , float $a , float $b )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_beta ( float $x , float $a , float $b )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_cauchy ( float $x , float $ave , float $stdev )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_chisquare ( float $x , float $dfr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_exponential ( float $x , float $scale )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_gamma ( float $x , float $shape , float $scale )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_laplace ( float $x , float $ave , float $stdev )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_logistic ( float $x , float $ave , float $stdev )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_negative_binomial ( float $x , float $n , float $pi )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_normal ( float $x , float $ave , float $stdev )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_pmf_binomial ( float $x , float $n , float $pi )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_pmf_poisson ( float $x , float $lb )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_t ( float $x , float $dfr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_dens_weibull ( float $x , float $a , float $b )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
number stats_harmonic_mean ( array $a )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_kurtosis ( array $a )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_beta ( float $a , float $b )\nパラメータ A および B で表されるベータ分布から、無作為な値を返します。 ベータ密度は、< x < に対して x^(a-1) * (1-x)^(b-1) / B(a,b) となります。これは R. C. H. Cheng の手法です。
float stats_rand_gen_chisquare ( float $df )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_exponential ( float $av )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_f ( float $dfn , float $dfd )\n分子の自由度が &quot;dfn&quot;、分母の自由度が &quot;dfd&quot; の F (分散比) 分布から、無作為な値を返します。カイ二乗の変量の比を直接生成します。
float stats_rand_gen_funiform ( float $low , float $high )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_gamma ( float $a , float $r )\n密度 (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X) のガンマ分布から、 無作為な値を生成します。
int stats_rand_gen_ibinomial_negative ( int $n , float $p )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int stats_rand_gen_ibinomial ( int $n , float $pp )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int stats_rand_gen_int ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int stats_rand_gen_ipoisson ( float $mu )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int stats_rand_gen_iuniform ( int $low , int $high )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_noncentral_t ( float $df , float $xnonc )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_normal ( float $av , float $sd )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_gen_t ( float $df )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array stats_rand_get_seeds ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array stats_rand_phrase_to_seeds ( string $phrase )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_rand_ranf ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void stats_rand_setall ( int $iseed1 , int $iseed2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_skew ( array $a )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_standard_deviation ( array $a [, bool $sample = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_binomial_coef ( int $x , int $n )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_correlation ( array $arr1 , array $arr2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_gennch ( int $n )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_independent_t ( array $arr1 , array $arr2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_innerproduct ( array $arr1 , array $arr2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_paired_t ( array $arr1 , array $arr2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_percentile ( float $df , float $xnonc )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_stat_powersum ( array $arr , float $power )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
float stats_variance ( array $a [, bool $sample = false ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array str_getcsv ( string $input [, string $delimiter [, string $enclosure [, string $escape ]]] )\nfgetcsv() と似ていますが、この関数がパースする入力は文字列です。 一方 fgetcsv() は、ファイルを入力として受け取ります。
mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )\nこの関数は、subject の中に現れるすべての search (大文字小文字を区別しない)を replace に置き換えた文字列あるいは配列を返します。 一般に、凝った置換ルールが必要ないのであれば、 preg_replace() で i 修正子を使用するかわりにこの関数を使用すべきです。
string str_pad ( string $input , int $pad_length [, string $pad_string = &quot; &quot; [, int $pad_type = STR_PAD_RIGHT ]] )\nこの関数は文字列 input の左、右または両側を指定した長さで埋めます。オプションの引数 pad_string が指定されていない場合は、 input は空白で埋められ、それ以外の場合は、 pad_string からの文字で制限まで埋められます。
string str_repeat ( string $input , int $multiplier )\ninput を multiplier 回を繰り返した文字列を返します。
mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )\nこの関数は、subject の中の search を全て replace に置換します。\n(正規表現のような) 技巧的な置換ルールを必要としない場合、 ereg_replace() または preg_replace() の代わりにこの関数を常用するべきです。
string str_rot13 ( string $str )\nPerforms the ROT13 encoding on the str argument and returns the resulting string.\nROT13 は、各文字をアルファベット順に 13 文字シフトさせ、 アルファベット以外の文字はそのままとするエンコードを行います。 エンコードとデコードは同じ関数で行われます。 引数にエンコードされた文字列を指定した場合には、元の文字列が返されます。
string str_shuffle ( string $str )\nstr_shuffle() は文字列をシャッフルします。 考えられるすべての順列のうちのひとつを作成します。
array str_split ( string $string [, int $split_length = 1 ] )\n文字列を配列に変換します。
mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )\nstring の単語数を数えます。 オプションの format が指定されていない場合、 見つかった単語の数を整数値で返します。 format が指定されている場合は結果が配列で返され、 配列の内容は format に依存します。 format に設定できる値と対応する出力については 以下で示します。\nこの関数を使用するうえで、&#039;単語&#039; は以下のように定義されます。すなわち、 「ロケールに依存しないアルファベットからなる文字列で、その先頭以外の部分に &quot;&#039;&quot; および &quot;-&quot; が含まれていてもよい」。
int strcasecmp ( string $str1 , string $str2 )\n大文字小文字を区別しないバイナリセーフな文字列比較を行います。
string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )\nhaystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。
int strcmp ( string $str1 , string $str2 )\nこの比較は大文字小文字を区別することに注意してください。
int strcoll ( string $str1 , string $str2 )\nこの比較は大文字小文字を区別すること、そして、 strcmp() とは異なり、 バイナリセーフではないことに注意してください。\nstrcoll() は比較を行う際に現在のロケールを使用します。 ロケールが C または POSIX の場合、この関数は strcmp() と等価です。
int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )\nstr1 において str2 の文字がどれも含まれていない最初のセグメントの長さを返します。
void stream_bucket_append ( resource $brigade , resource $bucket )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
object stream_bucket_make_writeable ( resource $brigade )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
object stream_bucket_new ( resource $stream , string $buffer )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
void stream_bucket_prepend ( resource $brigade , resource $bucket )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource stream_context_create ([ array $options [, array $params ]] )\noptions に、 指定されたオプションが予め設定されたストリームコンテキストを作成し、 それを返します。
resource stream_context_get_default ([ array $options ] )\n（fopen()、file_get_contents() のような） ファイル操作関数がコンテキストパラメータなしでコールされた場合に使用される デフォルトのストリームコンテキストを返します。デフォルトコンテキストに 関するオプションは、stream_context_create() と同じ 構文で任意に指定することが可能です。
array stream_context_get_options ( resource $stream_or_context )\n指定されたストリームまたはコンテキストに設定されたオプションを配列として返します。
array stream_context_get_params ( resource $stream_or_context )\nパラメータおよびオプションの情報を、ストリームあるいはコンテキストから取得します。
resource stream_context_set_default ( array $options )\n(fopen()、file_get_contents() のような) ファイル操作関数がコンテキストパラメータなしでコールされた場合に使用される デフォルトのストリームコンテキストを設定します。 stream_context_create() と同じ構文が使用できます。
bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )\nbool stream_context_set_option ( resource $stream_or_context , array $options )\n指定されたストリームまたはコンテキストのオプションを設定します。 value の内容が wrapper に対する option として設定されます。
bool stream_context_set_params ( resource $stream_or_context , array $params )\n指定したコンテキストのパラメータを設定します。
int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )\n現在の位置（あるいはもし指定されていれば offset の位置）から最大 maxlength バイトのデータを source から dest にコピーします。もし maxlength が指定されていない 場合は、source にある残りすべてのデータが コピーされます。
bool stream_encoding ( resource $stream [, string $encoding ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )\nfiltername で指定されたフィルタを、 stream に付加されているフィルタのリストに加えます。
resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )\nfiltername で指定されたフィルタを、 stream に付加されているフィルタのリストに加えます。
bool stream_filter_register ( string $filtername , string $classname )\nstream_filter_register() は、fopen() や fread() などのファイルシステムの関数で利用可能な 登録されているどの種類のストリームとも一緒に使うことのできる カスタムフィルタを登録します。
bool stream_filter_remove ( resource $stream_filter )\n事前に stream_filter_prepend() あるいは stream_filter_append() でストリームに追加した フィルタを削除します。フィルタの内部バッファに残っているデータは 削除前にフラッシュされ、次のフィルタに渡されます。
string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = 0 ]] )\nfile_get_contents() と似ていますが、 stream_get_contents() は既にオープンしている ストリームリソースに対して操作を行います。そして、指定した offset から始まる最大 maxlength バイトのデータを取得して文字列に 保存します。
array stream_get_filters ( void )\n実行中のシステムに登録されているフィルタの一覧を取得します。
string stream_get_line ( resource $handle , int $length [, string $ending ] )\n指定したハンドルから一行取得します。\n読み込みは、length バイト読まれたか、 ending で指定された文字列がストリームに見つかった か (この文字列は返値に 含まれません)、あるいは EOF に達したとき、のうち一番最初に遭遇したところで停止します。\nこの関数は fgets() とほとんど同一ですが、 \\n や \\r 、\\r\\n といった一般的な文字列以外を行末を示すデリミタ として指定できる点で、またデリミタ自体を返値に 含まない 点で異なります。
array stream_get_meta_data ( resource $stream )\n既存の stream に関する情報を返します。
array stream_get_transports ( void )\nスクリプトを走らせているシステムにおいて利用可能なソケットのトランスポートのリストを配列として返します。
array stream_get_wrappers ( void )\n実行中のシステムで使用可能な、登録済みのストリームの一覧を取得します。
bool stream_is_local ( mixed $stream_or_url )\nストリームあるいは URL が、ローカルのものであるかどうかを調べます。
void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )\nイベント発生時にコールされるコールバック関数です。 notification context parameter が使用します。
bool stream_wrapper_register ( string $protocol , string $classname [, int $flags  = 0 ] )\n自分で作ったプロトコルハンドラとストリームを実装し、それを fopen() や fread() といったファイルシステムの関数と利用することを可能にします。
string stream_resolve_include_path ( string $filename [, resource $context ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )\nstream_select() はストリームの配列を受け取ると、 それらの状態が変化するまで待ちます。機能としては、ストリームに対して 働くという点以外では socket_select() と同一です。
bool stream_set_blocking ( resource $stream , int $mode )\nstream のモードをブロックあるいは非ブロックに設定します。\nこの関数は、非ブロックモードをサポートするすべてのストリーム (現在は、通常のファイルストリームとソケットストリームのみ) において利用可能です。
bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )\nstream にタイムアウトの値を設定します。 この値は、seconds と microseconds の和で表されます。\nストリームがタイムアウトとなった場合は、 stream_get_meta_data() が返す配列のキー &#039;timed_out&#039; の値が TRUE に設定されます。エラーや警告が発生していなくても同様になります。
int stream_set_write_buffer ( resource $stream , int $buffer )\nstream で指定されたファイルポインタに buffer で表されたバイト数分だけ出力バッファを設定します。\nfwrite() による出力は、通常では 8K バイトがバッファされます。 これは、もし同じストリームに対し出力を行おうとするプロセスが2つあったとき、 いずれかのプロセスは、他方のプロセスが出力できるように 8K バイト分 データを書き出したところで停止することを示しています。
resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, string &$peername ]] )\n以前に stream_socket_server() によって作られたソケットの接続を受け入れます。
resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )\nremote_socket で指定された接続先との、 ストリームまたはデータグラム接続を確立します。 作成されるソケットのタイプは、[トランスポート]://[ターゲット] という形式の URL フォーマットによって指定された トランスポートによって決定されます。 TCP や UDP といったインターネットドメインのソケット (AF_INET) には、remote_socket パラメータの ターゲット の部分は、ホスト名または IP アドレスと、 それに続くコロンで区切られたポート番号から構成されていなければなりません。 Unix ドメインのソケットの場合は、ターゲット の部分は、ファイルシステムにおけるソケットのファイルを指定しなくては いけません。
mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )\nストリームの暗号化を有効あるいは無効にします。\n暗号化設定が確立されると、それ以降は enable パラメータに TRUE あるいは FALSE を指定することで暗号化の on/off を動的に切り替えられます。
string stream_socket_get_name ( resource $handle , bool $want_peer )\n指定したソケット接続のローカルまたはリモートでの名前を返します。
array stream_socket_pair ( int $domain , int $type , int $protocol )\nstream_socket_pair() は、互いに接続されており区別できない ソケットストリームの組を作成します。この関数は、一般に IPC （Inter-Process Communication: プロセス間通信）で使用します。
string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )\nstream_socket_recvfrom() は、 リモートソケットから最大 length バイトのデータを 受け取ります。
int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )\ndata で指定したデータを socket で指定したソケットに送信します。
resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )\nlocal_socket で指定された接続ポイントに、 ストリームまたはデータグラムソケットによる接続を作成します。\nこの関数は、ソケットのみを作成します。接続待ちの状態に入るには、 stream_socket_accept() 関数を使います。
bool stream_socket_shutdown ( resource $stream , int $how )\n全二重接続を (一時的あるいはそうでなく) 終了します。
bool stream_supports_lock ( resource $stream )\nflock() によるロックをそのストリームがサポートしているかどうかを調べます。
bool stream_wrapper_register ( string $protocol , string $classname [, int $flags  = 0 ] )\n自分で作ったプロトコルハンドラとストリームを実装し、それを fopen() や fread() といったファイルシステムの関数と利用することを可能にします。
bool stream_wrapper_restore ( string $protocol )\nstream_wrapper_unregister() で事前に登録を解除した 組み込みラッパを復元します。
bool stream_wrapper_unregister ( string $protocol )\nすでに定義されているストリームラッパを無効にします。ラッパが無効になった後は、 stream_wrapper_register() を使用してユーザ定義の ラッパで上書きしたり stream_wrapper_restore() で再度使用可能にしたりすることが可能となります。
string strftime ( string $format [, int $timestamp = time() ] )\nローカルの時刻・日付を、ロケール設定にもとづいてフォーマットします。 月および曜日の名前、およびその他の言語依存の文字列は、 setlocale() で設定された現在のロケールを尊重して表示されます。\n使用する C ライブラリで、すべての変換指定子がサポートされているとは限りません。 そのような場合、該当する変換指定子は PHP の strftime() ではサポートされません。 また、全てのプラットフォームが負のタイムスタンプをサポートしているわけではないため、 Unix Epoch (1970 年 1 月 1 日）以前の日付を扱えないかもしれません。 つまり、Windows や一部の Linux ディストリビューション、そしてその他のごく一部の オペレーティングシステム上では %e、%T、%R および %D (あるいはこれ以外も) が Jan 1, 1970 より前の日付について動作しないということです。 Windwos システム上でサポートされる変換指定子の概要については、 &raquo; MSDN に掲載されています。
string strip_tags ( string $str [, string $allowable_tags ] )\nこの関数は、指定した文字列 (str ) から全ての HTML および PHP タグを取り除きます。 この関数は、fgetss() 関数と同じタグ除去アルゴリズムを使用します。
string stripcslashes ( string $str )\nバックスラッシュを取り除いた文字列を返します。C言語と同様に \\n, \\r ..., 8進表現, 16進表現を認識します。
int stripos ( string $haystack , string $needle [, int $offset = 0 ] )\n文字列 haystack の中で needle が最初に現れる位置を数字で返します。\nstrpos() と異なり、stripos() は大文字小文字を区別しません。
string stripslashes ( string $str )\nクォートされた文字列を元に戻します。
string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )\nhaystack において needle が最初に見つかった位置から最後までを返します。
int strlen ( string $string )\n与えられた string の長さを返します。
int strnatcasecmp ( string $str1 , string $str2 )\nこの関数は、人間が行うような手法でアルファベットまたは数字の 文字列の順序を比較するアルゴリズムを実装します。この関数の動作は、 strnatcmp() に似ていますが、 比較が大文字小文字を区別しない違いがあります。 詳細な情報については、Martin Pool の &raquo; 自然順文字列比較 のページを参照ください。
int strnatcmp ( string $str1 , string $str2 )\nこの関数は、人間が行うような手法でアルファベットまたは数字の 文字列の順序を比較するアルゴリズムを実装します。この手法は、&quot;自然順&quot; と言われます。 この比較は、大文字小文字を区別することに注意してください。
int strncasecmp ( string $str1 , string $str2 , int $len )\nこの関数は、strcasecmp() に似ていますが、 各文字列から比較する文字数(の上限)(len ) を指定できるという違いがあります。どちらかの文字列が len より短い場合、その文字列の長さが比較時に使用されます。
int strncmp ( string $str1 , string $str2 , int $len )\nこの関数は strcmp() に似ていますが、 各文字列から(最大)文字数(len ) を比較に使用するところが異なります。\n比較は大文字小文字を区別することに注意してください。
string strpbrk ( string $haystack , string $char_list )\nstrpbrk() は、文字列 haystack から char_list を探します。
int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\n文字列 haystack の中で、 needle が最初に現れた位置を数字で返します。 PHP 5 以前の strrpos() とは異なり、この関数は needle パラメータとして文字列全体をとり、 その文字列全体が検索対象となります。
array strptime ( string $date , string $format )\nstrptime() は date をパースした結果を配列で返します。エラー時には FALSE を返します。\n月名や曜日、そしてその他の言語依存な文字列は setlocale() (LC_TIME) で設定された現在の ロケールを考慮して返します。
string strrchr ( string $haystack , mixed $needle )\nこの関数は、文字列 haystack の中で needle が最後に現れた位置から、 haystack の終わりまでを返します。
string strrev ( string $string )\nstring を逆順にして返します。
int strripos ( string $haystack , string $needle [, int $offset = 0 ] )\n文字列の中で、 大文字小文字を区別しないある文字列が最後に現れた位置を返します。 strrpos() と異なり、strripos() は大文字小文字を区別しません。
int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )\n文字列 haystack の中で、 needle が最後に現れた位置を数字で返します。 この場合、needle は単一文字でなければならないことに 注意してください。needle に文字列が指定された場合、その文字列の最初の文字だけが使われます。\nneedle が見つからない場合、FALSE を返します。\n&quot;位置 0 に文字が見つかった&quot; と &quot;文字が見つからなかった&quot; 場合の返り値は混同しやすいです。この違いを見分ける方法を以下に示します。\n<?php//&nbsp;PHP&nbsp;4.0.0&nbsp;以降の場合:$pos&nbsp;=&nbsp;strrpos($mystring,&nbsp;"b");if&nbsp;($pos&nbsp;===&nbsp;false)&nbsp;{&nbsp;//&nbsp;注意:&nbsp;等号が&nbsp;3&nbsp;つ&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;見つからない...}//&nbsp;4.0.0&nbsp;より古いバージョンの場合:$pos&nbsp;=&nbsp;strrpos($mystring,&nbsp;"b");if&nbsp;(is_bool($pos)&nbsp;&&&nbsp;!$pos)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;見つからない...}?>\nneedle が文字列でない場合は数値に変換されて、 その結果が検索対象の文字として適用されます。
int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )\nマスクに一致する最初のセグメントの長さを求めます。\nたとえば、\n<?php$var&nbsp;=&nbsp;strspn("42&nbsp;is&nbsp;the&nbsp;answer,&nbsp;what&nbsp;is&nbsp;the&nbsp;question&nbsp;...",&nbsp;"1234567890");?>\nこのコードは、$var に 2 を代入します。これは、 &quot;1234567890&quot; からの文字を含む最長の部分が &quot;42&quot; であるためです。
string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )\nhaystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。
string strtok ( string $str , string $token )\nstring strtok ( string $token )\nstrtok() は文字列 (str ) を 何らかの文字 token によって区切られている小さな文字列 (トークン) に分割します。 &quot;This is an example string&quot; のような文字列がある場合、 空白文字をトークンとするとこの文字列を個々の単語に分割することができます。\nstrtok は最初のコールの時のみ string 引数を使用することに注意してください。 strtok は、文字列のどこにいるのかの情報を保持しているため、 2回目以降のコールではトークンのみを必要とします。 最初からやりなおす場合や新しい文字列をトークンに分割する場合、 初期化するために再度string引数を指定してstrtokをコールします。 文字列は、引数の文字のどれかが見つかったはトークンに分割されます。
string strtolower ( string $str )\nstring のアルファベット部分をすべて小文字にして返します｡\n「アルファベット部分」は現在のロケールにより決定されます。 つまり、たとえばデフォルトの「C」ロケールである場合は、 A ウムラウト (A) のような文字は変換されません。
int strtotime ( string $time [, int $now ] )\nこの関数は US 英文形式の日付を含む文字列が指定されることを期待しており、 now で与えられたその形式から Unix タイムスタンプ (1970 年 1 月 1 日 00:00:00 UTC からの経過秒数) への変換を試みます。 now が指定されていない場合は現在日時に変換します。\nこの関数は、タイムスタンプを計算するために (利用可能であれば) 環境変数 TZ を使用します。PHP 5.1.0 以降では、日付/時刻関数で 使用されるタイムゾーンを設定する簡単な方法があります。 その方法については date_default_timezone_get() 関数のページを参照ください。
string strtoupper ( string $string )\nstring のアルファベット部分をすべて大文字にして返します｡\n「アルファベット部分」は現在のロケールにより決定されます。 つまり、たとえばデフォルトの「C」ロケールである場合は、 a ウムラウト (a) のような文字は変換されません。
string strtr ( string $str , string $from , string $to )\nstring strtr ( string $str , array $replace_pairs )\nこの関数は str を走査し、 from に含まれる文字が見つかると、そのすべてを to の中で対応する文字に置き換え、 その結果を返します。\nfrom と to の長さが異なる場合、長い方の余分な文字は無視されます。
string strval ( mixed $var )\nvar の string としての値を 返します。文字列への変換の詳細については、string の ドキュメントを参照ください。
int substr_compare ( string $main_str , string $str , int $offset [, int $length = 0 [, bool $case_insensitivity = false ]] )\nsubstr_compare() は、main_str の offset 文字目以降の最大 length 文字を、str と比較します。
int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )\nsubstr_count() は、文字列 haystack の中での副文字列 needle の出現回数を返します。 needle は英大小文字を区別することに注意してください。
mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )\nsubstr_replace()は、文字列 string の start および (オプションの) length パラメータで区切られた部分を replacement で指定した文字列に置換します。
string substr ( string $string , int $start [, int $length ] )\n文字列 string の、start で指定された位置から length バイト分の文字列を返します。
bool svn_add ( string $path [, bool $recursive = true [, bool $force = false ]] )\npath が指すファイル、 ディレクトリあるいはシンボリックリンクを作業コピーに追加します。 その作業コピー上で次に svn_commit() をコールしたときに、アイテムがリポジトリに追加されます。
string svn_auth_get_parameter ( string $key )\n認証パラメータ key を取得します。 使用できるキーとその意味については 認証定数の一覧 を参照ください。
void svn_auth_set_parameter ( string $key , string $value )\n認証パラメータ key の値を value に設定します。 使用できるキーとその意味については 認証定数の一覧 を参照ください。
array svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] )\nリポジトリの URL を指定して、ファイルの SVN blame を取得します。
string svn_cat ( string $repos_url [, int $revision_no ] )\nリポジトリ内のファイルを指す URL repos_url の中身を返します。オプションでリビジョン番号 revision_no を指定します。
bool svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]] )\nrepos にあるリポジトリの リビジョン revision を、 targetpath の作業コピーにチェックアウトします。
bool svn_cleanup ( string $workingdir )\n作業コピーディレクトリ workingdir を再帰的にクリーンアップし、中途半端になっている操作を完了してロックを削除します。 作業コピーが中途半端な状態になってしまったときに、 再度使用可能にするために用います。
string svn_client_version ( void )\nSVN クライアントライブラリのバージョンを返します。
array svn_commit ( string $log , array $targets [, bool $dontrecurse ] )\n配列 targets で指定した、 ローカルの作業コピーで変更されたファイルの内容をリポジトリにコミットします。 ログメッセージは log で指定します。 targets にディレクトリを指定すると、 dontrecurse が true でない限りは再帰的にコミットを行います。
array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 )\nふたつのパス path1 および path2 の差分を再帰的に取得します。
bool svn_export ( string $frompath , string $topath [, bool $working_copy = true ] )\n作業コピーあるいはリポジトリの内容を、「クリーンな」ディレクトリにエクスポートします。
bool svn_fs_abort_txn ( resource $txn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nトランザクションを中断し、成功したら true、失敗したら false を返します。
resource svn_fs_apply_text ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n置換に使用するストリームを作成して返します。
resource svn_fs_begin_txn2 ( resource $repos , int $rev )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しいトランザクションを作成します。
bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n成功したら true、失敗したら false を返します。
int svn_fs_check_path ( resource $fsroot , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したリポジトリの fsroot パスにどんなアイテムが存在するかを調べます。
bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nコンテンツが変更されている場合に true、されていない場合に false を返します。
bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nファイルやディレクトリをコピーし、成功したら true、失敗したら false を返します。
bool svn_fs_delete ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nファイルやディレクトリを削除し、成功したら true、失敗したら false を返します。
array svn_fs_dir_entries ( resource $fsroot , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したパスのディレクトリを列挙し、ディレクトリ名とファイルタイプのハッシュを返します。
resource svn_fs_file_contents ( resource $fsroot , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したバージョンの fs から、ファイルの中身を読み込むためのストリームを返します。
int svn_fs_file_length ( resource $fsroot , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したバージョンの fs から、ファイルの長さを返します。
bool svn_fs_is_dir ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nディレクトリを指すパスである場合に true、それ以外の場合に false を返します。
bool svn_fs_is_file ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nファイルを指すパスである場合に true、それ以外の場合に false を返します。
bool svn_fs_make_dir ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n空のディレクトリを作成し、成功したら true、失敗したら false を返します。
bool svn_fs_make_file ( resource $root , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n空のファイルを作成し、成功したら true、失敗したら false を返します。
int svn_fs_node_created_rev ( resource $fsroot , string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nfsroot 配下のパスが作成されたリビジョンを返します。
string svn_fs_node_prop ( resource $fsroot , string $path , string $propname )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nノードのプロパティの値を返します。
bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nプロパティが変更されている場合に true、それ以外の場合に false を返します。
string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したプロパティの値を取得します。
resource svn_fs_revision_root ( resource $fs , int $revnum )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nリポジトリのルートの指定したバージョンのハンドルを取得します。
resource svn_fs_txn_root ( resource $txn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nトランザクションのルートを作成して返します。
int svn_fs_youngest_rev ( resource $fs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nファイルシステム内で一番若いリビジョン番号を返します。
bool svn_import ( string $path , string $url , bool $nonrecursive )\nバージョン管理されていないパス path を、 url で指定したリポジトリにコミットします。 path がディレクトリで nonrecursive が FALSE の場合は、 再帰的にインポートします。
array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] )\nsvn_log() は、指定したリビジョン URL repos_url の中身の完全な履歴を返します。 start_revision を指定した場合は、そのリビジョンの履歴を返します。 この関数は、svn log --verbose -r $start_revision $repos_url と同等です。\n警告\n長い期間使用しているリポジトリでは、出力が巨大なものになる可能性があります (すべてのリビジョンに対して配列の項目ができあがります)。 この関数は --limit NUM フラグをサポートしていません。 また、リビジョンの範囲指定にも対応していません (start_revision は整数で指定しなければなりません)。
array svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = false ]] )\nこの関数は、指定したリポジトリ URL のファイルやディレクトリの一覧を返します。 オプションで、特定のリビジョンを指定することもできます。 これは、svn list $repos_url[@$revision_no] と同等です。
bool svn_mkdir ( string $path )\n作業コピーあるいはリポジトリ内にディレクトリを作成します。
resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しい subversion リポジトリを指定したパスに作成します。
resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n新しいトランザクションを作成します。
int svn_repos_fs_commit_txn ( resource $txn )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nトランザクションをコミットし、新しいリビジョンを返します。
resource svn_repos_fs ( resource $repos )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nリポジトリ用に、ファイルシステム上のハンドルを取得します。
bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nrepospath にあるリポジトリのホットコピーを作成し、destpath にコピーします。
resource svn_repos_open ( string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\nリポジトリの共有ロックをオープンします。
bool svn_repos_recover ( string $path )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。\n指定したパスのリポジトリのリカバリ処理を実行します。
bool svn_revert ( string $path [, bool $recursive = false ] )\n作業コピー内のパスでのローカルの変更内容を取り消します。
array svn_status ( string $path [, int $flags = 0 ] )\n作業コピー内のファイルやディレクトリの状態を返します。 作業コピー内での変更、追加、削除などの内容を取得できます。
int svn_update ( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = true ]] )\npath の作業コピーを revno で指定したリビジョンにアップデートします。 recurse が true の場合は、 再帰的にアップデートします。
void swf_actiongeturl ( string $url , string $target )\n指定したターゲット target からパラメータ url で指定したURLを得ます。
void swf_actiongotoframe ( int $framenumber )\n関数 swf_actiongotoframe() は、 framenumber で指定したフレームまで移動し、 実行した後で停止します。
void swf_actiongotolabel ( string $label )\n関数 swf_actiongotolabel() は、 label で指定したラベルを有するフレームを 表示した後で停止します。
void swf_actionnextframe ( void )\nフレームを一つ進めます。
void swf_actionplay ( void )\n現在のフレームから flash ムービーを開始します。
void swf_actionprevframe ( void )\nひとつ前のフレームに戻します。
void swf_actionsettarget ( string $target )\n全てのアクションのコンテキストを設定します。 この関数を、現在実行中の他の flash ムービーを 制御するために使用することが可能です。
void swf_actionstop ( void )\n現在のフレームで flash ムービーの実行を終了します。
void swf_actiontogglequality ( void )\nflash ムービーのクオリティの低品質/高品質を切り替えます。
void swf_actionwaitforframe ( int $framenumber , int $skipcount )\n関数 swf_actionwaitforframe() は、パラメータ framenumber で指定したフレームがロードされているか どうかを確認し、ロードされていない場合はパラメータ skipcount で指定したアクションの数だけスキップ します。この関数は &quot;Loading...&quot; 型のアニメーションの場合に有用です。
void swf_addbuttonrecord ( int $states , int $shapeid , int $depth )\nボタンを使用する際の仕様を定義します。
void swf_addcolor ( float $r , float $g , float $b , float $a )\n指定した rgba 色にグローバル加算色を設定します。 この色は、この後(暗黙の内に)関数 swf_placeobject()、 swf_modifyobject()、 swf_addbuttonrecord() で使用されます。\nオブジェクトがスクリーンに描かれる時に、オブジェクトの色に 指定した値が加算されます。
void swf_closefile ([ int $return_file ] )\nswf_openfile() 関数によりオープンされたファイルを閉じます。
void swf_definebitmap ( int $objid , string $image_name )\n関数 swf_definebitmap() は、 指定したイメージのビットマップを定義します。
void swf_definefont ( int $fontid , string $fontname )\n関数 swf_definefont() は、パラメータ fontname で指定したフォントを定義し、パラメータ fontid で指定した ID に設定します。この関数は、fontname で指定したフォントを 現在のフォントに設定します。
void swf_defineline ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )\n線を定義します。
void swf_definepoly ( int $objid , array $coords , int $npoints , float $width )\nx, y 座標の配列で指定した多角形を定義します
void swf_definerect ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )\n左上と右下の点の座標を指定し、長方形を定義します。
void swf_definetext ( int $objid , string $str , int $docenter )\n現在のフォントおよびフォントサイズを使用して、テキスト文字列を定義します。
void swf_endbutton ( void )\n関数 swf_endbutton() は、 現在のボタンの定義を終了します。
void swf_enddoaction ( void )\n関数 swf_startdoaction() で開始した 現在のアクションを終了します。
void swf_endshape ( void )\nswf_endshape() は、 現在の形状の定義を完結します。
void swf_endsymbol ( void )\n関数 swf_startsymbol() で開始したシンボルの定義を終了します。
void swf_fontsize ( float $size )\nフォントの大きさを、 パラメータ size で指定した値に変更します。
void swf_fontslant ( float $slant )\n現在のフォントの傾きを、パラメータ slant で指定した角度に設定します。
void swf_fonttracking ( float $tracking )\nパラメータ tracking で指定した値にフォントのトラッキングを 設定します。この関数は、文字およびテキスト間の空白を増加させるために使用され、 正の値は文字間の空白を増加させ、負の値は空白を減少させます。
array swf_getbitmapinfo ( int $bitmapid )\nビットマップに関する情報を返します。
array swf_getfontinfo ( void )\n大文字の A と小文字の x の高さをピクセル単位で調べることによって、 フォントについての情報を取得します。
int swf_getframe ( void )\n関数 swf_getframe() は、現在のフレームの 番号を得ます。
void swf_labelframe ( string $name )\n現在のフレームにパラメータ name で 指定した名前を付けます。
void swf_lookat ( float $view_x , float $view_y , float $view_z , float $reference_x , float $reference_y , float $reference_z , float $twist )\n視点の位置およびシーンの基準点の座標を定義することにより、 視点変換を定義します。
void swf_modifyobject ( int $depth , int $how )\nオブジェクトの位置または/および色を指定した深さ depth に更新します。
void swf_mulcolor ( float $r , float $g , float $b , float $a )\n指定した rgba 色にグローバル乗算色を設定します。 この色は、この後 (暗黙の内に) 関数 swf_placeobject()、 swf_modifyobject()、 swf_addbuttonrecord() で使用されます。\nオブジェクトがスクリーンに描かれる時にオブジェクトの色に 指定した値が掛けられます。
int swf_nextid ( void )\n関数 swf_nextid() は、次に利用可能なオブジェクト ID を返します。
void swf_oncondition ( int $transition )\n関数 swf_onCondition() は、 アクションリストのトリガとなるトランジションを定義します。
void swf_openfile ( string $filename , float $width , float $height , float $framerate , float $r , float $g , float $b )\n新しいファイルをオープンします。 この関数は最初にコールしなければなりません。そうしないと、 スクリプトは動作しません。
void swf_ortho ( float $xmin , float $xmax , float $ymin , float $ymax , float $zmin , float $zmax )\nユーザ座標の三次元直交マッピングを 現在のビューポートに定義します。
void swf_ortho2 ( float $xmin , float $xmax , float $ymin , float $ymax )\nユーザ座標の二次元直交マッピングを現在のビューポートに定義します。この関数は、 デフォルトを Flash ムービーの 1 対 1 のマッピングとします。\n遠近法による変換を望む場合、関数 swf_perspective() を使用することが可能です。
void swf_perspective ( float $fovy , float $aspect , float $near , float $far )\n遠近法による投影変換を定義します。
void swf_placeobject ( int $objid , int $depth )\nオブジェクトを、深さ depth で現在のフレームに配置します。\nこの関数は、(swf_mulcolor() で指定した) 現在の乗算色および(swf_addcolor() で指定した) 現在の加算色をオブジェクトに色づけする際に使用します。また、 オブジェクトの位置を決める際に現在の行列を使用します。
void swf_polarview ( float $dist , float $azimuth , float $incidence , float $twist )\nswf_polarview() 関数は、極座標で視点を定義します。
void swf_popmatrix ( void )\n現在の変換行列をスタックから回復します。
void swf_posround ( int $round )\nオブジェクトを配置または移動する際に行う変換時の丸め処理を有効または無効にします。 丸めが有効になると読みやすくなる場合が多いです。
void swf_pushmatrix ( void )\n現在の変換行列をスタックに入れます。
void swf_removeobject ( int $depth )\ndepth で指定した深さのオブジェクトを削除します。
void swf_rotate ( float $angle , string $axis )\nパラメータ angle で指定した角度だけ、 パラメータ axis で指定した座標軸の周りに 現在の座標軸を回転します。
void swf_scale ( float $x , float $y , float $z )\nswf_scale() は、指定した値で曲線の座標をスケーリングします。
void swf_setfont ( int $fontid )\nswf_setfont() は、現在のフォントをパラメータ fontid で指定した値に設定します。
void swf_setframe ( int $framenumber )\nアクティブなフレームを framenumber で指定したフレームに変更します。
void swf_shapearc ( float $x , float $y , float $r , float $ang1 , float $ang2 )\n円弧を描画します。
void swf_shapecurveto ( float $x1 , float $y1 , float $x2 , float $y2 )\n現在の位置から、指定したふたつの点を使用して二次ベジエ曲線を描画します。\nその後、現在の位置は x2 および y2 が指す場所となります。
void swf_shapecurveto3 ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )\n指定した座標を使用して、三次ベジエ曲線を描画します。\nその後、現在の位置は x3 および y3 が指す場所となります。
void swf_shapefillbitmapclip ( int $bitmapid )\n塗りつぶしをクリップ付きのビットマップに設定します。 空いた部分は、ビットマップで埋められます。
void swf_shapefillbitmaptile ( int $bitmapid )\nタイル状タイルでの塗りつぶしを設定します。空いた部分は、 ビットマップで埋められます。
void swf_shapefilloff ( void )\n現在の形状において塗りつぶしをオフにします。
void swf_shapefillsolid ( float $r , float $g , float $b , float $a )\n現在の塗りつぶし形式をソリッド(塗りつぶし有)にし、 塗りつぶし色を指定した値にします。
void swf_shapelinesolid ( float $r , float $g , float $b , float $a , float $width )\n現在の線のスタイルを、指定した色と幅に設定します。
void swf_shapelineto ( float $x , float $y )\nパラメータ x 、 y で指定した x,y 座標まで線を描きます。 現在の位置はパラメータ x,y となります。
void swf_shapemoveto ( float $x , float $y )\n現在の位置を、指定した場所に移動します。
void swf_showframe ( void )\n現在のフレームを出力します。
void swf_startbutton ( int $objid , int $type )\nボタンの定義を開始します。
void swf_startdoaction ( void )\n現在のフレームのアクションリストの記述を開始します。この関数は、 現在のフレームのアクションが定義される前にコールする必要があります。
void swf_startshape ( int $objid )\n複雑な形状を開始します。
void swf_startsymbol ( int $objid )\nシンボルとしてオブジェクト ID を定義します。シンボルは、同時に実行可能な 小さな flash ムービーです。
float swf_textwidth ( string $str )\n現在のフォントおよびフォントサイズを用いて、 文字列の幅をピクセル値で返します。
void swf_translate ( float $x , float $y , float $z )\n指定した値で現在の座標を変換します。
void swf_viewport ( float $xmin , float $xmax , float $ymin , float $ymax )\n描画の範囲として xmin から xmax 、 ymin から ymax までを 選択します。この関数がコールされない場合、描画範囲はデフォルトとして 画面の大きさになります。
SWFAction\nSWFAction __construct ( string $script )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFAction を作成し、その内部の script をコンパイルします。
SWFBitmap\nSWFBitmap __construct ( mixed $file [, mixed $alphafile ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFBitmap オブジェクトを、指定した file から作成します。
SWFBitmap\nfloat getHeight ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nビットマップの高さを返します。
SWFBitmap\nfloat getWidth ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nビットマップの幅を返します。
SWFButton\nvoid addAction ( SWFAction $action , int $flags )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定した action を、 条件を指定してボタンに追加します。
SWFButton\nSWFSoundInstance addASound ( SWFSound $sound , int $flags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFButton\nvoid addShape ( SWFShape $shape , int $flags )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定した shape をボタンに追加します。
SWFButton\nSWFButton __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しいボタンを作成します。
SWFButton\nvoid setAction ( SWFAction $action )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nボタンがクリックされたときに実行されるアクションを設定します。\nこれは、SWFButton->addAction にフラグ SWFBUTTON_MOUSEUP を指定してコールするのと同じです。
SWFButton\nvoid setDown ( SWFShape $shape )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfbutton->setdown() は addShape(shape, SWFBUTTON_DOWN) のエイリアスです。
SWFButton\nvoid setHit ( SWFShape $shape )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfbutton->sethit() は addShape(shape, SWFBUTTON_HIT) のエイリアスです。
SWFButton\nvoid setMenu ( int $flag )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFButton\nvoid setOver ( SWFShape $shape )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfbutton->setover() は addShape(shape, SWFBUTTON_OVER) のエイリアスです。
SWFButton\nvoid setUp ( SWFShape $shape )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfbutton->setup() は addShape(shape, SWFBUTTON_UP) のエイリアスです。
SWFDisplayItem\nvoid addAction ( SWFAction $action , int $flags )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nvoid addColor ( int $red , int $green , int $blue [, int $a ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->addcolor() は、指定した色を このアイテムの色変換に追加します。色は RGB 形式で指定します。\nオブジェクトは swfshape()、 swfbutton()、swftext() あるいは swfsprite() となります。オブジェクトは swfmovie->add() を使用して追加されていなければ なりません。
SWFDisplayItem\nvoid endMask ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getRot ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getX ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getXScale ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getXSkew ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getY ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getYScale ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nfloat getYSkew ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nvoid move ( float $dx , float $dy )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->move() は、現在のオブジェクトを 現在位置から (dx ,dy ) まで移動します。\nオブジェクトは swfshape()、 swfbutton()、swftext() あるいは swfsprite() となります。オブジェクトは swfmovie->add() を使用して追加されていなければなりません。
SWFDisplayItem\nvoid moveTo ( float $x , float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->moveto() は、グローバル座標系で 現在のオブジェクトを (x ,y ) に移動します。\nオブジェクトは swfshape()、 swfbutton()、swftext() あるいは swfsprite() となります。オブジェクトは swfmovie->add() を使用して追加されていなければなりません。
SWFDisplayItem\nvoid multColor ( float $red , float $green , float $blue [, float $a ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->multcolor() は、指定した値で アイテムの色変換を乗算します。\nオブジェクトは swfshape()、 swfbutton()、swftext() あるいは swfsprite() となります。オブジェクトは swfmovie->add() を使用して追加されていなければ なりません。
SWFDisplayItem\nvoid remove ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->remove() は、このオブジェクトをムービーの表示リストから削除します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid rotate ( float $angle )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->rotate() は、現在のオブジェクトを 現在の角度から ddegrees 度回転させます。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid rotateTo ( float $angle )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->rotateto() は、 グローバル座標で、現在のオブジェクトを 現在の角度から ddegrees 度回転させます。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid scale ( float $dx , float $dy )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->scale() は、現在のオブジェクトを 現在の大きさから (dx ,dy ) に拡大縮小します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid scaleTo ( float $x [, float $y ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->scaleto() は、現在のオブジェクトを グローバル座標系において (dx ,dy ) に拡大縮小します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid setDepth ( int $depth )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->setdepth() は、オブジェクトの z オーダーを depth に設定します。デフォルト値は インスタンスが作成された(図形/文字をムービーに追加した) 際のオーダーで、 新しく作成されたものほど前面になります。2 つのオブジェクトに同じ depth を指定した場合、後から定義したもののみが移動します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid setMaskLevel ( int $level )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nvoid setMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFDisplayItem\nvoid setName ( string $name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->setname() はオブジェクトの名前を name に設定します。 アクションスクリプトからこの名前を使用します。 これは、スプライトに対してのみ有用です。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid setRatio ( float $ratio )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->setratio() は、オブジェクトの比を ratio に設定します。明らかに、これは morph に対してのみ有用です。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid skewX ( float $ddegrees )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->skewx() は、 現在の x-skew に ddegrees を追加します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid skewXTo ( float $degrees )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->skewxto() は、 現在の x-skew を degrees に設定します。 degrees を 1.0 にすると、前方 45 度の傾きを 意味します。それより大きくするとより前方に、小さくするとより後方に なります。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid skewY ( float $ddegrees )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->skewy() は、 現在の y-skew に ddegrees を追加します。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFDisplayItem\nvoid skewYTo ( float $degrees )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfdisplayitem->skewyto() は、 現在の y-skew を degrees に設定します。 degrees を 1.0 にすると、前方 45 度の傾きを 意味します。それより大きくするとより前方に、小さくするとより後方に なります。\nオブジェクトは、swfshape() か swfbutton()、swftext()、 swfsprite() のいずれかとなります。 これは、swfmovie->add() で追加されたものでなければなりません。
SWFFill\nvoid moveTo ( float $x , float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n塗りつぶしの原点を、指定したグローバル座標に移動します。
SWFFill\nvoid rotateTo ( float $angle )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n塗りつぶしの回転を degrees 度に設定します。
SWFFill\nvoid scaleTo ( float $x [, float $y ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n塗りつぶしの倍率を設定します。
SWFFill\nvoid skewXTo ( float $x )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n塗りつぶしの x-skew を x に設定します。
SWFFill\nvoid skewYTo ( float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n塗りつぶしの y-skew を y に設定します。
SWFFont\nSWFFont __construct ( string $filename )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nfilename が、FDBファイルの名前 (すなわち、 &quot;.fdb&quot; で終る) の場合、このファイル中のフォントの定義を読み込みます。 そうでない場合、ブラウザで定義されたフォントリファレンスを作成します。\nFDB (&quot;font definition block&quot;) は、フォントに関する詳細な情報が 記述されている SWF DefineFont2 ブロック用の非常に簡単なラッパーです。 FDB ファイルは、ming の配布ファイルの util ディレクトリにある 付属の makefdb ユーティリティにより SWF ジェネレータ テンプレートファイルから作成することが可能です。\nブラウザで定義されたフォントには、フォント名以外のフォント情報が含まれていません。 フォント定義は、ムービープレイヤーに提供されると仮定します。 フォント _serif, _sans, _typewriter は、常に使用可能です。 例えば、\n<?php$f&nbsp;=&nbsp;newSWFFont("_sans");&nbsp;?>\nにより、標準的な sans-serif フォントが指定されます。これは、HTML で <font name=&quot;sans-serif&quot;> と指定した場合と おそらく同じになります。
SWFFont\nfloat getAscent ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFont\nfloat getDescent ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFont\nfloat getLeading ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFont\nstring getShape ( int $code )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFont\nfloat getUTF8Width ( string $string )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFont\nfloat getWidth ( string $string )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswffont->getwidth() は、フォントのデフォルトの 大きさを使用して文字列 string の幅を返します。 テキストオブジェクトの大きさを使用した、このメソッドの swftext() バージョンを使用したくなることもあるでしょう。
SWFFontChar\nvoid addChars ( string $char )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFFontChar\nvoid addUTF8Chars ( string $char )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFGradient\nvoid addEntry ( float $ratio , int $red , int $green , int $blue [, int $alpha = 255 ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfgradient->addentry() は、gradient のリストに エントリを追加します。ratio は 0 から 1 までの 数値で、gradient にこの色が現れる割合を示します。 この値を増加させると、割合が増加します。\nred 、green 、blue は色 (RGB モード) を表します。
SWFGradient\nSWFGradient __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfgradient() は、新しい SWFGradient オブジェクトを作成します。\ngradient にエントリを追加すると、swfshape->addfill() メソッドでの塗りつぶしに gradient を使用できるようになります。\nSWFGradient は以下のメソッドを保持します。swfgradient->addentry()。\nこの単純な例では、黒から白への gradient を背景に、赤い円盤を その中央に描きます。
SWFMorph\nSWFMorph __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFMorph オブジェクトを作成します。\n&quot;shape tween&quot; とも呼ばれます。これは、趣味の悪いねじれたもので コンピュータを息詰まらせてしまいます。なんと楽しいことだ!
SWFMorph\nSWFShape getShape1 ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変換の最初の図形を取得します。
SWFMorph\nSWFShape getShape2 ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n変換の最後の図形を取得します。
SWFMovie\nmixed add ( object $instance )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSWF オブジェクトのインスタンス instance を現在のムービーに追加します。
SWFMovie\nvoid addExport ( SWFCharacter $char , string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nmixed addFont ( SWFFont $font )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nSWFMovie __construct ([ int $version ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSWF ムービーを表す、新しいムービーオブジェクトを作成します。
SWFMovie\nSWFSprite importChar ( string $libswf , string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nSWFFontChar importFont ( string $libswf , string $name )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nvoid labelFrame ( string $label )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nvoid nextFrame ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n動画の次のフレームに移動します。
SWFMovie\nint output ([ int $compression ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSWFMovie を出力します。\nこの関数を使用する前には、 Content-Type HTTP ヘッダを送信し、 ムービーがブラウザで表示されるようにしておきましょう。
SWFMovie\nvoid remove ( object $instance )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定したオブジェクトのインスタンス instance を表示リストから削除します。
SWFMovie\nint save ( string $filename [, int $compression ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSWF ムービーを、指定したファイル filename に保存します。
SWFMovie\nint saveToFile ( resource $x [, int $compression ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nvoid setbackground ( int $red , int $green , int $blue )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n背景色を設定します。\nなで rgba 版がないのでしょうか? 考えても見てください。 HTML の背景を表示させたいこともあるでしょう。 その方法はあるのですが、IE4 でしか動作しません。詳細は &raquo; http://www.macromedia.com/ で検索してください。
SWFMovie\nvoid setDimension ( float $width , float $height )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nムービーの大きさを、指定した幅 width と高さ height に設定します。
SWFMovie\nvoid setFrames ( int $number )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n動画の総フレーム数を number に設定します。
SWFMovie\nvoid setRate ( float $rate )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n動画のフレームレートを rate に設定します。\nプレイヤーがフレームを処理しきれない場合は、 アニメーションの速度が低下します。ただし、ストリーミング音声が 存在する場合は、音飛びを防ぐためにフレームが間引かれます。
SWFMovie\nSWFSoundInstance startSound ( SWFSound $sound )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nvoid stopSound ( SWFSound $sound )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFMovie\nint streamMP3 ( mixed $mp3file [, float $skip = 0 ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n指定した MP3 ファイル mp3file をストリーム再生します。\n異常なデータに対する耐性は十分ではありません (最初の ID3 タグは読み飛ばしますが、その程度です)。\nムービーはそれほど賢くないので、mp3 ストリーム全体を含めるには 必要なだけの (曲の長さ * 一秒あたりのフレーム数) フレームを用意する必要があります。
SWFMovie\nvoid writeExports ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFPrebuiltClip\nSWFPrebuiltClip __construct ( mixed $file )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nSWFFill addFill ( int $red , int $green , int $blue [, int $alpha = 255 ] )\nSWFFill addFill ( SWFBitmap $bitmap [, int $flags ] )\nSWFFill addFill ( SWFGradient $gradient [, int $flags ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSWFShape->addFill() は、図形の塗りつぶし形式リストに 塗りつぶしを追加します。SWFShape->addFill() は、 異なる三つの形式で引数を受け付けます。\nred 、green 、blue は (RGB モードの) 色です。\n引数 bitmap は SWFBitmap() オブジェクトです。引数 flags は以下の定数 SWFFILL_CLIPPED_BITMAP、SWFFILL_TILED_BITMAP、SWFFILL_LINEAR_GRADIENT あるいは SWFFILL_RADIAL_GRADIENT のうちのいずれかです。 デフォルトは、SWFBitmap の場合は SWFFILL_TILED_BITMAP、 SWFGradient の場合は SWFFILL_LINEAR_GRADIENT です。\n引数 gradient は SWFGradient() オブジェクトです。引数 flags は以下の定数 SWFFILL_RADIAL_GRADIENT あるいは SWFFILL_LINEAR_GRADIENT のうちの いずれかです。デフォルトは SWFFILL_LINEAR_GRADIENT で、 これは確実です。\nSWFShape->addFill() は、以下で説明する SWFShape->setLeftFill() および SWFShape->setRightFill() 関数で使用する SWFFill() オブジェクトを返します。
SWFShape\nSWFShape __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFShape オブジェクトを作成します。
SWFShape\nvoid drawArc ( float $r , float $startAngle , float $endAngle )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nvoid drawCircle ( float $r )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nint drawCubic ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nint drawCubicTo ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nint drawCurve ( float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->drawcurve() は、 (swfshape->setline() で設定した現在の線スタイルを 使用して) 現在のペンの位置から相対座標 (anchorx ,anchory ) まで 制御点 (controlx ,controly ) を使用して 2 次曲線を描きます。つまり、制御点にまず向かった後で、 anchor 点までなめらかに戻ってくるということです。\n6 つのパラメータを使用すると、点 (x+targetdx , x+targetdy ) に向かって 制御点 (x+controldx , y+controldy ) および (x+anchordx , y+anchordy ) を使用して 3 次ベジエ曲線を描きます。
SWFShape\nint drawCurveTo ( float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->drawcurveto() は、 (swfshape->setline() で設定した現在の線スタイルを 使用して) 現在のペンの位置から (anchorx ,anchory ) まで 制御点 (controlx ,controly ) を使用して 2 次曲線を描きます。つまり、制御点にまず向かった後で、 anchor 点までなめらかに戻ってくるということです。\n6 つのパラメータを使用すると、点 (targetx , targety ) に向かって 制御点 (controlx , controly ) および (anchorx , anchory ). を使用して 3 次ベジエ曲線を描きます。
SWFShape\nvoid drawGlyph ( SWFFont $font , string $character [, int $size ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFShape\nvoid drawLine ( float $dx , float $dy )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->drawline() は、 (swfshape->setline() で設定した現在の線スタイルを 使用して) 現在のペンの位置から (dx ,dy ) まで直線を描きます。
SWFShape\nvoid drawLineTo ( float $x , float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->drawlineto() は、 (swfshape->setline() で設定した現在の線スタイルを 使用して) 現在のペンの位置から (x ,y ) まで 図形の座標空間で直線を描きます。
SWFShape\nvoid movePen ( float $dx , float $dy )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->setrightfill() は、図形のペンを 図形の座標空間で (現在の x,現在の y) から (現在の x + dx , 現在の y + dy ) まで移動します。
SWFShape\nvoid movePenTo ( float $x , float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->setrightfill() は、図形のペンを 図形の座標空間で (x ,y ) に移動します。
SWFShape\nvoid setLeftFill ( SWFGradient $fill )\nvoid setLeftFill ( int $red , int $green , int $blue [, int $a ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n何とナンセンスなことに、すべての輪郭には最大 2 つまでの塗りつぶししか 接することができません。オブジェクトをラスタライズする際に、 どの塗りつぶしがあるかを早めに知っておくと便利です。 そのため swf フォーマットではこれらを指定する必要があるのです。\nswfshape->setleftfill() は、輪郭の左側の塗りつぶしを 設定します - これは、もし図形を反時計回りに描いているのなら、その内側を 表します。塗りつぶしオブジェクトは、上で説明した addFill 関数のひとつから 返される SWFFill オブジェクトです。\n図形を morph の中にいれている場合、これは反転しているように見えます。 もしブラウザがクラッシュしたら、反対側の塗りつぶしを試してみてください。\nswfshape->setleftfill($s->addfill($r, $g, $b [, $a])); の短縮表記です。
SWFShape\nvoid setLine ( SWFShape $shape )\nvoid setLine ( int $width , int $red , int $green , int $blue [, int $a ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->setline() は、図形の線種を設定します。 width は線の幅です。width が 0 の場合は線種は削除されます (そして、他のすべての引数が無視されます)。 width > 0 の場合、線の色が red 、green 、blue で設定されます。最後のパラメータ a は オプションです。\n使用したい線種は、使用する前にすべて定義しておく必要があります (例を参照ください)。
SWFShape\nvoid setRightFill ( SWFGradient $fill )\nvoid setRightFill ( int $red , int $green , int $blue [, int $a ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfshape->setrightfill($s->addfill($r, $g, $b [, $a])); の短縮表記です。
SWFSound\nSWFSound __construct ( string $filename [, int $flags = 0 ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSoundInstance\nvoid loopCount ( int $point )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSoundInstance\nvoid loopInPoint ( int $point )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSoundInstance\nvoid loopOutPoint ( int $point )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSoundInstance\nvoid noMultiple ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSprite\nvoid add ( object $object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfsprite->add() は、swfshape()・ swfbutton()・swftext()・ swfaction() あるいは swfsprite() オブジェクトを追加します。\n表示可能な型 (swfshape()、 swfbutton()、swftext()、 swfaction() あるいは swfsprite()) の場合、この関数は表示リスト内でのオブジェクトのハンドルを返します。
SWFSprite\nSWFSprite __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFSprite オブジェクトを作成します。
SWFSprite\nvoid labelFrame ( string $label )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSprite\nvoid nextFrame ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfsprite->setframes() は、動画の次のフレームに移動します。
SWFSprite\nvoid remove ( object $object )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfsprite->remove() は、スプライトから swfshape()・ swfbutton()・swftext()・ swfaction() あるいは swfsprite() オブジェクトを削除します。
SWFSprite\nvoid setFrames ( int $number )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswfsprite->setframes() は、 動画の総フレーム数を numberofframes に設定します。
SWFSprite\nSWFSoundInstance startSound ( SWFSound $sount )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFSprite\nvoid stopSound ( SWFSound $sount )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nvoid addString ( string $string )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftext->addstring() は、文字列 string を現在のペン (カーソル) の位置に描画します。 ペンの位置は、テキストのベースラインとなります。 つまり、ベースラインより上のあるテキストは -y 方向に配置されます。
SWFText\nvoid addUTF8String ( string $text )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nvoid __construct ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n新しい SWFText オブジェクトを作成します。
SWFText\nfloat getAscent ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nfloat getDescent ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nfloat getLeading ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nfloat getUTF8Width ( string $string )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFText\nfloat getWidth ( string $string )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nテキストオブジェクトの 現在のフォント・大きさ・間隔における文字列 string の幅を計算して返します。
SWFText\nvoid moveTo ( float $x , float $y )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftext->moveto() は、ペン (あるいはカーソルと いったほうがわかりやすいでしょうか) を、テキストオブジェクトの座標空間で (x ,y ) に移動します。 しかし、両方ともゼロだった場合はどこにも移動しません。 うっとうしいので修正してほしいものです。
SWFText\nvoid setColor ( int $red , int $green , int $blue [, int $a = 255 ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n現在のテキスト色を変更します。
SWFText\nvoid setFont ( SWFFont $font )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftext->setfont() は、現在のフォントを font に設定します。
SWFText\nvoid setHeight ( float $height )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftext->setheight() は、現在のフォントの高さを height に設定します。デフォルトは 240 です。
SWFText\nvoid setSpacing ( float $spacing )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftext->setspacing() は、現在のフォントの間隔を spacing に設定します。デフォルトは 1.0 です。 0 にすると、すべての文字が同じ場所に書かれます。これは実際のところ 正常に動作していません。なぜなら文字の間隔が膨らんでしまい、文字の 間に同じだけの間隔をあけることができないからです。 もうちょっとうまい説明があるとは思うのですが。 あるいは単にこれを固定の間隔にしてしまいます。 これは、ただ文字の advance がどのように働くのかを知るためだけの ものでした……。
SWFTextField\nvoid addChars ( string $chars )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFTextField\nvoid addString ( string $string )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setname() は、文字列 string をテキストフィールドに結合します。
SWFTextField\nvoid align ( int $alignement )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->align() は、テキストフィールドの 配置を alignement に設定します。 alignement で使用可能な値は SWFTEXTFIELD_ALIGN_LEFT、 SWFTEXTFIELD_ALIGN_RIGHT、SWFTEXTFIELD_ALIGN_CENTER および SWFTEXTFIELD_ALIGN_JUSTIFY です。
SWFTextField\nSWFTextField __construct ([ int $flags ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield() は、新しいテキストフィールドオブジェクトを 作成します。テキストフィールドは、swftext() オブジェクトに 比べてあまり自由度がありません - 回転もできないし、縦横比を変更する拡大縮小も できません。また傾けることもできません。しかし、テキストフィールドは フォームのエントリとして使用することが可能で、ブラウザで定義されているフォントを 使用することが可能です。\nオプションのフラグでテキストフィールドの振る舞いを定義します。 以下の値が設定可能です。    SWFTEXTFIELD_DRAWBOX はテキストフィールドの輪郭線を描きます。     SWFTEXTFIELD_HASLENGTH     SWFTEXTFIELD_HTML は HTML タグを使用したテキストのマークアップを行います。     SWFTEXTFIELD_MULTILINE は複数行を許可します。     SWFTEXTFIELD_NOEDIT はユーザによるテキストの編集を禁止します。     SWFTEXTFIELD_NOSELECT はフィールドを選択できなくします。     SWFTEXTFIELD_PASSWORD は入力内容をぼかします。     SWFTEXTFIELD_WORDWRAP は長いテキストを折り返します。\n複数のフラグを、論理 OR で組み合わせることが 可能です。例えば以下のようになります。\n<?php$t&nbsp;=&nbsp;newSWFTextField(SWFTEXTFIELD_PASSWORD&nbsp;|&nbsp;SWFTEXTFIELD_NOEDIT);&nbsp;?>\nこれは、編集できないパスワードフィールドという、 まったく使えないものを作成します。\nSWFTextField は以下のメソッドを保持します。swftextfield->setfont()、 swftextfield->setbounds()、swftextfield->align()、 swftextfield->setheight()、swftextfield->setleftmargin()、 swftextfield->setrightmargin()、swftextfield->setmargins()、 swftextfield->setindentation()、swftextfield->setlinespacing()、 swftextfield->setcolor()、swftextfield->setname() および swftextfield->addstring()。
SWFTextField\nvoid setBounds ( float $width , float $height )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setbounds() は、テキストフィールドの 幅を width に、そして高さを height に設定します。これを設定しない場合、Ming は何とか適当な大きさを 判定しようとします。
SWFTextField\nvoid setColor ( int $red , int $green , int $blue [, int $a = 255 ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setcolor() は、テキストフィールドの 色を設定します。デフォルトは、透明でない黒です。色は、RGB で表されます。
SWFTextField\nvoid setFont ( SWFFont $font )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setfont() は、 テキストフィールドのフォントを [ブラウザ定義の?] font に設定します。
SWFTextField\nvoid setHeight ( float $height )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setheight() は、 このテキストフィールドのフォントの高さを height に設定します。デフォルトは 240 です。
SWFTextField\nvoid setIndentation ( float $width )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setindentation() は、テキストフィールドの最初の行の字下げを width に設定します。
SWFTextField\nvoid setLeftMargin ( float $width )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setleftmargin() は、テキストフィールドの左マージンの幅を width に設定します。デフォルトは 0 です。
SWFTextField\nvoid setLineSpacing ( float $height )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setlinespacing() は、テキストフィールドの行間の高さを height に設定します。デフォルトは 40 です。
SWFTextField\nvoid setMargins ( float $left , float $right )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setmargins() は、両方のマージンを一度に指定します。せっかちな人向けです。
SWFTextField\nvoid setName ( string $name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setname() は、このテキストフィールドの変数名を name に設定します。 フォームの送信やアクションスクリプトで使用します。
SWFTextField\nvoid setPadding ( float $padding )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFTextField\nvoid setRightMargin ( float $width )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nswftextfield->setrightmargin() は、テキストフィールドの右マージンの幅を width に設定します。デフォルトは 0 です。
SWFVideoStream\nSWFVideoStream __construct ([ string $file ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
SWFVideoStream\nint getNumFrames ( void )\nこの関数は、SWFVideoStream のビデオフレーム数を返します。
SWFVideoStream\nvoid setDimension ( int $x , int $y )\nストリーム再生するビデオの幅と高さを設定します。
void Swish::__construct ( string $index_names )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array Swish->getMetaList ( string $index_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array Swish->getPropertyList ( string $index_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
object Swish->prepare ([ string $query ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n準備した検索オブジェクトを返します。 後でこれを使用して何度でもクエリを実行することができます。
object Swish->query ( string $query )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nデフォルトのパラメータで検索を行うためのお手軽なメソッドです。
array SwishResult->getMetaList ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array SwishResult->stem ( string $word )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nインデックス化の際に使用したファジーモードにもとづいて、 単語の語幹を取得します。各結果オブジェクトはインデックスにリンクされるので、 結果はこのインデックスに基づくものとなります。
array SwishResults->getParsedWords ( string $index_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array SwishResults->getRemovedStopwords ( string $index_name )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
object SwishResults->nextResult ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
int SwishResults->seekResult ( int $position )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
object SwishSearch->execute ([ string $query ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n検索オブジェクトに設定したパラメータにもとづいて、 インデックスファイルを検索します。
void SwishSearch->resetLimit ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nSwishSearch->setLimit で設定した検索の制限をリセットします。
void SwishSearch->setLimit ( string $property , string $low , string $high )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
void SwishSearch->setPhraseDelimiter ( string $delimiter )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
void SwishSearch->setSort ( string $sort )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
void SwishSearch->setStructure ( int $structure )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
int sybase_affected_rows ([ resource $link_identifier ] )\nsybase_affected_rows() は、指定したリンク ID が 指すサーバにおいて直近の INSERT、UPDATE、DELETE クエリで変更された レコードの数を返します。\nこのコマンドは、SELECT 文には使用できません。レコードを変更する 文のみに使用できます。SELECT から返された行の数を得たい場合は sybase_num_rows() を使用してください。
bool sybase_close ([ resource $link_identifier ] )\nsybase_close()は、指定されたリンク link_identifier が指す Sybase データベースへのリンクを閉じます。\n持続的でないリンクは、スクリプトの実行終了時に自動的に閉じられるため、 この関数は、通常の場合コールする必要がないことに注意してください。\nsybase_close() は、 sybase_pconnect() により生成された 持続的なリンクは閉じません。
resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = false ]]]]]] )\nsybase_connect() は、Sybase サーバへの接続を確立します。\n同じ引数で sybase_connect() を 2 度コールした場合、 新たなリンクは確立されず、代わりに既にオープンされたリンクのリンク ID が返されます。\nsybase_close() をコールすることにより明示的に閉じた場合を除き、 サーバへのリンクはスクリプトの実行終了時に閉じられます。
bool sybase_data_seek ( resource $result_identifier , int $row_number )\nsybase_data_seek()は、指定された結果 ID が指す Sybase 結果の内部行ポインタを指定した行番号に移動します。 sybase_fetch_row() を次にコールした場合、 その行が返されます。
void sybase_deadlock_retry_count ( int $retry_count )\nsybase_deadlock_retry_count() を使用して、デッドロックの 際の再試行回数を定義することが可能です。デフォルトでは、デッドロックが 発生した際は Sybase によってプロセスが停止されたり実行中のスクリプトが 停止したり（例えば set_time_limit()）、あるいは クエリが成功するまでずっと再試行を繰り返します。
array sybase_fetch_array ( resource $result )\nsybase_fetch_array() は sybase_fetch_row() の拡張版です。データを結果配列の 数値インデックスに保存するのに加えて、フィールド名をキーとした 連想インデックスにもデータを保存します。\nsybase_fetch_array() を使用した場合でも、 かなりの機能が付加されるにもかかわらず、 sybase_fetch_row() を使用した場合に比べて著しく 遅くなるということはないということを重要なこととして記しておきます。
array sybase_fetch_assoc ( resource $result )\nsybase_fetch_assoc() は sybase_fetch_row() で数値インデックスのかわりに カラム名を使用するバージョンです。複数のテーブルから同じ名前の カラムが取得された場合、それらの名前は name, name1, name2, ..., nameN のような形式で返されます。\nsybase_fetch_assoc() を使用した場合でも、 かなりの機能が付加されるにもかかわらず、 sybase_fetch_row() を使用した場合に比べて著しく 遅くなるということはないということを重要なこととして記しておきます。
object sybase_fetch_field ( resource $result [, int $field_offset = -1 ] )\nsybase_fetch_field() は、あるクエリーの結果において、 フィールドに関する情報を得るために使用します。
object sybase_fetch_object ( resource $result [, mixed $object ] )\nsybase_fetch_object() は sybase_fetch_array() に似ていますが、 違いが一つあります。それは、配列の代わりにオブジェクトを返すことです。\n速度面では、この関数は sybase_fetch_array() と同等であり、 sybase_fetch_row() とほとんど同じです （違いはわずかです）。
array sybase_fetch_row ( resource $result )\nsybase_fetch_row() は、指定された結果 ID が指す結果から 1 行分のデータを取り込みます。\n連続的に sybase_fetch_rows() をコールした場合、 結果セットにおける次の行が返されます。 また、もう行がない場合は FALSE が返されます。
bool sybase_field_seek ( resource $result , int $field_offset )\n指定したフィールドオフセットに移動します。次にフィールドオフセットを指定しないで sybase_fetch_field() をコールした場合、 このフィールドが返されます。
bool sybase_free_result ( resource $result )\nsybase_free_result() は、スクリプト実行時に大量の メモリを使用することが懸念される場合にのみコールする必要があります。 すべての結果メモリは、スクリプト終了時に自動的に開放されます。 結果 ID を引数として sybase_freeresult() を コールすることが可能で、関連する結果メモリは開放されます。
string sybase_get_last_message ( void )\nsybase_get_last_message() はサーバからの直近のメッセージを返します。
void sybase_min_client_severity ( int $severity )\nsybase_min_client_severity() はクライアントの severity レベルの最小値を設定します。
void sybase_min_error_severity ( int $severity )\nsybase_min_error_severity() はエラー severity レベルの最小値を設定します。
void sybase_min_message_severity ( int $severity )\nsybase_min_message_severity() はメッセージの severity レベルの最小値を設定します。
void sybase_min_server_severity ( int $severity )\nsybase_min_server_severity() はサーバの severity レベルの最小値を設定します。
int sybase_num_fields ( resource $result )\nsybase_num_fields() は、 結果セットにおけるフィールド数を返します。
int sybase_num_rows ( resource $result )\nsybase_num_rows() は、結果セットの行数を返します。
resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )\nsybase_pconnect() は、2 つの違いを除いて sybase_connect() と全く同様に動作します。\nまず、接続時にこの関数は最初同じホスト、ユーザ名、パスワードで オープンされた（持続的）リンクを見つけようとします。 見つかった場合、新しい接続をオープンする代わりにこれに関する ID が返されます。\n第二に、SQL サーバーへの接続はスクリプト実行終了時にクローズされません。 代わりに、このリンクは将来的に使用するためにオープンされたままに なります（sybase_close() は、 sybase_pconnect() により確立されたリンクを 閉じません）。\nこのため、この型のリンクは&#039;持続的&#039;と呼ばれます。
mixed sybase_query ( string $query [, resource $link_identifier ] )\nsybase_query()は、指定されたリンク ID が指すサーバ上で現在アクティブなデータベースにクエリを送信します。
string sybase_result ( resource $result , int $row , mixed $field )\n指定された Sybase 結果セットにおいて、指定した行および オフセットにおけるセルの内容を返します。\n大きな結果セットを処理する際には、(以下に示す) 行全体を取り込む関数の一つを使用することを考慮すべきです。 これらの関数は、一回の関数コールで複数のセルの内容を返すので、 sybase_result()よりも著しく高速です。 また、field 引数において数値オフセットで指定するほうが、 フィールド名やテーブル名.フィールド名で指定するよりも 著しく高速であるということにも注意してください。\n推奨される高性能な代替案は次のようなものです。 sybase_fetch_row()、 sybase_fetch_array() および sybase_fetch_object()。
bool sybase_select_db ( string $database_name [, resource $link_identifier ] )\nsybase_select_db() は、指定されたリンク ID が指す データベースをサーバ上の現在アクティブなデータベースに設定します。\nその後の sybase_query() のコールは、 このアクティブなデータベースにおいて行われます。
bool sybase_set_message_handler ( callback $handler [, resource $connection ] )\nsybase_set_message_handler() は、 サーバからのメッセージを処理するユーザ関数を設定します。グローバル関数の名前、 あるいはオブジェクトへの参照とメソッド名を保持する配列を指定します。
resource sybase_unbuffered_query ( string $query , resource $link_identifier [, bool $store_result ] )\nsybase_unbuffered_query() は、指定したリンク ID に 関連付けられたサーバ上の現在アクティブなデータベースにクエリを送信します。 リンク ID が指定されていない場合は、直近にオープンされたリンクが 指定されたものと仮定します。リンクがオープンされていない場合は、 sybase_connect() がコールされた場合と同様の手順で リンクのオープンを試み、それを使用します。\nsybase_query() とは異なり、 sybase_unbuffered_query() は結果セットの最初の 行のみを読み込みます。それ以降の行は、必要に応じて sybase_fetch_array() またはそれに類する関数で 読み込みます。sybase_data_seek() は指定した 行を読み込みます。この挙動により、大きな結果セットを扱う際に よりよいパフォーマンスを確保できます。\nsybase_num_rows() が正確な行数を返すのは、結果セット 全体が読み込まれた場合のみです。Sybase は行数を知ることができず、 クライアントの実装によって行数を計算しています。
bool symlink ( string $target , string $link )\nsymlink()は、指定されたリンク名 link で既存のファイル target へのシンボリックリンクを作成します。
string sys_get_temp_dir ( void )\nPHP が一時ファイルを保存するデフォルトのディレクトリのパスを返します。
array sys_getloadavg ( void )\n過去 1、5、15 分間のシステムの平均負荷 (システムの実行キューの中のプロセス数) を表す三つの値を返します。
bool syslog ( int $priority , string $message )\nsyslog() はシステムログが出力するログメッセージを生成します。\nユーザ定義のログハンドラの設定に関する情報については、Unix マニュアルの syslog.conf (5) を参照ください。 syslog の facility と option に関するより詳細な情報は、 Unix マシンの syslog (3) にあります。
string system ( string $command [, int &$return_var ] )\nsystem() は、指定した command を実行し、結果を出力する C 言語の system 関数に似ています。\nPHP をサーバモジュールとして実行している場合、 system() のコールにより、各行を出力した後、 Web サーバの出力バッファが自動的にクリアされます。\nコマンドを実行し、何の加工もせずに全てのデータをコマンドから直接 返す必要がある場合、passthru() 関数を使用してください。
float tan ( float $arg )\ntan() は、arg のタンジェントを 返します。arg はラジアンです。
float tanh ( float $arg )\narg のハイパボリックタンジェントを返します。 これは sinh(arg)/cosh(arg) で定義されます。
bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns = false ]] )\nこの関数は /etc/hosts.allow および /etc/hosts.deny の内容をもとに、あるクライアントが daemon サービスへのアクセスを許可されているか 否かを調べます。
string tempnam ( string $dir , string $prefix )\n一意なテンポラリファイル名を、パーミッションを 0600 に設定し、 指定したディレクトリに作成します。 指定したディレクトリが存在しない場合、tempnam() はシステムのテンポラリディレクトリにあるファイル名を生成し、 その名前を返します。
string textdomain ( string $text_domain )\nこの関数は、gettext() がコールされた際に検索を 行うドメインを設定します。このドメインは、通常はアプリケーション名から 付けられます。
int tidy_access_count ( tidy $object )\ntidy_access_count() は、 指定したドキュメントについて発生した Tidy アクセシビリティ警告の数を返します。
int tidy_config_count ( tidy $object )\n指定した Tidy オブジェクト object の設定時に発生した Tidy エラーの数を返します。
手続き型\nbool tidy_diagnose ( tidy $object )\nオブジェクト指向型\nbool tidy::diagnose ( void )\n与えられた Tidy オブジェクト object に対して診断テストを実行し、 エラーバッファにドキュメントについての情報を追加します。
int tidy_error_count ( tidy $object )\n指定したドキュメントについて発生した Tidy エラーの数を返します。
手続き型:\nstring tidy_get_error_buffer ( tidy $object )\nオブジェクト指向型 (プロパティ):\ntidy\nstring $errorBuffer;\n指定したドキュメントのパースで発生した警告とエラーを返します。
string tidy_get_output ( tidy $object )\n修正された HTML を文字列で返します。
void tidy_load_config ( string $filename , string $encoding )\n指定したエンコーディング encoding で Tidy 設定ファイルをロードします。
bool tidy_reset_config ( void )\nこの関数は、Tidy の設定をデフォルト値に戻します。
bool tidy_save_config ( string $filename )\n現在の設定を指定したファイルに保存します。 デフォルトではない値だけが書き込まれます。
bool tidy_set_encoding ( string $encoding )\n入力／出力ドキュメントのエンコーディングを設定します。
bool tidy_setopt ( string $option , mixed $value )\ntidy_setopt() は、 指定したオプション option の値を 新しい値 value に更新します。
int tidy_warning_count ( tidy $object )\n指定したドキュメントについて発生した Tidy 警告の数を返します。
mixed time_nanosleep ( int $seconds , int $nanoseconds )\n指定した seconds および nanoseconds の時間だけプログラムの実行を遅延させます。
bool time_sleep_until ( float $timestamp )\n指定した timestamp までスクリプトの実行を遅延させます。
int time ( void )\n現在時刻を Unix エポック (1970 年 1 月 1 日 00:00:00 GMT) からの通算秒として返します。
この関数は次の関数のエイリアスです。 DateTimeZone::listAbbreviations
この関数は次の関数のエイリアスです。 DateTimeZone::listIdentifiers
この関数は次の関数のエイリアスです。 DateTimeZone::getLocation
string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )
この関数は次の関数のエイリアスです。 DateTimeZone::getName
この関数は次の関数のエイリアスです。 DateTimeZone::getOffset
DateTimeZone timezone_open ( string $timezone )\nDateTimeZone DateTimeZone::__construct ( string $timezone )
この関数は次の関数のエイリアスです。 DateTimeZone::getTransitions
string timezone_version_get ( void )\ntimezonedb の現在のバージョンを返します。
resource tmpfile ( void )\n書き込み可のモード (w+) でユニークな名前を有するテンポラリファイルを作成し、 ファイルハンドルを返します。\nファイルが (fclose() を用いて) クローズされた時、 またはスクリプトが終了された際に自動的にファイルが削除されます。\n詳細については、関数 tmpfile(3) のシステムドキュメント、およびヘッダファイル stdio.h を参照ください。
array token_get_all ( string $source )\ntoken_get_all() は指定した文字列 source をパースし、Zend engine の 字句解析スキャナにより PHP 言語のトークンに分割します。\nパーサトークンの一覧を得るには、パーサトークンの一覧 を参照するか、 あるいは token_name() でトークン値を文字列表現に 変換します。
string token_name ( int $token )\ntoken_name()は、PHP token 値のシンボル名を返します。
bool touch ( string $filename [, int $time = time() [, int $atime ]] )\nfilename で指定されたファイルの最終更新日を、 time で指定された値に セットしようと試みます。 パラメータの数にかかわらず、アクセス時刻は 常に変更されることに注意しましょう。\nファイルが存在しない場合、ファイルが生成されます。
bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )\nユーザエラーを発生するために使用され、 組み込みのエラーハンドラまたは新しいエラーハンドラ (set_error_handler()) として設定済みのユーザ定義関数と組み合わせて使用されます。\nこの関数は、実行時の例外に特定の応答を生成する必要がある場合に便利です。
string trim ( string $str [, string $charlist ] )\nこの関数は str の最初および最後から空白文字を取り除き、 取り除かれた文字列を返します。2番目のパラメータを指定しない場合、 trim()は以下の文字を削除します。    &quot; &quot; (ASCII 32 (0x20)), 通常の空白。     &quot;\\t&quot; (ASCII 9 (0x09)), タブ。     &quot;\\n&quot; (ASCII 10 (0x0A)), リターン。     &quot;\\r&quot; (ASCII 13 (0x0D)), 改行。     &quot;\\0&quot; (ASCII 0 (0x00)), NULバイト     &quot;\\x0B&quot; (ASCII 11 (0x0B)), 垂直タブ
bool uasort ( array &$array , callback $cmp_function )\nこの関数は、配列インデックスが関連する配列要素との関係を保持するような配列をソートします。\n主に実際の配列の順序に意味がある連想配列をソートするためにこの関数は使用されます。
string ucfirst ( string $str )\nstr の最初の文字がアルファベットであれば、 それを大文字にします。\n「アルファベット」かどうかというのは現在のロケールにより決定されます。 たとえば、デフォルトの &quot;C&quot; ロケールでは、a ウムラウト (a) は変換されません。
string ucwords ( string $str )\n文字がアルファベットの場合、str の各単語の最初の文字を大文字にしたものを返します。\n単語の定義は、空白文字 (スペース、フォームフィード、改行、キャリッジリターン、 水平タブ、垂直タブ) の直後にあるあらゆる文字からなる文字列です。
bool udm_add_search_limit ( resource $agent , int $var , string $val )\nudm_add_search_limit() は、検索の制約を追加します。
resource udm_alloc_agent_array ( array $databases )\nudm_alloc_agent_array() は、 複数データベース接続にエージェントを作成します。
resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )\nmnoGoSearch セッションを割り当てます。
int udm_api_version ( void )\nmnoGoSearch API バージョン番号を取得します。\nこの関数により、利用可能なAPI関数をユーザが調べることが可能となります。 例えば、udm_get_doc_count() 関数は mnoGoSearch 3.1.11 以降でのみ利用可能です。
array udm_cat_list ( resource $agent , string $category )\n現在のカテゴリと同じレベルの全てのカテゴリの一覧を配列として返します。\nこの関数は、カテゴリツリーのブラウザを開発する際に有用です。
array udm_cat_path ( resource $agent , string $category )\nツリーのルートから category が指す現在のカテゴリまでのパスを記述した配列を返します。
bool udm_check_charset ( resource $agent , string $charset )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int udm_check_stored ( resource $agent , int $link , string $doc_id )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool udm_clear_search_limits ( resource $agent )\nudm_clear_search_limits() は、 検索に関する制約をリセットします。
int udm_close_stored ( resource $agent , int $link )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int udm_crc32 ( resource $agent , string $str )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int udm_errno ( resource $agent )\n数字のエージェントエラーコードを受信します。
string udm_error ( resource $agent )\nエージェントエラーメッセージを取得します。
resource udm_find ( resource $agent , string $query )\n検索を行います。\n検索を行います。最初の引数はセッション、次の引数はクエリ本体です。 検索の実行は、探す単語を入力し、投稿ボタンを押すだけで可能です。 例えば、&quot;mysql odbc&quot;。この例で引用符は他のテキストから区別するために 使用されており、クエリに引用符 &quot; を使用する必要はありません。 mnoGoSearch は、単語 &quot;mysql&quot; および/または単語 &quot;odbc&quot; を含む全ての 文書を見付けます。最も大きな重みを有する文書が最初に表示されます。 検索モードに ALL を使用している場合、検索は入力した単語(とその他の 単語)を共に含む文書を返します。モードANYを使用している場合、検索は、 入力した単語のどれかを含む文書のリストを返します。より高度な結果を 得たい場合には、クエリ言語を使用することも可能です。この場合は、 検索フォームで検索モード &quot;bool&quot; を選択する必要があります。
int udm_free_agent ( resource $agent )\nエージェントセッション用に確保されたメモリを開放します。
bool udm_free_ispell_data ( int $agent )\nispell データ用に確保されたメモリを解放します。
bool udm_free_res ( resource $res )\n結果用に確保されたメモリを開放します。
int udm_get_doc_count ( resource $agent )\nudm_get_doc_count() は、データベース内の ドキュメントの数を返します。
string udm_get_res_field ( resource $res , int $row , int $field )\nFetch a mnoGoSearch result field.
string udm_get_res_param ( resource $res , int $param )\nmnoGoSearch 結果パラメータを取得します。
int udm_hash32 ( resource $agent , string $str )\nudm_hash32() は、文字列 str を受け取り、その 32 ビットハッシュ値を返します。
bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )\nudm_load_ispell_data() は、 ispell データを読み込みます。\nこの関数を使用した後に ispell データに割り当てられていたメモリを 開放するには、udm_free_ispell_data() を使用します。 たとえ UDM_ISPELL_TYPE_SERVER モードを使用していたとしても同様です。
int udm_open_stored ( resource $agent , string $storedaddr )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool udm_set_agent_param ( resource $agent , int $var , string $val )\nmnoGoSearch セッションパラメータを定義します。
bool uksort ( array &$array , callback $cmp_function )\nuksort() は、 ユーザ定義の比較関数を用いて配列のキーをソートします。 ソートしたい配列を複雑な基準でソートする必要がある場合には、 この関数を使う必要があります。
int umask ([ int $mask ] )\numask() は PHP の umask を mask & 0777 にセットし、 元の umask 値を返します。 PHP がサーバ・モジュールとして動作中の場合、 各リクエストが終了するたびに umask は元の値に戻されます。
unicode unicode_decode ( string $input , string $encoding [, int $errmode ] )\nencoding でエンコードされたバイナリ文字列を unicode 文字列に変換します。
string unicode_encode ( unicode $input , string $encoding [, int $errmode ] )\nunicode 文字列を受け取り、それを指定したエンコーディング encoding の文字列に変換します。
int unicode_get_error_mode ( int $direction )\ndirection で指定した方向の、 現在の文字列変換のエラーモードを返します。
unicode unicode_get_subst_char ( void )\nunicode_set_subst_char() で設定した、 文字列変換エラー時に使用する置換文字を返します。
bool unicode_set_error_mode ( int $direction , int $mode )\nこの関数は、異なるエンコーディング間での文字列変換の際のエラーモードを設定します。 文字列変換の際にエラーが発生する原因としては、 不正な文字があらわれた場合や 変換先のエンコードで表現できない文字があらわれた場合などがあります。 デフォルトでは、エラーが発生したらその場で変換を停止します。
bool unicode_set_subst_char ( unicode $character )\n文字列を unicode から変換したり unicode に変換したりする際には、 変換できない文字があらわれることがあります。変換エラーモードを U_CONV_ERROR_SUBST に設定している場合、 このような文字はこの関数で設定した文字で置き換えられます。 デフォルトの置換文字は ? です。
string uniqid ([ string $prefix = &quot;&quot; [, bool $more_entropy = false ]] )\nマイクロ秒単位の現在時刻にもとづいた、接頭辞つきの一意な ID を取得します。
int unixtojd ([ int $timestamp = time() ] )\nUnix タイムスタンプ(1970/1/1 からの秒数)timestamp をユリウス歴に変換して返します。timestamp が 指定されない場合は現在の日付が使用されます。
bool unlink ( string $filename [, resource $context ] )\nfilename を削除します。 Unix C 言語の関数 unlink() と動作は同じです。
array unpack ( string $format , string $data )\nformat に基づき、バイナリ文字列から配列に分解します。\nunpack() の動作は Perl とは微妙に異なります。 Perl のように結果が連想配列に保存されることはありません。 このようにするには、別のフォーマットコードを使用してそれらを スラッシュ / で区切る必要があります。
void unregister_tick_function ( string $function_name )\nfunction_name という名前の関数の登録を解除します。 これにより、tick がコールされた 場合でもこの関数は実行されなくなります。
mixed unserialize ( string $str )\nunserialize() は、シリアル化された変数を PHP 変数値に戻す変換を行います。
void unset ( mixed $var [, mixed $var [, mixed $... ]] )\nunset() は指定した変数を破棄します。\n関数 unset() の内部動作は、 破棄しようとする変数の型に依存します。\nあるグローバル変数が関数の中で unset() された場合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、 unset() がコールされる前と同じ値を保持します。\n<?phpfunction&nbsp;destroy_foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$foo;&nbsp;&nbsp;&nbsp;&nbsp;unset($foo);}$foo&nbsp;=&nbsp;'bar';destroy_foo();echo&nbsp;$foo;?>\n上の例の出力は以下となります。\nbar\nグローバル変数を関数の内部で unset() したい場合は、 $GLOBALS 配列を使用することが可能です。\n<?phpfunction&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;unset($GLOBALS['bar']);}$bar&nbsp;=&nbsp;"something";foo();?>\n参照渡しされた変数が関数内で unset() された場合に、 ローカル変数のみが破棄されます。呼出側の環境でその変数は、 unset() がコールされる前と同じ値を保持します。\n<?phpfunction&nbsp;foo(&$bar)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;unset($bar);&nbsp;&nbsp;&nbsp;&nbsp;$bar&nbsp;=&nbsp;"blah";}$bar&nbsp;=&nbsp;'something';echo&nbsp;"$bar\\n";foo($bar);echo&nbsp;"$bar\\n";?>\n上の例の出力は以下となります。\nsomething something\n静的変数が関数の内部で unset() された場合、 unset() は、その関数の残りのコンテキスト内においてのみ 変数を破棄します。関数を再度コールすると、破棄する前の値が復元されます。\n<?phpfunction&nbsp;foo(){&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;$bar;&nbsp;&nbsp;&nbsp;&nbsp;$bar++;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Before&nbsp;unset:&nbsp;$bar,&nbsp;";&nbsp;&nbsp;&nbsp;&nbsp;unset($bar);&nbsp;&nbsp;&nbsp;&nbsp;$bar&nbsp;=&nbsp;23;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"after&nbsp;unset:&nbsp;$bar\\n";}foo();foo();foo();?>\n上の例の出力は以下となります。\nBefore unset: 1, after unset: 23 Before unset: 2, after unset: 23 Before unset: 3, after unset: 23
string urldecode ( string $str )\n与えられた文字列中のあらゆるエンコード文字 %## をデコードします。
string urlencode ( string $str )\nこの関数は、URL の問い合わせ部分に使用する文字列のエンコードや 次のページへ変数を渡す際に便利です。
bool use_soap_error_handler ([ bool $handler ] )\nこの関数は、SOAP サーバで SOAP エラーハンドラを使用するかどうかを設定します。 それまでに設定されていた値を返します。 TRUE に設定すると、 SoapServer アプリケーションでのエラーの詳細がクライアントに送信されます。 FALSE の場合は、情報は何も送信されません。 no information will be sent.
bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )\nユーザエラーを発生するために使用され、 組み込みのエラーハンドラまたは新しいエラーハンドラ (set_error_handler()) として設定済みのユーザ定義関数と組み合わせて使用されます。\nこの関数は、実行時の例外に特定の応答を生成する必要がある場合に便利です。
void usleep ( int $micro_seconds )\n指定したマイクロ秒数だけプログラムの実行を遅延させます。
bool usort ( array &$array , callback $cmp_function )\nこの関数は、ユーザー定義の比較関数により配列をその値でソートします。 ソートしたい配列を複雑な基準でソートする必要がある場合、 この関数を使用するべきです。
string utf8_decode ( string $data )\nこの関数は、data が UTF-8 エンコードされているものとみなして ISO-8859-1 に変換します。
string utf8_encode ( string $data )\nこの関数は、文字列 data を UTF-8 にエンコードし、エンコードされた文字列を 返します。UTF-8 は、 wide character の値をバイトストリームに エンコードするために Unicode で使用される 標準的な仕組みです。UTF-8 は、プレーンな ASCII文字を通し、自己同期(これは、バイトストリームの 開始地点をプログラムが見積もることが可能であることを意味します) します。また、ソートのような標準的な文字列比較関数を使用可能です。 PHP は、UTF-8 文字を次のように最大 4 バイトで エンコードします。  UTF-8 エンコーディング   バイト ビット 表現形式     1 7 0bbbbbbb   2 11 110bbbbb 10bbbbbb   3 16 1110bbbb 10bbbbbb 10bbbbbb   4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb\n各 b は、文字列データを保存可能なビットを示します。
void var_dump ( mixed $expression [, mixed $expression [,  $... ]] )\nこの関数は、指定した式に関してその型や値を含む構造化された情報を 返します。配列の場合、その構造を表示するために各値について再帰的に 探索されます。\nPHP 5 では、オブジェクトのすべての public、private および protected なプロパティが出力されます。\nヒント\nブラウザに直接結果を出力する すべてのものと同様に、出力制御関数 を使用してこの関数の出力をキャプチャーし、(例えば)文字列 (string)に保存することが可能です。
mixed var_export ( mixed $expression [, bool $return = false ] )\nvar_export() は、 渡された変数に関する構造化された情報を返します。この関数は var_dump() に似ていますが、 返される表現が有効な PHP コードであるところが異なります。
mixed variant_abs ( mixed $val )\nvariant の絶対値を返します。
mixed variant_add ( mixed $left , mixed $right )\n(MSDN ライブラリによる) 以下の規則に従い、 left を right に加算します。この規則は Visual Basic の規則と一致します。  Variant の加算規則   もし〜なら このようにします     両者ともに文字列型 連結   一方が文字列型で、もう一方が文字 追加   一方が数値で、もう一方が文字列 追加   両者ともに数値 加算   どちらか一方が NULL NULL が返される   両者ともに空の値 Integer 型が返される
mixed variant_and ( mixed $left , mixed $right )\n以下の表に基づいた論理 AND 処理を行います。通常の AND 操作とは 少し違いがあることに注意しましょう。
variant variant_cast ( variant $variant , int $type )\nこの関数は、variant のコピーを作成して、 それを指定した type に強制的に変換します。\nこの関数は、COM ライブラリの VariantChangeType() をラップしたものです。 詳細な情報は MSDN ライブラリを参照ください。
mixed variant_cat ( mixed $left , mixed $right )\nleft と right を連結し、その結果を返します。\nこの関数は、理論上は $left . $right と等価です。
int variant_cmp ( mixed $left , mixed $right [, int $lcid [, int $flags ]] )\nleft と right を比較します。\nこの関数はスカラー値のみを比較します。配列や variant レコードは比較しません。
variant variant_date_from_timestamp ( int $timestamp )\nunix タイムスタンプ値 timestamp を VT_DATE 型の variant に変換します。 これにより、PHP の unix 的な部分と COM とのやりとりが容易になります。
int variant_date_to_timestamp ( variant $variant )\nvariant を、VT_DATE (あるいはそれに似た型) から Unix タイムスタンプに変換します。 これにより、PHP の Unix 的な部分と COM とのやりとりが容易になります。
mixed variant_div ( mixed $left , mixed $right )\nleft を right で割り、その結果を返します。
mixed variant_eqv ( mixed $left , mixed $right )\n2 つの variant のビット値が等しいかどうかを調べます。
mixed variant_fix ( mixed $variant )\nvariant の整数部を取得します。
int variant_get_type ( variant $variant )\nvariant オブジェクトの型を返します。
mixed variant_idiv ( mixed $left , mixed $right )\nleft および right を 整数値に変換し、整数の除算を行います。
mixed variant_imp ( mixed $left , mixed $right )\nビットの implication 操作を行います。
mixed variant_int ( mixed $variant )\nvariant の整数部を返します。
mixed variant_mod ( mixed $left , mixed $right )\nleft を right で除算し、剰余を返します。
mixed variant_mul ( mixed $left , mixed $right )\nleft と right の乗算を行います。
mixed variant_neg ( mixed $variant )\nvariant の論理否定演算を行います。
mixed variant_not ( mixed $variant )\nvariant のビット否定演算を行い、その結果を返します。
mixed variant_or ( mixed $left , mixed $right )\n論理 OR 処理を行います。通常の OR 操作とは少し違いがあることに注意しましょう。
mixed variant_pow ( mixed $left , mixed $right )\nleft の right 乗を返します。
mixed variant_round ( mixed $variant , int $decimals )\nvariant を、 decimals で指定した桁で丸めた結果を返します。
void variant_set_type ( variant $variant , int $type )\nこの関数は variant_cast() に似ていますが、 「その場で」変換されるという点が異なります。新しい variant は 作成されません。この関数に渡すパラメータの意味は variant_cast() の場合と同じです。
void variant_set ( variant $variant , mixed $value )\nvalue を variant に変換し、それを variant オブジェクトに代入します。 新しい variant オブジェクトは作成されず、 variant の元の値は開放されます。
mixed variant_sub ( mixed $left , mixed $right )\nright を left から引きます。
mixed variant_xor ( mixed $left , mixed $right )\n排他的論理和を計算します。
mixed version_compare ( string $version1 , string $version2 [, string $operator ] )\nversion_compare()は、ふたつの &quot;PHP 標準&quot; バージョン 番号文字列を比較します。この関数は、いくつかのバージョンの PHP でのみ 動作するプログラムを書きたい場合に有用です。\nこの関数はまず、バージョン文字列の _, -, + をドット . で置き換えます。 さらに、数値でない部分の前後にドット . を追加します。 例えば &#039;4.3.2RC1&#039; は &#039;4.3.2.RC.1&#039; となります。 次に、explode(&#039;.&#039;, $ver) とするのと同じように結果を分割し、左から右へ 各部分を比較していきます。特殊な文字列が含まれている場合は以下の順で 並べ替えます: ここにないすべての文字列 < dev < alpha = a < beta = b < RC = rc < # < pl = p この方法により、&#039;4.1&#039; と &#039;4.1.2&#039; のようなバージョンの違いだけではなく PHP 固有の開発ステータスの違いも判断することが可能となります。
int vfprintf ( resource $handle , string $format , array $args )\nformat によって作成された文字列を handle で指定したストリームに書き込みます。\nfprintf() と同様の動作をしますが、 可変引数ではなく引数の配列を受け取って処理します。
bool virtual ( string $filename )\nvirtual() は、mod_include の <!--#include virtual...--> と似ている Apache 用関数です。 この関数は、Apache サブリクエストを実行します。 CGI スクリプトまたは .shtml ファイル、Apache を通して解釈を行う 他のものがある場合にこの関数は有用です。 CGI スクリプトの場合、そのスクリプトは、有効な CGI ヘッダを生成する 必要があることに注意してください。 最低でも、Content-Type ヘッダを生成する必要があります。\nサブリクエストを実行するには、全てのバッファを終了、ブラウザへフラッシュし、 待機状態のヘッダも送信しておきます。\nこの関数は、 PHP が apache モジュールとしてインストールされた場合のみサポートされます。
bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_alias_add ( string $user , string $domain , string $alias )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_alias_del_domain ( string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_alias_del ( string $user , string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array vpopmail_alias_get_all ( string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array vpopmail_alias_get ( string $alias , string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_del_domain_ex ( string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_del_domain ( string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_del_user ( string $user , string $domain )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string vpopmail_error ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool vpopmail_set_user_quota ( string $user , string $domain , string $quota )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int vprintf ( string $format , array $args )\nformat に基づき文字列フォーマットされた文字列を出力します (フォーマットは sprintf() のドキュメントに既述されています)。\nprintf() と動作は同じですが、可変長の引数ではなく、 配列を引数として受け取ります。
string vsprintf ( string $format , array $args )\nsprintf()と動作は同じですが、 可変長の引数ではなく配列を引数とします。
bool w32api_deftype ( string $typename , string $member1_type , string $member1_name [, string $... [, string $... ]] )\nw32api のコールのために型を定義したい場合には、 この関数をコールする必要があります。
resource w32api_init_dtype ( string $typename , mixed $value [, mixed $... ] )\nこの関数は、typename という型のデータのインスタンスを作成し、値を代入します。
mixed w32api_invoke_function ( string $funcname , mixed $argument [, mixed $... ] )\nw32api_invoke_function() は、 funcname という名前の事前に登録された関数を探し、 指定したパラメータを渡します。
bool w32api_register_function ( string $library , string $function_name , string $return_type )\nこの関数は、ライブラリ libary から function_name という名前の関数を探し、PHP にインポートしようとします。
void w32api_set_call_method ( int $method )\nこの関数は、メソッドのコール方式を設定します。
bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )\n渡された変数をシリアライズし、 指定したパケットに結果を追加します。
mixed wddx_unserialize ( string $packet )\nシリアライズされた WDDX パケット packet を元に戻します。
string wddx_packet_end ( resource $packet_id )\n指定した WDDX パケットを終了し、 パケットを含む文字列を返します。
resource wddx_packet_start ([ string $comment ] )\n変数を順に追加していくための新しい WDDX パケットを開始します。 この関数は、パケットの内部に自動的に構造体の定義を作成し、 そこに変数を保持します。
string wddx_serialize_value ( mixed $var [, string $comment ] )\n指定した単一の値をもとにして WDDX パケットを作成します。
string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )\n指定された変数をシリアライズしたものを含む構造体を用いて WDDX パケットを作成します。
mixed wddx_unserialize ( string $packet )\nシリアライズされた WDDX パケット packet を元に戻します。
mixed win32_create_service ( array $details [, string $machine ] )
int win32_delete_service ( string $servicename [, string $machine ] )\nSCM データベースからサービスの削除を試みます。管理者権限が必要です。\nこの関数は、単にサービスに削除マークをつけるだけです。もし他のプロセス （サービスアプレットなど）が開かれた場合、削除処理はそのアプリケーションが 終了するまで延期されます。サービスに削除マークがつけられると、それ以降は 同じサービスに対する削除の試行は失敗します。また同名の新規サービスを作成 しようとする処理も失敗します。
int win32_get_last_control_message ( void )\nサービスプロセスに送信された、直近の制御コードを返します。 サービスの実行中は、サービスを停止させる必要がないかを調べるために 定期的にこれをチェックすべきです。
array win32_ps_list_procs ( void )\n稼動しているすべてのプロセスについての統計データを取得します。
array win32_ps_stat_mem ( void )\nグローバルメモリの使用状況についての統計情報を取得します。
array win32_ps_stat_proc ([ int $pid = 0 ] )\nプロセス ID pid のプロセスについての 統計情報を取得します。
mixed win32_query_service_status ( string $servicename [, string $machine ] )\nサービスの稼動状況を問い合わせ、情報を配列で返します。
bool win32_set_service_status ( int $status )\nSCM に、実行中のサービスの現在の状態を通知します。 この関数のコールは、現在実行中のサービスについてのみ有効です。
mixed win32_start_service_ctrl_dispatcher ( string $name )\nサービスコントロールマネージャ経由で起動させる際、サービスプロセスは 「チェックイン」を要求され、これによってサービスのモニタリングや 通信の機能を確立します。この関数は、サービスコントロールマネージャとの 低レベル通信を処理するスレッドを生成し、チェックインを実行します。\nサービスの開始後は、常にサービスコントロールマネージャにチェックイン し続け、サービスをいつ終了させるべきかを確認するべきです。 これは、定期的に win32_get_last_control_message() をコールして返り値を適切に処理することで実現できます。 code appropriately.
int win32_start_service ( string $servicename [, string $machine ] )\n指定したサービスの開始を試みます。通常は管理者権限を必要とします。
int win32_stop_service ( string $servicename [, string $machine ] )\nサービスを停止します。管理者権限を必要とします。
string wordwrap ( string $str [, int $width = 75 [, string $break = &quot;\\n&quot; [, bool $cut = false ]]] )\n指定した文字数で、指定した文字を用いて文字列を分割します。
string xattr_get ( string $filename , string $name [, int $flags = 0 ] )\nこの関数は、ファイルの拡張属性の値を取得します。\n拡張属性には二種類の異なる名前空間、つまり、ユーザとルートがあります。 ユーザ名前空間は、すべてのユーザで利用可能ですが、ルート名前空間は、ルート権限を有するユーザのみ利用可能です。 xattr はデフォルトでユーザ名前空間で処理を行いますが、 flags 引数によりこれを変更することができます。
array xattr_list ( string $filename [, int $flags = 0 ] )\nこの関数は、ファイルの拡張属性の名前の一覧を取得します。\n拡張属性には二種類の異なる名前空間、つまり、ユーザとルートがあります。 ユーザ名前空間は、すべてのユーザで利用可能ですが、ルート名前空間は、ルート権限を有するユーザのみ利用可能です。 xattr はデフォルトでユーザ名前空間で処理を行いますが、 flags 引数によりこれを変更することができます。
bool xattr_remove ( string $filename , string $name [, int $flags = 0 ] )\nこの関数は、ファイルの拡張属性を削除します。\n拡張属性には二種類の異なる名前空間、つまり、ユーザとルートがあります。 ユーザ名前空間は、すべてのユーザで利用可能ですが、ルート名前空間は、ルート権限を有するユーザのみ利用可能です。 xattr はデフォルトでユーザ名前空間で処理を行いますが、 flags 引数によりこれを変更することができます。
bool xattr_set ( string $filename , string $name , string $value [, int $flags = 0 ] )\nこの関数は、ファイルの拡張属性の値を設定します。\n拡張属性には二種類の異なる名前空間、つまり、ユーザとルートがあります。 ユーザ名前空間は、すべてのユーザで利用可能ですが、ルート名前空間は、ルート権限を有するユーザのみ利用可能です。 xattr はデフォルトでユーザ名前空間で処理を行いますが、 flags 引数によりこれを変更することができます。
bool xattr_supported ( string $filename [, int $flags = 0 ] )\nこの関数は、指定したファイルを保持するファイルシステムが 拡張属性をサポートしているかどうかを調べます。ファイルに対する 読み込みアクセス権限を必要とします。
int xdiff_file_bdiff_size ( string $file )\nファイル file のバイナリパッチを 元ファイルに適用して作成するファイルのサイズを返します。
bool xdiff_file_bdiff ( string $old_file , string $new_file , string $dest )\nふたつのファイルのバイナリ diff を作成し、その結果をパッチファイルとして保存します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_file_bpatch()/xdiff_string_bpatch() を使用します。
bool xdiff_file_bpatch ( string $file , string $patch , string $dest )\nファイル file にバイナリ形式のパッチファイル patch を適用し、結果をファイル dest に保存します。 この関数は、xdiff_file_bdiff() 関数あるいは xdiff_file_rabdiff()、 そしてそれぞれの文字列版が作成したパッチを受け取ることができます。
bool xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest )\nふたつのファイルのバイナリ diff を作成し、その結果をパッチファイルとして保存します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_file_bpatch(). を使用します。\nバージョン 1.5.0 以降では、この関数は xdiff_file_bdiff() のエイリアスです。
bool xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context = 3 [, bool $minimal = false ]] )\nold_file と new_file の差分を含む unified diff を作成し、ファイル dest に保存します。結果は可読形式のファイルとなります。 オプションのパラメータ context で、 変更部分の前後にどれだけの行を含めるかを指定します (デフォルト値は 3 です)。 パラメータ minimal を true にすると、 できる限り短い長さのパッチファイルを出力します (長い時間がかかります)。
mixed xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest )\n3 つのファイルをひとつに統合し、結果をファイル dest に保存します。 old_file が元のバージョンで、new_file1 と new_file2 が修正したバージョンとなります。
bool xdiff_file_patch_binary ( string $file , string $patch , string $dest )\nファイル file にバイナリ形式のパッチファイル patch を適用し、結果をファイル dest に保存します。 この関数は、xdiff_file_bdiff() 関数あるいは xdiff_file_rabdiff()、 そしてそれぞれの文字列版が作成したパッチを受け取ることができます。\nバージョン 1.5.0 以降、この関数は xdiff_file_bpatch() のエイリアスとなりました。
mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ] )\nファイル file にパッチファイル patch を適用し、結果をファイルに保存します。 patch は、 xdiff_file_diff()/xdiff_string_diff() 関数で作成した unified diff 形式でなければなりません。 オプションのパラメータ flags で、操作モードを指定します。
bool xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest )\nふたつのファイルのバイナリ diff を作成し、その結果をパッチファイルとして保存します。 この関数と xdiff_file_bdiff() との違いは、 使用するアルゴリズムです。この関数のほうが実行速度が速く、より小さな diff を生成します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_file_bpatch()/xdiff_string_bpatch() を使用します。\nアルゴリズムの違いについての詳細は、 &raquo; libxdiff のウェブサイトを参照ください。
int xdiff_string_bdiff_size ( string $patch )\nバイナリパッチ patch を元ファイルに適用して作成するファイルのサイズを返します。
string xdiff_string_bdiff ( string $old_data , string $new_data )\nふたつの文字列のバイナリ diff を作成して結果を返します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_string_bpatch()/xdiff_file_bpatch() を使用します。
string xdiff_string_bpatch ( string $str , string $patch )\n文字列 str に、バイナリ形式のパッチ patch を適用します。 この関数は、xdiff_string_bdiff() 関数あるいは xdiff_string_rabdiff() そしてそれぞれのファイル版が作成したパッチを受け取ることができます。
string xdiff_string_bdiff ( string $old_data , string $new_data )\nふたつの文字列のバイナリ diff を作成して結果を返します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_string_bpatch()/xdiff_file_bpatch() を使用します。\nバージョン 1.5.0 以降では、この関数は xdiff_string_bdiff() のエイリアスです。
string xdiff_string_diff ( string $old_data , string $new_data [, int $context = 3 [, bool $minimal = false ]] )\nold_data 文字列と new_data 文字列の差分を含む unified diff を作成し、 結果を返します。結果は可読形式となります。 オプションのパラメータ context で、 変更部分の前後にどれだけの行を含めるかを指定します (デフォルト値は 3 です)。 パラメータ minimal を true にすると、 できる限り短い長さのパッチファイルを出力します (長い時間がかかります)。
mixed xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] )\n3 つの文字列をひとつに結合し、その結果を返します。 old_data が元のバージョンで、 new_file1 と new_file2 が修正したバージョンとなります。オプションの error を使用すると、結合時に拒否された部分がそこに渡されます。
string xdiff_string_patch_binary ( string $str , string $patch )\n文字列 str に、バイナリ形式のパッチ patch を適用します。 この関数は、xdiff_string_bdiff() 関数あるいは xdiff_string_rabdiff() そしてそれぞれのファイル版が作成したパッチを受け取ることができます。\nバージョン 1.5.0 以降、この関数は xdiff_string_bpatch() のエイリアスとなりました。
string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] )\nある文字列 str に、unified 形式のパッチ文字列 patch を適用してその結果を返します。 patch は、 xdiff_file_diff()/xdiff_string_diff() 関数で作成した unified diff 形式でなければなりません。 オプションのパラメータ flags で、操作モードを指定します。パッチが拒否された部分については、 もし error を指定していればそこに保存されます。
string xdiff_string_bdiff ( string $old_data , string $new_data )\nふたつの文字列のバイナリ diff を作成して結果を返します。 この関数と xdiff_string_bdiff() との違いは、 使用するアルゴリズムです。この関数のほうが実行速度が速く、より小さな diff を生成します。 この関数はテキストファイルとバイナリファイルの両方に適用可能です。 できあがったパッチファイルを後で適用するには xdiff_string_bpatch()/xdiff_file_bpatch() を使用します。\nアルゴリズムの違いについての詳細は、 &raquo; libxdiff のウェブサイトを参照ください。
string xml_error_string ( int $code )\nエラーコード code の説明を有する文字列を 返します。
int xml_get_current_byte_index ( resource $parser )\n指定した XML パーサのカレントのバイトインデックスを取得します。
int xml_get_current_column_number ( resource $parser )\n指定した XML パーサのカレントのカラム番号を取得します。
int xml_get_current_line_number ( resource $parser )\n指定した XML パーサのカレントの行番号を取得します。
int xml_get_error_code ( resource $parser )\nXML パーサのエラーコードを取得します。
int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )\nこの関数は、XMLファイルを処理し、2つの配列構造体に代入します。 ひとつめの配列 (index ) は、配列 values にある適当な値の位置を指すポインタを保持しています。 これら最後の二つのパラメータは参照渡しとする必要があります。
int xml_parse ( resource $parser , string $data [, bool $is_final = false ] )\nxml_parse() は XML ドキュメントを処理します。 設定されているイベントのハンドラが、必要に応じてコールされます。
resource xml_parser_create_ns ([ string $encoding [, string $separator ]] )\nxml_parser_create_ns() は XML 名前空間をサポートした 新しい XML パーサを作成し、他の XML 関数が使用するハンドルを返します。
resource xml_parser_create ([ string $encoding ] )\nxml_parser_create() は新しい XML パーサを作成し、 他の XML 関数が使用するハンドルを返します。
bool xml_parser_free ( resource $parser )\n指定した XML パーサ parser を解放します。
mixed xml_parser_get_option ( resource $parser , int $option )\nXML パーサからオプションの値を取得します。
bool xml_parser_set_option ( resource $parser , int $option , mixed $value )\nXML パーサのオプションを設定します。
bool xml_set_character_data_handler ( resource $parser , callback $handler )\nXML パーサ parser の文字データ用ハンドラ関数を設定します。
bool xml_set_default_handler ( resource $parser , callback $handler )\nXMLパーサ parser のデフォルトのハンドラ関数を設定します。
bool xml_set_element_handler ( resource $parser , callback $start_element_handler , callback $end_element_handler )\nXML パーサ parser の要素ハンドラ関数を設定します。 start_element_handler および end_element_handler は、 xml_parse() が parser を コールした際に存在している必要がある関数の名前を有する文字列です。
bool xml_set_end_namespace_decl_handler ( resource $parser , callback $handler )\n名前空間宣言のスコープを抜けるときにコールされるハンドラを設定します。 これがコールされるのは、各名前空間宣言において、 名前空間が宣言された要素の終了タグのハンドラがコールされた後のことです。
bool xml_set_external_entity_ref_handler ( resource $parser , callback $handler )\nXML パーサ parser の外部エンティティ参照用ハンドラ関数を設定します。
bool xml_set_notation_decl_handler ( resource $parser , callback $handler )\nXML パーサ parser の表記法宣言用ハンドラ関数を設定します。\n表記法の宣言は、ドキュメントの DTD の一部であり、 次のようなフォーマットとなります。\n<!NOTATION <parameter>name</parameter> { <parameter>systemId</parameter> | <parameter>publicId</parameter>?>\n表記法宣言の定義に関しては、 &raquo; XML 1.0 仕様の 4.7 節 を参照ください。
bool xml_set_object ( resource $parser , object &$object )\nこの関数は、object の内部から parser を使用可能にします。 xml_set_element_handler() 等により設定される 全てのコールバック関数は、object のメソッドであると仮定されます。
bool xml_set_processing_instruction_handler ( resource $parser , callback $handler )\nXML パーサ parser の処理命令 (PI) 用ハンドラ関数を設定します。\n処理命令は、次のフォーマットを有しています。\n<?target data?>\nこのようなタグに PHP コードを入れることが可能ですが、一つの制約に 注意してください。XML PI において、PI 終了タグ (?>)は引用符で括ることができません。 このため、この文字の並びを XML ドキュメント中にPIにより埋め込んだ PHP コードの中で使用することはできません。これを使用した場合、残りの PHP コードは、&quot;真の&quot; PI 終了タグと同じく文字データとして処理 されます。
bool xml_set_start_namespace_decl_handler ( resource $parser , callback $handler )\n名前空間を宣言したところでコールされるハンドラを設定します。 名前空間の宣言は、開始タグの中で行います。 しかし、名前空間宣言の開始ハンドラがコールされるのは、 その開始タグのハンドラがコールされるより前になります。
bool xml_set_unparsed_entity_decl_handler ( resource $parser , callback $handler )\nXML パーサ parser の、 処理されないエンティティ宣言用ハンドラ関数を設定します。\nこのハンドラは、XML パーサが次のような NDATA 宣言を有する 外部エンティティ宣言を処理する際にコールされます。\n<!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter> | <parameter>systemId</parameter>} NDATA <parameter>notationName</parameter>\n外部エンティティ宣言の記述用定義に関しては、 &raquo; XML 1.0 仕様の 4.2.2 節を参照ください。
mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
mixed xmlrpc_decode ( string $xml [, string $encoding ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
string xmlrpc_encode ( mixed $value )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string xmlrpc_get_type ( mixed $value )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\nこの関数は特に base64 及び datetime 文字列で有用です。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool xmlrpc_is_fault ( array $arg )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
array xmlrpc_parse_method_descriptions ( string $xml )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int xmlrpc_server_add_introspection_data ( resource $server , array $desc )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
resource xmlrpc_server_create ( void )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
int xmlrpc_server_destroy ( resource $server )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool xmlrpc_set_type ( string &$value , string $type )\nPHP の文字列用の xmlrpc 型を、base64 あるいは datetime に設定します。\n警告\nこの関数は、 実験的 なものです。この関数の動作・ 名前・その他ドキュメントに書かれている事項は、予告なく、将来的な PHP のリリースにおいて変更される可能性があります。 この関数は自己責任で使用してください。
オブジェクト指向型\nXMLWriter\nbool endAttribute ( void )\n手続き型\nbool xmlwriter_end_attribute ( resource $xmlwriter )\n現在の属性を終了します。
オブジェクト指向型\nXMLWriter\nbool endCData ( void )\n手続き型\nbool xmlwriter_end_cdata ( resource $xmlwriter )\n現在の CDATA セクションを終了します。
オブジェクト指向型\nXMLWriter\nbool endComment ( void )\n手続き型\nbool xmlwriter_end_comment ( resource $xmlwriter )\n現在のコメントを終了します。
オブジェクト指向型\nXMLWriter\nbool endDocument ( void )\n手続き型\nbool xmlwriter_end_document ( resource $xmlwriter )\n現在のドキュメントを終了します。
オブジェクト指向型\nXMLWriter\nbool endDTDAttlist ( void )\n手続き型\nbool xmlwriter_end_dtd_attlist ( resource $xmlwriter )\n現在の DTD 属性リストを終了します。
オブジェクト指向型\nXMLWriter\nbool endDTDElement ( void )\n手続き型\nbool xmlwriter_end_dtd_element ( resource $xmlwriter )\n現在の DTD 要素を終了します。
オブジェクト指向型\nXMLWriter\nbool endDTDEntity ( void )\n手続き型\nbool xmlwriter_end_dtd_entity ( resource $xmlwriter )\n現在の DTD エンティティを終了します。
オブジェクト指向型\nXMLWriter\nbool endDTD ( void )\n手続き型\nbool xmlwriter_end_dtd ( resource $xmlwriter )\nドキュメントの DTD を終了します。
オブジェクト指向型\nXMLWriter\nbool endElement ( void )\n手続き型\nbool xmlwriter_end_element ( resource $xmlwriter )\n現在の要素を終了します。
オブジェクト指向型\nXMLWriter\nbool endPI ( void )\n手続き型\nbool xmlwriter_end_pi ( resource $xmlwriter )\n現在の処理命令を終了します。
オブジェクト指向型\nXMLWriter\nmixed flush ([ bool $empty ] )\n手続き型\nmixed xmlwriter_flush ( resource $xmlwriter [, bool $empty ] )\n現在のバッファをフラッシュします。
オブジェクト指向型\nXMLWriter\nbool fullEndElement ( void )\n手続き型\nbool xmlwriter_full_end_element ( resource $xmlwriter )\n現在の xml 要素を終了します。要素が空であっても終了タグを書き込みます。
オブジェクト指向型\nXMLWriter\nbool openMemory ( void )\n手続き型\nresource xmlwriter_open_memory ( void )\n文字列の出力にメモリを使用する新しい XMLWriter を作成します。
オブジェクト指向型\nXMLWriter\nbool openURI ( string $uri )\n手続き型\nresource xmlwriter_open_uri ( string $uri )\nuri を指定した新しい XMLWriter を作成します。
オブジェクト指向型\nXMLWriter\nstring outputMemory ([ bool $flush ] )\n手続き型\nstring xmlwriter_output_memory ( resource $xmlwriter [, bool $flush ] )\n現在のバッファを返します。
オブジェクト指向型\nXMLWriter\nbool setIndentString ( string $indentString )\n手続き型\nbool xmlwriter_set_indent_string ( resource $xmlwriter , string $indentString )\n文字列を設定します。この文字を使用して、結果の xml の要素/属性 を字下げします。
オブジェクト指向型\nXMLWriter\nbool setIndent ( bool $indent )\n手続き型\nbool xmlwriter_set_indent ( resource $xmlwriter , bool $indent )\n字下げの on/off を切り替えます。
オブジェクト指向型\nXMLWriter\nbool startAttributeNS ( string $prefix , string $name , string $uri )\n手続き型\nbool xmlwriter_start_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )\n名前空間つきの属性を開始します。
オブジェクト指向型\nXMLWriter\nbool startAttribute ( string $name )\n手続き型\nbool xmlwriter_start_attribute ( resource $xmlwriter , string $name )\n属性を開始します。
オブジェクト指向型\nXMLWriter\nbool startCData ( void )\n手続き型\nbool xmlwriter_start_cdata ( resource $xmlwriter )\nCDATA を開始します。
オブジェクト指向型\nXMLWriter\nbool startComment ( void )\n手続き型\nbool xmlwriter_start_comment ( resource $xmlwriter )\nコメントを開始します。
オブジェクト指向型\nXMLWriter\nbool startDocument ([ string $version [, string $encoding [, string $standalone ]]] )\n手続き型\nbool xmlwriter_start_document ( resource $xmlwriter [, string $version [, string $encoding [, string $standalone ]]] )\nドキュメントを開始します。
オブジェクト指向型\nXMLWriter\nbool startDTDAttlist ( string $name )\n手続き型\nbool xmlwriter_start_dtd_attlist ( resource $xmlwriter , string $name )\nDTD 属性リストを開始します。
オブジェクト指向型\nXMLWriter\nbool startDTDElement ( string $qualifiedName )\n手続き型\nbool xmlwriter_start_dtd_element ( resource $xmlwriter , string $qualifiedName )\nDTD 要素を開始します。
オブジェクト指向型\nXMLWriter\nbool startDTDEntity ( string $name , bool $isparam )\n手続き型\nbool xmlwriter_start_dtd_entity ( resource $xmlwriter , string $name , bool $isparam )\nDTD エンティティを開始します。
オブジェクト指向型\nXMLWriter\nbool startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )\n手続き型\nbool xmlwriter_start_dtd ( resource $xmlwriter , string $qualifiedName [, string $publicId [, string $systemId ]] )\nDTD を開始します。
オブジェクト指向型\nXMLWriter\nbool startElementNS ( string $prefix , string $name , string $uri )\n手続き型\nbool xmlwriter_start_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )\n名前空間つき要素を開始します。
オブジェクト指向型\nXMLWriter\nbool startElement ( string $name )\n手続き型\nbool xmlwriter_start_element ( resource $xmlwriter , string $name )\n要素を開始します。
オブジェクト指向型\nXMLWriter\nbool startPI ( string $target )\n手続き型\nbool xmlwriter_start_pi ( resource $xmlwriter , string $target )\n処理命令の開始タグを作成します。
オブジェクト指向型\nXMLWriter\nbool text ( string $content )\n手続き型\nbool xmlwriter_text ( resource $xmlwriter , string $content )\nテキストを書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeAttributeNS ( string $prefix , string $name , string $uri , string $content )\n手続き型\nbool xmlwriter_write_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri , string $content )\n名前空間つき属性全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeAttribute ( string $name , string $value )\n手続き型\nbool xmlwriter_write_attribute ( resource $xmlwriter , string $name , string $value )\n属性全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeCData ( string $content )\n手続き型\nbool xmlwriter_write_cdata ( resource $xmlwriter , string $content )\nCDATA 全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeComment ( string $content )\n手続き型\nbool xmlwriter_write_comment ( resource $xmlwriter , string $content )\nコメント全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeDTDAttlist ( string $name , string $content )\n手続き型\nbool xmlwriter_write_dtd_attlist ( resource $xmlwriter , string $name , string $content )\nDTD 属性リストを書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeDTDElement ( string $name , string $content )\n手続き型\nbool xmlwriter_write_dtd_element ( resource $xmlwriter , string $name , string $content )\nDTD 要素全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeDTDEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )\n手続き型\nbool xmlwriter_write_dtd_entity ( resource $xmlwriter , string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )\nDTD エンティティ全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )\n手続き型\nbool xmlwriter_write_dtd ( resource $xmlwriter , string $name [, string $publicId [, string $systemId [, string $subset ]]] )\nDTD 全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeElementNS ( string $prefix , string $name , string $uri [, string $content ] )\n手続き型\nbool xmlwriter_write_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri [, string $content ] )\n名前空間つき要素タグ全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeElement ( string $name [, string $content ] )\n手続き型\nbool xmlwriter_write_element ( resource $xmlwriter , string $name [, string $content ] )\n要素タグ全体を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writePI ( string $target , string $content )\n手続き型\nbool xmlwriter_write_pi ( resource $xmlwriter , string $target , string $content )\n処理命令を書き込みます。
オブジェクト指向型\nXMLWriter\nbool writeRaw ( string $content )\n手続き型\nbool xmlwriter_write_raw ( resource $xmlwriter , string $content )\n生の xml テキストを書き込みます。
XPathContext\nXPathObject xpath_eval_expression ( string $expression [, domnode $contextnode ] )\nXPathObject xpath_eval_expression ( XPathContext $xpath_context , string $expression [, domnode $contextnode ] )
XPathContext\nXPathObject xpath_eval ( string $xpath_expression [, domnode $contextnode ] )\nXPathObject xpath_eval ( XPathContext $xpath_context , string $xpath_expression [, domnode $contextnode ] )\nオプション contextnode は、相対 XPath クエリを実行するために指定する事が可能です。\nxpath_new_context() も参照ください。
XPathContext xpath_new_context ( domdocument $dom_document )\n新規 xpath コンテキストを作成します。
bool xpath_register_ns_auto ( XPathContext $xpath_context [, object $context_node ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
bool xpath_register_ns ( XPathContext $xpath_context , string $prefix , string $uri )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
XPathContext\nint xptr_eval ( string $eval_str [, domnode $contextnode ] )\nint xptr_eval ( XPathContext $xpath_context , string $eval_str [, domnode $contextnode ] )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
XPathContext xptr_new_context ( void )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
string xslt_backend_info ( void )\nxslt_backend_info() は、バックエンドのコンパイル設定についての情報を取得します。
string xslt_backend_name ( void )\nxslt_backend_name() は、バックエンドの名前を取得します。
string xslt_backend_version ( void )\nxslt_backend_version() は、 Sablotron のバージョン番号を取得します。
resource xslt_create ( void )\n新規に XSLT プロセッサリソースを作成し、返します。このリソースは、 他の XSLT 関数による処理で使用されます。
int xslt_errno ( resource $xh )\nXSLT プロセッサで発生した直近のエラーに関するエラーコードを返します。
string xslt_error ( resource $xh )\n指定した XSLT プロセッサで発生した直近のエラーを説明する文字列を返します。
void xslt_free ( resource $xh )\nハンドルで指定した XSLT プロセッサを開放します。
int xslt_getopt ( resource $processor )\nxslt_getopt() は、与えられた processor のオプションを返します。
mixed xslt_process ( resource $xh , string $xmlcontainer , string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )\nxslt_process()関数は、XSLT 拡張モジュールの中心となる関数です。 ほとんど全ての型の入力ソース (コンテナ) を用いて XSLT 変換を実行可能です。 これを実現しているのが、引数バッファです。 引数バッファとは、Sablotron XSLT プロセッサ (現在、この拡張モジュールがサポートする惟一の XSLT プロセッサ) から得た概念です。 入力コンテナは処理する文章を &#039;含んでいる&#039; ファイル名がデフォルトです。
void xslt_set_base ( resource $xh , string $uri )\n全てのXSLT変換の基準URIを設定します。基準URIは、外部リソースにア クセスするdocument()及び他のコマンドを解決する際にXpath命令に関し て使用されます。 また、<xsl:include> と <xsl:import> 要素のための URI を解決するために使用されます。
void xslt_set_encoding ( resource $xh , string $encoding )\nXSLT 変換の出力エンコーディングを設定します。 Sablotron バックエンドを使用する際、 このオプションは、Sablotron にエンコーディングサポートを付けてコンパイルした場合のみ利用可能です。
void xslt_set_error_handler ( resource $xh , mixed $handler )\nxh で指定した XSLT プロセッサ用にエラーハンドラ関数を設定します。 この関数は、XSLT 変換においてエラーが発生する度にコールされます (この関数は通知のためにもコールされます)。
void xslt_set_log ( resource $xh [, mixed $log ] )\nこの関数により、XSLT ログメッセージを書き込むためのファイルを設定することができます。 XSLT ログメッセージはエラーメッセージとは異なります。 実際のエラーメッセージではなく、XSLT プロセッサの状態に関連するメッセージです。 何かかおかしいとき XSLT のデバッグを行う助けになります。\nデフォルトではロギングは無効です。有効にするには、 まずロギングを有効にするためのブール型のパラメータを用いて xslt_set_log() をコールする必要があります。 もしデバッグのためにログファイルを設定したい場合、 ファイル名を含む文字列を渡す必要があります。
bool xslt_set_object ( resource $processor , object &$obj )\nこの関数は、全てのコールバック関数を解決するため、 processor に object の内部情報を利用できるようにします。\nコールバック関数の宣言は xslt_set_sax_handlers(), xslt_set_scheme_handlers(), xslt_set_error_handler() で行い、それが object のメソッドとみなされます。
void xslt_set_sax_handler ( resource $xh , array $handlers )\nxh で指定したリソースハンドルに SAX ハンドラを設定します。
void xslt_set_sax_handlers ( resource $processor , array $handlers )\nxslt_set_sax_handlers() は、与えられた XSLT processor リソースに文章のための SAX ハンドラ handlers を設定します。\nxslt_set_sax_handlers() を使用することは、 xslt_process() を使用した変換の結果を xml_parse() のような SAX パーサで実行することと比べて あまり難しく見えません。
void xslt_set_scheme_handler ( resource $xh , array $handlers )\nxh で指定したリソースハンドルにスキーマハンドラを設定します。
void xslt_set_scheme_handlers ( resource $xh , array $handlers )\nドキュメントのスキーマハンドラ (XPath ハンドラ) を登録します。
mixed xslt_setopt ( resource $processor , int $newmask )\nxslt_setopt() は、与えられた processor に newmask で指定されるオプションを設定します。
string yaz_addinfo ( resource $id )\nサーバ上での直近のリクエストに関する詳細なエラーメッセージを返します。\nサーバによっては、この関数は yaz_error() と同じ 文字列を返すことがあります。
void yaz_ccl_conf ( resource $id , array $config )\nこの関数は、アクセスポイント(CCL限定辞)が定義するサーバに関して CCL クエリパーサと RPN へのマッピングを設定します。\n特定の CCL クエリを後で RPN にマップするには、 yaz_ccl_parse() 関数をコールしてください。
bool yaz_ccl_parse ( resource $id , string $query , array &$result )\nこの関数は、CCL パーサを起動します。パーサは、指定された CCL FIND クエリを RPN クエリに変換します。これは検索を実行する yaz_search() 関数に渡すためのものです。\n有効な CCL フィールドの組を定義するには、この関数の前に yaz_ccl_conf() をコールします。
bool yaz_close ( resource $id )\nid で指定した接続をクローズします。
mixed yaz_connect ( string $zurl [, mixed $options ] )\nこの関数は、成功した場合に接続リソース、失敗した場合にゼロを返します。\nyaz_connect() は Z39.50 サーバへの接続を準備します。 この関数は非ブロックモードで動作し、接続を確立しようとしません - 単にあとで yaz_wait() がコールされた際に 接続を実行する準備を行うだけです。
bool yaz_database ( resource $id , string $databases )\nこの関数は、検索、取得等で使用する１つまたは複数のデータベースを指定します。 yaz_connect() をコールする際に指定したデータベースを上書きします。
bool yaz_element ( resource $id , string $elementset )\nこの関数は、取得時の要素集合の名前を指定します。\nこの関数は、yaz_search() あるいは yaz_present() をコールする前に、 取得するレコードの要素集合の名前を指定するために使用します。
int yaz_errno ( resource $id )\nid で表される サーバの（直近のリクエストについての）エラー番号を返します。\nyaz_errno() は、各ターゲットへのネットワーク接続が 確立された後(つまり、yaz_wait()の後)に コールされる必要があり、直近の操作(例えば検索)が成功したか 失敗したかを判定します。
string yaz_error ( resource $id )\nyaz_error() は、yaz_errno() で返された直近のエラー番号に対応する英語のメッセージを返します。
array yaz_es_result ( resource $id )\nこの関数は、サーバから返された直近の拡張サービスの結果を調査します。 拡張サービスは、yaz_item_order() あるいは yaz_es() で起動します。
void yaz_es (  resource $id  ,  string $type  ,  array $args  )\nこの関数は、拡張サービスのリクエストを準備します。 拡張サービスとは、レコードの更新や蔵書の注文、データベースの管理などの Z39.50 のさまざまな機能のことです。
string yaz_get_option ( resource $id , string $name )\nname で指定したオプションの値を返します。
int yaz_hits ( resource $id [, array &$searchresult ] )\nyaz_hits() は、直近の検索に関するヒット数を返します。
void yaz_itemorder ( resource $id , array $args )\nこの関数は、Transport ILL (Profile/1) への Z39.50 Item Order Extended Service 用のプロファイルを使用する Extended Services リクエストを準備します。 &raquo; このページ および &raquo; 仕様 を参照ください。
bool yaz_present ( resource $id )\nこの関数は、検索に成功した後でレコードを取得するための準備を行います。\nこの関数をコールする前に、取得するレコードの範囲を指定するために まず yaz_range() をコールしておく必要があります。
void yaz_range ( resource $id , int $start , int $number )\n取得するレコードの範囲を指定します。\nこの関数は、yaz_search() あるいは yaz_present() の前にコールしなければなりません。
string yaz_record ( resource $id , int $pos , string $type )\nyaz_record() 関数は、現在の結果セットの pos で指定した位置にあるレコードを調べます。
array yaz_scan_result ( resource $id [, array &$result ] )\nyaz_scan_result() は、直近の yaz_scan() の実行時にサーバから受信した 項目と関連情報を返します。
void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )\nこの関数は、指定した接続上で Z39.50 スキャンリクエストの 準備をします。\n実際にスキャンリクエストをサーバへ送信して応答を受信するには、 yaz_wait() をコールする必要があります。 yaz_wait() のコールが完了した後、応答を処理するために yaz_error() および yaz_scan_result() をコールします。
void yaz_schema ( resource $id , string $schema )\nyaz_schema() は取得するスキーマを指定します。\nこの関数は、 yaz_search() あるいは yaz_present() より前にコールしなければなりません。
bool yaz_search ( resource $id , string $type , string $query )\nyaz_search() は、指定した接続で検索を行う準備をします。\nyaz_connect() と同様にこの関数は非ブロックモードで 動作し、後で yaz_wait() がコールされたときのために 検索の準備をするだけです。
void yaz_set_option ( resource $id , string $name , string $value )\nvoid yaz_set_option ( resource $id , array $options )\n指定した接続について、ひとつあるいは複数のオプションを設定します。
void yaz_sort ( resource $id , string $criteria )\nこの関数は、ソート条件を設定して Z39.50 Sort を有効にします。\nこの関数は、yaz_search() の前に コールします。この関数を単独で使用しても何も意味はありません。 yaz_search() と組み合わせて使用した場合、 検索応答が受信されてから全ての Z39.50 Present で取得される前に Z39.50 Sort が送信されます。
void yaz_syntax ( resource $id , string $syntax )\nyaz_syntax() は、取得するレコードの構文を指定します。\nこの関数は yaz_search() あるいは yaz_present() より前にコールしなければなりません。
mixed yaz_wait ([ array &$options ] )\nこの関数は、関数 yaz_connect()、 yaz_search()、yaz_present()、 yaz_scan()、yaz_itemorder() により準備された発行済のリクエストを、ネットワーク経由で（ブロック モードで）伝送します。\nyaz_wait()は、全てのターゲットが全てのリクエストを 完了したか、（エラーの場合には）中断された場合に処理を戻します。
void yp_all ( string $domain , string $map , string $callback )\n警告\nこの関数は、 現在のところ詳細な情報はありません。引数のリストのみが 記述されています。
array yp_cat ( string $domain , string $map )\nすべてのマップエントリを返します。
string yp_err_string ( int $errorcode )\n指定されたエラーコードに対応する エラーメッセージを返します。何が悪かったのかを正確に調べる際に便利です。
int yp_errno ( void )\n前に行った操作のエラーコードを返します。
array yp_first ( string $domain , string $map )\nドメイン domain のマップ map から、最初のキー/値の組を取得します。
string yp_get_default_domain ( void )\nノードのデフォルトドメインを返します。 この後の NIS コールで、これをドメインパラメータとして使用可能です。\nNIS ドメインは、NIS マップの集合として説明できます。情報を検索する 必要がある各ホストは、そのホスト自体あるドメインに属しています。 詳細な情報については、冒頭に示したドキュメントを参照ください。
string yp_master ( string $domain , string $map )\nyp_master() は、指定したマップ map のマスタ NIS サーバのマシン名を返します。
string yp_match ( string $domain , string $map , string $key )\n指定した map から、 key に対応する値を返します。
array yp_next ( string $domain , string $map , string $key )\nmap という名前のマップの中で、指定したキー key の次にある キー/値 の組を返します。
int yp_order ( string $domain , string $map )\nマップの呼出番号を返します。
string zend_logo_guid ( void )\nこの関数は、ビルトインされている画像を使って Zend ロゴを表示する際に使用できる ID を返します。
int zend_thread_id ( void )\nこの関数は、現在のスレッドの一意な ID を返します。
string zend_version ( void )\n現在実行中の Zend Engine のバージョンを含む文字列を返します。
void zip_close ( resource $zip )\nZIP ファイルアーカイブを閉じます。
bool zip_entry_close ( resource $zip_entry )\n指定されたディレクトリエントリを閉じます。
int zip_entry_compressedsize ( resource $zip_entry )\nディレクトリエントリの圧縮時のサイズを取得します。
string zip_entry_compressionmethod ( resource $zip_entry )\nzip_entry により指定されたディレクトリエントリの 圧縮方法を返します。
int zip_entry_filesize ( resource $zip_entry )\nディレクトリエントリの実際のファイルサイズを返します。
string zip_entry_name ( resource $zip_entry )\n指定したディレクトリエントリの名前を返します。
bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )\n読込み用にzipファイルの中にディレクトリエントリをオープンします。
string zip_entry_read ( resource $zip_entry [, int $length ] )\nオープンされたディレクトリエントリから読み込みます。
mixed zip_open ( string $filename )\n読み込み用に新規に Zip アーカイブをオープンします。
mixed zip_read ( resource $zip )\nZip ファイルアーカイブの中の次のエントリを読み込みます。
bool ZipArchive::addEmptyDir ( string $dirname )\n空のディレクトリをアーカイブに追加します。
bool ZipArchive::addFile ( string $filename [, string $localname ] )\n指定したパスから、ファイルを ZIP アーカイブに追加します。
bool ZipArchive::addFromString ( string $localname , string $contents )\n内容を指定して、ファイルを ZIP アーカイブに追加します。
bool ZipArchive::close ( void )\nオープンされた、あるいは作成されたアーカイブを閉じ、 変更内容を保存します。このメソッドは、 スクリプトの最後で自動的にコールされます。
bool ZipArchive::deleteIndex ( int $index )\nインデックスをもとにして、アーカイブ内のエントリを削除します。
bool ZipArchive::deleteName ( string $name )\n名前をもとにして、アーカイブ内のエントリを削除します。
bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )\nアーカイブの全体あるいは指定したファイルを、 指定した場所に展開します。
string ZipArchive::getArchiveComment ( void )\nZip アーカイブのコメントを返します。
string ZipArchive::getCommentIndex ( int $index [, int $flags ] )\nエントリのインデックスを使用して、エントリのコメントを返します。
string ZipArchive::getCommentName ( string $name [, int $flags ] )\nエントリ名を使用して、エントリのコメントを返します。
mixed ZipArchive::getFromIndex ( int $index [, int $flags ] )\nインデックスを使用して、エントリの内容を返します。
mixed ZipArchive::getFromName ( string $name [, int $flags ] )\n名前を使用して、エントリの内容を返します。
string ZipArchive::getNameIndex ( int $index )\nインデックスを使用して、エントリの名前を返します。
string ZipArchive::getStatusString ( void )\nシステムエラー、または ZIP メッセージに関するエラー情報を返す
resource ZipArchive::getStream ( string $name )\n名前を使用して、エントリのファイルハンドラを取得します。 現時点では読み込み操作のみに対応しています。
mixed ZipArchive::locateName ( string $name [, int $flags ] )\n名前を使用して、エントリの場所を取得します。
mixed ZipArchive::open ( string $filename [, int $flags ] )\n新しい zip アーカイブを、読み込み/書き込み/変更用にオープンします。
bool ZipArchive::renameIndex ( int $index , string $newname )\nインデックスを使用して、エントリ名を変更します。
bool ZipArchive::renameName ( string $name , string $newname )\n名前を使用して、エントリ名を変更します。
mixed ZipArchive::setArchiveComment ( string $comment )\nZIP アーカイブのコメントを設定します。
mixed ZipArchive::setCommentIndex ( int $index , string $comment )\nインデックスを使用して、エントリのコメントを設定します。
mixed ZipArchive::setCommentName ( string $name , string $comment )\n名前を使用して、エントリのコメントを設定します。
mixed ZipArchive::statIndex ( int $index [, int $flags ] )\nこの関数は、インデックスを使用してエントリの詳細情報を取得します。
mixed ZipArchive::statName ( name $name [, int $flags ] )\nこの関数は、名前を使用してエントリの詳細情報を取得します。
mixed ZipArchive::unchangeAll ( void )\nアーカイブに対するすべての変更を取り消します。
mixed ZipArchive::unchangeArchive ( void )\nアーカイブ全体に対して行われたすべての変更を取り消します。 現在は、これはアーカイブのコメントに対する変更のみを取り消します。
mixed ZipArchive::unchangeIndex ( int $index )\n指定したインデックスのエントリに対するすべての変更を取り消します。
mixed ZipArchive::unchangeName ( string $name )\nエントリに対するすべての変更を取り消します。
string zlib_get_coding_type ( void )\n出力圧縮に使用されたコーディングの種類を返します。
